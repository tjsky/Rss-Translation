<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Sat, 09 Aug 2025 21:17:17 GMT</lastBuildDate>
    <item>
      <title>如何使用GPT-5，FastApi和芹菜构建智能网站分析仪</title>
      <link>https://www.reddit.com/r/programming/comments/1mlxbfe/how_to_build_a_smart_website_analyzer_with_gpt5/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/tholud_serve9696      ＆＃32;  &lt;a href =“ https://www.reddit.com/r/programming/comments/1mlxbfe/how_to_build_a_smart_smart_website_website_analyzer_with_with_with_with_gpt5/”]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mlxbfe/how_to_build_a_smart_website_analyzer_with_gpt5/</guid>
      <pubDate>Sat, 09 Aug 2025 19:00:49 GMT</pubDate>
    </item>
    <item>
      <title>MCP vs SDK：LLM驱动的可扩展性的两条途径</title>
      <link>https://www.reddit.com/r/programming/comments/1mlwrlc/mcp_vs_sdk_two_paths_to_llmpowered_extensibility/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  在早期，“软件饮食世界”意味着真正的力量归功于可以通过编写自己的程序或脚本编写他们使用的程序来弯腰工具的人。现在，有了大型语言模型，问题不仅是您的应用程序开箱即用了什么，而且您允许AI工具可以处理的内容。 在这篇文章中，我研究了两个清晰的模式：      llm可以直接调用您的应用程序的函数  两者都具有优势，权衡和在大多数严重产品中的位置。钥匙是决定绘制线路的位置 - 并确保打开的门与用户（及其AIS）实际工作的方式匹配。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/wifeeyedfascination      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mlwrlc/mcp_vs_sdk_two_paths_to_llmpowered_extensibility/</guid>
      <pubDate>Sat, 09 Aug 2025 18:37:46 GMT</pubDate>
    </item>
    <item>
      <title>在我的AI假实时应用程序上寻找反馈 -  3天免费免费🎥📱</title>
      <link>https://www.reddit.com/r/programming/comments/1mlw2qj/looking_for_feedback_on_my_ai_fake_live_app_3/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  嘿reddit， 我一直在制作一个名为 liverse 。的AI驱动的假实时流媒体应用程序。有趣，简单且易于使用。 现在，我正在运行 1周的反馈期。在这段时间里，我已解锁 3天的免费溢价访问 ，更多的人可以尝试应用程序并分享他们的想法并分享他们的想法。了解您：  哪些功能会使这样的应用程序真正有趣且对您有价值？ 我如何使用户体验更好？ 有什么技巧可以使更多的人在较小的预算上触及更多的人？ App Store。 我真的很想听听您的想法 - 不要退缩。 🙌  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/parking-ad-9759       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mlw2qj/looking_for_feedback_on_my_ai_fake_live_app_3/</guid>
      <pubDate>Sat, 09 Aug 2025 18:08:51 GMT</pubDate>
    </item>
    <item>
      <title>前体宣言：为什么上下文体系结构在AI开发中迅速工程</title>
      <link>https://www.reddit.com/r/programming/comments/1mlvpgb/the_precursor_manifesto_why_context_architecture/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  大多数AI编码项目都遵循相同的模式：有希望的开始，随着复杂性的增长而完全崩溃。 作为主要软件工程师，我已经意识到问题不是AI，不是AI，它是我们在AI助手的情况下放弃的基本软件原理。 “构建我一个todo应用程序”   问题：将AI视为魔术而不是应用系统的开发实践。   解决方案：上下文架构，结构化的JSON文档，可为AI提供全面的，可读的上下文（例如，我们将shectrure for Datientabase contrucy contrution for Datientabase and Pacture cranders and Pertabise and Percute and Percute and Percantife and Pestrie for Dactabase and Pestabise&gt;   ）不是聊天历史。该方法将可靠的工程原理应用于AI开发：结构化计划，版本控制的上下文文档和扩展的系统过程。   核心洞察力： 80％通过上下文体系结构进行计划，通过AI编码执行20％。好奇哪种方法在保持较大的AI辅助项目中保持一致性有用。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/cgvas     [link]        [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mlvpgb/the_precursor_manifesto_why_context_architecture/</guid>
      <pubDate>Sat, 09 Aug 2025 17:53:48 GMT</pubDate>
    </item>
    <item>
      <title>在测试任务回购中的恶意软件 - 在NPM启动之前检查代码库</title>
      <link>https://www.reddit.com/r/programming/comments/1mlvavd/malware_in_test_task_repo_check_codebase_before/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  从客户端获得了测试任务回购？  不要马上在本地运行它 - 可能是恶意软件！  这样的LinkedIn帖子保存了我的硬盘驱动器。  始终首先检查代码，甚至可以使用AI嗅出粗略的东西。  我采访的一些UPWORK项目被标记为风险。  保持安全！ 必须附加一些内容以添加此帖子，因此我添加了SaaS链接。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/mothor_money434      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mlvavd/malware_in_test_task_repo_check_codebase_before/</guid>
      <pubDate>Sat, 09 Aug 2025 17:37:31 GMT</pubDate>
    </item>
    <item>
      <title>关于学习Laravel</title>
      <link>https://www.reddit.com/r/programming/comments/1mlurns/about_learning_laravel/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  你好，我的朋友们，我想通过真实的项目练习Laravel。是否有提供项目的渠道或网站，以便我知道就业市场需要什么？我的级别是中间  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/w2za       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mlurns/about_learning_laravel/</guid>
      <pubDate>Sat, 09 Aug 2025 17:14:49 GMT</pubDate>
    </item>
    <item>
      <title>让我们做游戏吧！ 300：阻止同伴</title>
      <link>https://www.reddit.com/r/programming/comments/1mltg0v/lets_make_a_game_300_blocking_companions/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/apeloverage      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mltg0v/lets_make_a_game_300_blocking_companions/</guid>
      <pubDate>Sat, 09 Aug 2025 16:20:27 GMT</pubDate>
    </item>
    <item>
      <title>搜索产品API</title>
      <link>https://www.reddit.com/r/programming/comments/1mlrlu8/searching_for_a_product_api/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  您好，我正在寻找一个API，该API将为可以在线购买的产品提供链接和图像。我已经尝试过Serpapi，但不幸的是Google Shop API不再工作。您知道我可以尝试的其他好API吗？ 我不认为Amazon API是理想的选择，因为它仅列出了亚马逊产品。我想要独立的产品结果。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/uxwithjoshua       [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mlrlu8/searching_for_a_product_api/</guid>
      <pubDate>Sat, 09 Aug 2025 15:04:02 GMT</pubDate>
    </item>
    <item>
      <title>Novaxis：更聪明的BF ***</title>
      <link>https://www.reddit.com/r/programming/comments/1mlr604/novaxis_a_smarter_bf/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;   novaxis。 有史以来最愚蠢的eslang，但至关现代。  novaxis是我的个人项目，我的个人项目在Python工作了2-3周。一条以下300行Python解释了基于Brainf ***启发的范式胶带的Esolang，就像BF一样，基于磁带，运行极轻，但并没有将其解释为Python（我知道疯狂），并具有扩展的语法，并且可以接受。解释器的速度和手柄能力将其用法稍微扩展到Brainf ***  如果有人想了解更多的方向  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/no_garbage_3120       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mlr604/novaxis_a_smarter_bf/</guid>
      <pubDate>Sat, 09 Aug 2025 14:45:34 GMT</pubDate>
    </item>
    <item>
      <title>第59天：如何从JavaScript中的数组中删除重复对象？</title>
      <link>https://www.reddit.com/r/programming/comments/1mlqvfq/day_59_how_do_you_remove_duplicate_objects_from/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/myssiriouseye8494     [link]      &lt;a href =“ https://www.reddit.com/r/programming/comments/1mlqvfq/day_59_how_how_do_do_you_remove_remove_duplicate_object_objects_from/”]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mlqvfq/day_59_how_do_you_remove_duplicate_objects_from/</guid>
      <pubDate>Sat, 09 Aug 2025 14:32:40 GMT</pubDate>
    </item>
    <item>
      <title>第13天：RXJS中的多播 - 分享，共享和发布解释</title>
      <link>https://www.reddit.com/r/programming/comments/1mlqq1z/day_13_multicasting_in_rxjs_share_sharereplay_and/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/myssiriouseye8494     [link]       &lt;a href =“ https://www.reddit.com/r/programming/comments/1mlqq1z/day_13_13_multicasting_in_rxjs_share_share_sharee_shareereplay_and/”]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mlqq1z/day_13_multicasting_in_rxjs_share_sharereplay_and/</guid>
      <pubDate>Sat, 09 Aug 2025 14:25:57 GMT</pubDate>
    </item>
    <item>
      <title>WRKFLW v0.6.0</title>
      <link>https://www.reddit.com/r/programming/comments/1mlqoxw/wrkflw_v060/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  大家好！ 兴奋地宣布wrkflw v0.6.0的发布！ 🎉 对于那些不熟悉的人，wrkflw是一种命令行工具，旨在帮助您在本地工作验证，执行和触发github操作。  v0.6.0中的新功能是什么？允许！  改进的调试：更好的容器保存和失败工作流的检查功能。   &lt;代码&gt;＃＃＃安装并尝试一下！货物安装wrkflw＃与podman wrkflw run -runtime podman .github/workflows/ci.yml＃或使用tui wrkflw tui - -runtime podman    在 https://github.com/bahdotsh/wrkflw   我很想听听您的反馈！如果您遇到任何问题或对将来的改进提出建议，请在Github上打开一个问题。总是欢迎贡献！ 感谢您的支持！  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/new-blacksmith8524       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mlqoxw/wrkflw_v060/</guid>
      <pubDate>Sat, 09 Aug 2025 14:24:38 GMT</pubDate>
    </item>
    <item>
      <title>如何使用GPT-5和FastAPI构建网站分析仪</title>
      <link>https://www.reddit.com/r/programming/comments/1mlqaem/how_to_build_a_website_analyzer_using_gpt5_and/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我一直在尝试FastApi，芹菜和GPT-5，最终建立了一项小型服务，该小型服务占用了网站URL，将文本传递给GPT-5，并将其传递给GPT-5进行分析。 URL. Celery worker handles scraping (with requests + basic UA headers) and truncates content to ~8k characters. A LangChain prompt formats the system/human messages. GPT-5 returns a structured JSON “business report” (business model, target audience, UX notes, growth opportunities, etc.). The API returns that JSON to the client, along with a preview snippet and a unique report ID.  The main challenges were:  Making scraping resilient but still simple (basic headers, timeout, no full browser automation). Getting GPT to reliably output parseable JSON (occasionally falls back to free-form text). Ensuring analysis runs asynchronously so requests don’t hang.  Code is based on the fastlaunchapi.dev starter for boilerplate, with extra pieces for LangChain + OpenAI integration. &lt;!-- sc_on-&gt;＆＃32;提交由＆＃32; /u/u/tholud_serve9696       [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mlqaem/how_to_build_a_website_analyzer_using_gpt5_and/</guid>
      <pubDate>Sat, 09 Aug 2025 14:06:25 GMT</pubDate>
    </item>
    <item>
      <title>我的项目，OpenFreeMap每秒幸存100,000个请求</title>
      <link>https://www.reddit.com/r/programming/comments/1mlpk7r/my_project_openfreemap_survived_100000_requests/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/hyperknot      [注释]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mlpk7r/my_project_openfreemap_survived_100000_requests/</guid>
      <pubDate>Sat, 09 Aug 2025 13:33:39 GMT</pubDate>
    </item>
    <item>
      <title>伊斯兰教，基督教和印度教的主要圣书的所有Github和JSON CDN链接。</title>
      <link>https://www.reddit.com/r/programming/comments/1mlpbka/all_the_github_and_json_cdn_link_for_islam/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  圣经   https://raw.githubusercontent.com/jadenzaleski/bibletranslations/refs/heads/heads/master/akjv/akjv/akjv_bible.json   在原始上方转换为cdn  https://cdn.jsdelivr.net/gh/jadenzaleski/bibletranslations@master/akjv/akjv_bible.json      （但是这与所有经文一样） 古兰经   https://cdn.jsdelivr.net/npm/best-bible@1.7.5/dist/browser/best-bible.min.js     https：//raw.githubusercercontent.com/risan/risan/risan/quran-quran-quran-quran-json-json-json/refs/rean/puran/quran/quran/quran/quran/jen/jen/jen/jen/dises-iast-a一下 bhagavad gita    https://raw.githubusercontent.com/gita/gita/refs/heads/main/archive/corrceted_translation_gpt3.json   从上面的链接转换  https://cdn.jsdelivr.net/gh/gita/gita@main/archive/corrected_translation_gpt3.json  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/federal-daikon-412      [link]   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mlpbka/all_the_github_and_json_cdn_link_for_islam/</guid>
      <pubDate>Sat, 09 Aug 2025 13:22:08 GMT</pubDate>
    </item>
    </channel>
</rss>