<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Mon, 28 Jul 2025 04:04:52 GMT</lastBuildDate>
    <item>
      <title>油门医生：交互式JS活动处理</title>
      <link>https://www.reddit.com/r/programming/comments/1mb641i/throttle_doctor_interactive_js_event_handling/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  嘿 r/javascript ， 我已经构建了 fort&gt; totottle doctor ，可帮助您了解视觉上的evertive和fine the nune tembercript和fine the nune tembascript。如果您由于快速发生事件（例如鼠标移动或滚动事件）而在性能方面遇到了困难，则此工具适合您。  它的作用：它是一个用于尝试 debounct    tot&gt; totlottle 技术的沙箱。您可以调整参数，例如等待时间，前沿和 tabled Edge 以查看它们对函数执行的立即影响，帮助您优化代码并防止事件过载。控制功能调用。  通过执行：调整设置并观察实时结果。  优化性能：了解如何防止不必要的执行。   尝试实时演示： https://duroktar.github.io/throttledlector/ 查看代码：https://github.com/Duroktar/ThrottleDoctor Note: This app showcases a throttleDebounce function, but a standalone library is not yet released.这是概念验证，将根据需求考虑图书馆。  让我知道您的想法！  免责声明：这篇文章是在AI帮助下创建的。该项目主要是氛围编码的，用户调整最少   &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/duroktar      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mb641i/throttle_doctor_interactive_js_event_handling/</guid>
      <pubDate>Mon, 28 Jul 2025 03:49:20 GMT</pubDate>
    </item>
    <item>
      <title>反向代理深度潜水（第3部分）：服务发现的隐藏复杂性</title>
      <link>https://www.reddit.com/r/programming/comments/1mb402l/reverse_proxy_deep_dive_part_3_the_hidden/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我正在分享一个系列的第3部分，探讨了逆向代理的内部。这篇文章深入研究了服务发现，听起来很简单，但在动态环境中揭示了许多隐藏的挑战。 涵盖的主题包括：静态主机列表，基于DNS的TTL折衷发现，Zookeeper和Enkoy&#39;s XDS等外部系统，以及主动VS无线电健康检查。该帖子还讨论了现实世界中的问题，例如DNS尺寸限制和健康检查风暴。 如果您已经从事服务发现或代理基础架构工作，我很想听听您的经历或想法。 完整帖子（大约10分钟）： httpps://startwithhy.com/reverseproxy/2025/2025/07/07/26/reverseprox-deep-deep-deep-deep-dive-part.heprox-dive-part.hh.hh.heb 连接管理和HTTP解析。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/miggyishu     [link]    32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mb402l/reverse_proxy_deep_dive_part_3_the_hidden/</guid>
      <pubDate>Mon, 28 Jul 2025 02:01:24 GMT</pubDate>
    </item>
    <item>
      <title>新的编程基础课程</title>
      <link>https://www.reddit.com/r/programming/comments/1mb2x8s/a_new_programming_fundamentals_course/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/nicbarkeragain       [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mb2x8s/a_new_programming_fundamentals_course/</guid>
      <pubDate>Mon, 28 Jul 2025 01:07:50 GMT</pubDate>
    </item>
    <item>
      <title>iOS 26下的无数革命。WebGPU无处不在</title>
      <link>https://www.reddit.com/r/programming/comments/1mb22x0/the_untold_revolution_beneath_ios_26_webgpu_is/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/woofl     [link]   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mb22x0/the_untold_revolution_beneath_ios_26_webgpu_is/</guid>
      <pubDate>Mon, 28 Jul 2025 00:26:49 GMT</pubDate>
    </item>
    <item>
      <title>锈蚀要存档🦀</title>
      <link>https://www.reddit.com/r/programming/comments/1mayqi8/rustwasm_to_be_archived/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/web3writer       [commist]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mayqi8/rustwasm_to_be_archived/</guid>
      <pubDate>Sun, 27 Jul 2025 21:54:42 GMT</pubDate>
    </item>
    <item>
      <title>带有红宝石在铁轨上的工程：摘要＃10</title>
      <link>https://www.reddit.com/r/programming/comments/1maybid/engineering_with_ruby_on_rails_digest_10/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  本周在Ruby and Rails中：探索讽刺被动队列从不经营工作的宝石，学会学会在没有额外的宝石的情况下构建多步轨道，并查看使用 brutrutrb  blogs的15分钟教程。另外，发现Ruby的 .. 范围操作员如何简化ActiverEcord查询，Rails 8如何节省数百万的开发成本，以及AI工具如何帮助（但不取代）RAILS REDACTORS。   https://monorails.substack.com/p/egineering-with-with-with-with-with-ruby-on-rails-rails-digest-digest-digest-digest-digest-digest  提交由＆＃32; /u/u/u/decuntication-ad2036      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1maybid/engineering_with_ruby_on_rails_digest_10/</guid>
      <pubDate>Sun, 27 Jul 2025 21:36:58 GMT</pubDate>
    </item>
    <item>
      <title>我使用qwen3-coder从头开始生成功能网络应用程序</title>
      <link>https://www.reddit.com/r/programming/comments/1may2tg/i_used_qwen3coder_to_generate_functional_web_apps/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/fird-sorbet5722      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1may2tg/i_used_qwen3coder_to_generate_functional_web_apps/</guid>
      <pubDate>Sun, 27 Jul 2025 21:26:50 GMT</pubDate>
    </item>
    <item>
      <title>使Postgres 42,000x慢慢，因为我失业了</title>
      <link>https://www.reddit.com/r/programming/comments/1maxelb/making_postgres_42000x_slower_because_i_am/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/asyncbanana      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1maxelb/making_postgres_42000x_slower_because_i_am/</guid>
      <pubDate>Sun, 27 Jul 2025 20:58:49 GMT</pubDate>
    </item>
    <item>
      <title>1分钟的verlet整合</title>
      <link>https://www.reddit.com/r/programming/comments/1maw72t/1_minute_of_verlet_integration/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我最近在我最喜欢的解决牛顿方程的方法之一上制作了一个视频。它可以在YouTube短裤上可用。让我首先从视频的补充材料开始，然后我们将看到...   &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/inst2f      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1maw72t/1_minute_of_verlet_integration/</guid>
      <pubDate>Sun, 27 Jul 2025 20:09:21 GMT</pubDate>
    </item>
    <item>
      <title>刚刚完成了CS少女“ Ai vs H.I.”黑客马拉松，这就是我想告诉我的少女</title>
      <link>https://www.reddit.com/r/programming/comments/1mavvj1/just_completed_the_cs_girlies_ai_vs_hi_hackathon/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  本月，我遇到了来自CS Girlies的帖子，我真正理想化了（跟随Michelle一年）。只是将其包裹起来，我必须说，这种经历提高了我的信心和编程技能。感谢我出色的团队在这次黑客马拉松中如此努力工作。   我希望您从这篇文章中收到什么：  作为CS的女人，我经常觉得我需要证明自己，但没有机会对我感到正确，否则我也许太犹豫了。但是请记住，事实并非如此。我害怕参加黑客马拉松，尽管我已经做了很长时间了。现在，当我看到女孩组织的一场黑客马拉松，为女孩们，我想放手！结果是迄今为止我一生中最好的决定。不和谐和一切都完美的导师。  我们构建的内容： 我的团队（由5个女孩组成）从事基于情绪的街机游戏的工作。我们确保使我们成为我们。添加了每个人的想法，它是可爱，表现力和完全“我们”的，并具有明确的少女般的感觉。   为什么要尝试它：  黑客马拉松是由女孩设计的，对于女孩而言，并且欢迎所有经验水平 - 无需以前的AI或黑客马拉松背景。您也应该尝试。 CS Girlies的工作非常艰难地创造了这样的空间，女孩可以在不需要以前的经验的情况下发光，学习和建造。这些曲目是初学者友好，创意的，并且强调了情感，直觉和真实性，而不是优化。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/train_lab_2401      &lt;a href =“ https://www.reddit.com/r/programming/comments/1mavvj1/just_completed_the_the_cs_girlies_ai_ai_ai_ai_ai_ai_hi_hackathon/]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mavvj1/just_completed_the_cs_girlies_ai_vs_hi_hackathon/</guid>
      <pubDate>Sun, 27 Jul 2025 19:56:20 GMT</pubDate>
    </item>
    <item>
      <title>使用Java工程：Digest＃57</title>
      <link>https://www.reddit.com/r/programming/comments/1mavu0o/engineering_with_java_digest_57/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;   𝐓𝐡𝐞𝐓𝐡𝐞𝐨𝐟𝐉𝐚𝐯𝐚！！ 𝐓𝐡𝐢𝐬𝐓𝐡𝐢𝐬𝐰𝐞𝐞𝐤𝐜𝐨𝐥𝐥𝐞𝐜𝐭𝐢𝐨𝐧：  ＆gt;自我修复微服务：使用Spring Boot和Kubernetes实施健康检查  ＆gt; 针对JDK的JEP 25：520：JFR方法计时＆amp;跟踪  ＆gt;  spring ai＆amp; redis   ＆gt; 偷看稳定值API   ＆gt;  Java 22至24：通过安全的方式拥抱新功能  ＆gt; 春季云流：事件驱动的体系结构 - 第1部分  ＆gt; 无证件的Java 16功能：文件终结评论  ＆gt;  java中的服务网格：安全微服务的istio和Linkerd集成   𝐂𝐡𝐞𝐜𝐤𝐂𝐡𝐞𝐜𝐤𝐨𝐮𝐭𝐧𝐞𝐰𝐬𝐥𝐞𝐭𝐭𝐞𝐫𝐚𝐧𝐝𝐟𝐨𝐫𝐰𝐞𝐞𝐤𝐥𝐲𝐰𝐞𝐞𝐤𝐥𝐲：   https://javabulletin.substack.com/p/engineering-with-java-with-java-digest-57   #newsletter   #springboot    &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32;  /u/Educational-Ad2036   [link] ＆＃32;   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mavu0o/engineering_with_java_digest_57/</guid>
      <pubDate>Sun, 27 Jul 2025 19:54:36 GMT</pubDate>
    </item>
    <item>
      <title>继承与构图</title>
      <link>https://www.reddit.com/r/programming/comments/1matz74/inheritance_vs_composition/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/bowbahdoe      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1matz74/inheritance_vs_composition/</guid>
      <pubDate>Sun, 27 Jul 2025 18:39:34 GMT</pubDate>
    </item>
    <item>
      <title>Spotify如何通过智能压缩节省了1800万美元（以及为什么大多数团队都弄错了）</title>
      <link>https://www.reddit.com/r/programming/comments/1masbln/how_spotify_saved_18m_with_smart_compression_and/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;   tl; dr：压缩不仅仅是“使文件较小” - 在黑色星期五期间，这是可以节省数百万美元或崩溃的建筑策略。  大开眼界的发现：   Spotify发现他们的带宽成本的40％来自未压缩的元数据同步。不是音乐文件用户实际想要的 - 使所有事物都可以正常工作的无形数据。  大多数团队做错了什么：    工程师：＆quot&#39;让我们对所有内容启用最大压缩！ *在所有端点上启用Brotli级别11**黑色星期五流量命中**网站死于CPU Overload** $ 200M的损失销售额*    这实际上发生在一家电子商务公司。经典的优化转变为实际。  apis：ZSTD（实时平衡） 结果：节省40％的带宽，零性能影响      Google的上下文意识到的方法：       记忆缓存：LZ4对于密度而无需速度损失的LZ4  处理85亿个每天100ms以下的查询     亚马逊的智能级别：     热数据优先级） 基于访问模式的自动移民    实际上有效的框架：       始于保守：zSTD级别3级别     CPU→LZ4，慢网络→Brotli   层策略：CDN与API vs存储的不同算法      关键的洞察力改变了我的想法：      压缩决策应在您的层面上做出了您的模式，您的模式是您所在的模式。 Mobile users might get aggressive compression to save bandwidth, desktop users get speed-optimized algorithms. Quick Wins You Can Implement Today:  Enable gzip on web assets (1-day task, 20-30% immediate savings) Compress API responses over 1KB Use LZ4 for log运输 不要压缩已经压缩的文件（似乎很明显，但...）   重要的数学：    良好的压缩：较少的数据=较低的数据=较低的成本=较低的成本=更快的转移 +更快的UX不良压缩：cpu pree +较高的响应 +较高的响应 +较高的响应 + pree + code        您在生产中看到了哪些压缩灾难？ 任何人使用基于系统条件的自适应压缩的人？ 您如何监控堆栈中的压缩效率？      均节省了一定的构造，而造成了一定的构造，而造成了一定的构造，而造成了一定的构造，而造成了造成的构成者， flag。  来源：此分析来自 systemdr 新闻通讯，我们分解了处理数十亿请求的公司的分布式系统模式。   &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/extra_ear_10      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1masbln/how_spotify_saved_18m_with_smart_compression_and/</guid>
      <pubDate>Sun, 27 Jul 2025 17:33:56 GMT</pubDate>
    </item>
    <item>
      <title>学习坚实的原则：单一责任原则</title>
      <link>https://www.reddit.com/r/programming/comments/1mas8pw/learn_solid_principles_single_responsibility/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  编写干净的代码对于任何希望其工作发光的开发人员都是必须的。这不仅仅是让您的程序运行；这是关于制作易于阅读，测试和更新的代码。做到这一点的最佳方法之一是遵循单个责任原则（SRP），这是实体原理的第一个。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/abhijith1203     [link]        [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mas8pw/learn_solid_principles_single_responsibility/</guid>
      <pubDate>Sun, 27 Jul 2025 17:30:48 GMT</pubDate>
    </item>
    <item>
      <title>Asyncio：一个具有太多尖角的库</title>
      <link>https://www.reddit.com/r/programming/comments/1maqxdp/asyncio_a_library_with_too_many_sharp_corners/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/pkkm       [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1maqxdp/asyncio_a_library_with_too_many_sharp_corners/</guid>
      <pubDate>Sun, 27 Jul 2025 16:39:25 GMT</pubDate>
    </item>
    </channel>
</rss>