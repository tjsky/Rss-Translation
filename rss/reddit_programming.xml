<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Fri, 11 Jul 2025 03:59:28 GMT</lastBuildDate>
    <item>
      <title>我建立了情感分析API</title>
      <link>https://www.reddit.com/r/programming/comments/1lwwcgv/i_built_a_sentiment_analysis_api/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我构建了一个情感分析API，在非常大的Twitter评论/帖子的数据集中训练API ...享受和lmk and lmk andy/yryy无论如何   &lt;！ -  sc_on-&gt; sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/low_bandicoot3507      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lwwcgv/i_built_a_sentiment_analysis_api/</guid>
      <pubDate>Fri, 11 Jul 2025 03:16:04 GMT</pubDate>
    </item>
    <item>
      <title>我建立了一个实时的语音助手，像chatgpt这样的交谈 - 从头开始</title>
      <link>https://www.reddit.com/r/programming/comments/1lwvpgi/i_built_a_realtime_voice_assistant_that_talks/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我最近构建了一个实时的语音助手，其工作方式像chatgpt，但具有实际的语音输入/输出。它聆听，检测到何时说话（无按钮），使用更快的旋转器转录，并立即使用GTTS或PYTTSX3进行回复。 我使用FastApi构建了后端，使用FastApi，使用了用于音频流的Websockets，并将所有内容集成到Next.js.js.js.js.js.它像您与实际AI交谈一样实时工作。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/azad_11014       [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lwvpgi/i_built_a_realtime_voice_assistant_that_talks/</guid>
      <pubDate>Fri, 11 Jul 2025 02:43:56 GMT</pubDate>
    </item>
    <item>
      <title>我在Rust中重新编写了手表命令</title>
      <link>https://www.reddit.com/r/programming/comments/1lwvcss/i_rewrote_the_watch_command_in_rust/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  嗨！我在Rust中重新编写了“ Watch”命令。在Windows中工作很棒。 使用``货物install Watch&#39;。 href =“ https://crates.io/crates/rwatch”&gt; https://crats.io/crates/rwatch    给它一个星星和下载！    &lt;！ -  sc_on-&gt; 32;提交由＆＃32; /u/u/u/human_umpire7073       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lwvcss/i_rewrote_the_watch_command_in_rust/</guid>
      <pubDate>Fri, 11 Jul 2025 02:26:48 GMT</pubDate>
    </item>
    <item>
      <title>测试的Claude 4 Opus vs Grok 4在15个生锈编码任务上</title>
      <link>https://www.reddit.com/r/programming/comments/1lwrj4g/tested_claude_4_opus_vs_grok_4_on_15_rust_coding/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  通过在30k行锈代码库上面临相同的编码挑战来运行这两个模型。数据是数据显示的：  错误检测： grok 4抓住了每一个比赛状况和僵局。 Opus错过了几个，包括Tokio :: RWLock死锁和螺纹下降，阻止了恐慌钩执行。  速度： grok平均9-15秒，每次请求13-24秒。       COUD： $ 4.50 vs $ 13每项任务。但是Grok的定价在128K代币后加倍。  速率限制： grok的限制是残酷的。测试期间不断撞墙。 Opus没有这样的问题。  工具调用：均以JSON模式为99％的精度。 XML降至83％（Opus）和78％（Grok）。  规则以下规则： opus遵循我的自定义编码规则。格罗克（Grok）在2/15任务中忽略了他们。  单次启示成功： 9/15 grok，opus。   底线： grok grok更快，更便宜，更便宜，更适合查找硬虫。但是速率限制令人发指，偶尔会忽略说明。 Opus较慢，价格较慢，但可预测且可靠。 预算中的bug狩猎：Grok。对于可靠性重要的生产工作流程：opus。 其他人在真实代码库上测试了这些功能吗？对其他语言的体验感到好奇。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/west-Chocaly2977     [link]   ＆＃32;  &lt;a href =“ https://www.reddit.com/r/programming/comments/1lwrj4g/tested_claude_4_4_4_opus_vs_grok_4_4_4_4_15_rust_coding/]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lwrj4g/tested_claude_4_opus_vs_grok_4_on_15_rust_coding/</guid>
      <pubDate>Thu, 10 Jul 2025 23:23:44 GMT</pubDate>
    </item>
    <item>
      <title>Rejigs：制作正则表达式人类可读</title>
      <link>https://www.reddit.com/r/programming/comments/1lwqn1r/rejigs_making_regular_expressions_humanreadable/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/usernamecanbenull    href =“ https://medium.com/@omarzawahry/rejigs-making-regular-expressions-human-erable-1fad37cb3eae”&gt; [link]   ＆＃32;   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lwqn1r/rejigs_making_regular_expressions_humanreadable/</guid>
      <pubDate>Thu, 10 Jul 2025 22:45:30 GMT</pubDate>
    </item>
    <item>
      <title>日常代码中的实际位技巧（认为）</title>
      <link>https://www.reddit.com/r/programming/comments/1lwq1ya/practical_bitwise_tricks_in_everyday_code/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  嘿， 回到我在pre-llm时代学习的时候，我读了很多文章（以及诸如hacker&#39;s Exply的书籍），里面充满了数十个巧妙的刻薄技巧。尽管他们很有趣且引人入胜（并非真的），但我很快意识到，在“ JSON-MOVING”中。工作，大多数人并没有真正出现，尤其是当可读性和可维护性比挤压CPU周期更重要的是 。但是，其中一些技巧偶尔出现在我使用或探索的公共库的性能 - 关键部分中，甚至在我的代码中，甚至在用例中有意义（例如紧密循环中）。因此，而不是为您提供“前100名必须知道的位置骇客”。列表，我整理了一个简短而实用的列表，重点是我多年来发现的有用的东西：  使用比特偏移（一种可说的用例）乘以两次，但它可以深入了解小数的偏移值如何影响小数的值） 使用位和oor，以及XOR   使用二进制标志的示例在C＃中，但是这些概念很容易在大多数语言中应用。 如果您只是遇到 n＆amp; （M —1）和思想，“这里发生了什么？”这可能会有所帮助。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32;  /u/axel-user   [link]   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lwq1ya/practical_bitwise_tricks_in_everyday_code/</guid>
      <pubDate>Thu, 10 Jul 2025 22:20:43 GMT</pubDate>
    </item>
    <item>
      <title>我使用内置BDD测试创建了一种编程语言。寻找反馈和贡献者！</title>
      <link>https://www.reddit.com/r/programming/comments/1lwpvas/i_created_a_programming_language_in_go_with/</link>
      <description><![CDATA[Hey, r/golang! For the past few months, I&#39;ve been pouring my free time into a passion project: R2Lang, a new, dynamic programming language written entirely in Go. 我的主要目标是创建一种语言，其中测试不仅是图书馆或事后的想法，而且是语法的核心，一流的公民。结果是一种简单的，类似于JavaScript的语言，具有本机BDD测试框架。   tl; dr：我在GO中构建了类似JavaScript的脚本语言。它的主要功能是本机BDD测试系统（ testCase {给定/何时/then} ）。我正在寻找有助于其成长的反馈，想法和合作者。  github repo：  https：&gt; r2lang？ 这是一种动态，解释的语言，旨在脚本，测试和构建简单的Web API。将其视为JavaScript的简单性和GO并发模型的混合物。  关键特征：        &lt;&gt; 内置BDD测试：这是核心功能。您可以使用干净的给定/时/何时结构直接在代码中编写测试，而无需任何外部框架。    simple＆amp;熟悉的语法：，如果您知道JavaScript，您将在几分钟内写下R2lang。    &lt;易于并发：它通过简单的 r2（） function go goroutine go goroutine。    网络准备就绪：包括一个内置 http 库，用于创建网络服务器和REST API，受Express.js。  的启发，这是BDD Syntax在作用中看起来像是在作用：      `  //测试案例本身TestCase“验证添加功能是否正常工作” {给定的func（）{print（;但是，一个内置的关键字，如果（结果！= 15）{throw;断言失败：预期15，got; +结果}打印（“验证成功！”）返回测试传递。 }   }````  💖如何帮助您如何帮助 该语言功能很正常，我已经写了一门完整的6模块课程来进行记录。但是，这仍然是一个年轻的项目，有很多改进的空间。我很想获得一些合作，将其提升到一个新的水平。 我正在寻找各种帮助：     go Developers：来帮助改善核心解释器。绩效（字节码VM，JIT），内存管理和实施新功能有很大的机会和项目的整体方向。你爱什么？您讨厌什么？  测试人员：我需要人们打破它！在中写一些复杂的脚本，查找边缘案例并报告错误到目前为止一直是一次独奏之旅，我对将其变成社区驱动的项目的可能性感到非常兴奋。 查看 href =“ https://github.com/arturoeanton/go-r2lang/blob/main/main/docs/en/readme.md”&gt;  完整文档 和essead tracker。 感谢您的外观！ Github上的任何反馈，问题或星星都将是惊人的。让我知道您的想法！  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/resolutionsmooth5259      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lwpvas/i_created_a_programming_language_in_go_with/</guid>
      <pubDate>Thu, 10 Jul 2025 22:13:07 GMT</pubDate>
    </item>
    <item>
      <title>C和Python中的整流流扩散模型</title>
      <link>https://www.reddit.com/r/programming/comments/1lwnpry/rectified_flow_diffusion_models_in_c_and_python/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/databaebee      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lwnpry/rectified_flow_diffusion_models_in_c_and_python/</guid>
      <pubDate>Thu, 10 Jul 2025 20:44:52 GMT</pubDate>
    </item>
    <item>
      <title>Go Interals：通过在GO中追踪Syscall来弄清多少？</title>
      <link>https://www.reddit.com/r/programming/comments/1lwn9pv/go_internals_how_much_can_we_figure_by_tracing_a/</link>
      <description><![CDATA[＆＃32;提交由＆＃32;  /u/jarvuyirttehc   [link] ＆＃32;   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lwn9pv/go_internals_how_much_can_we_figure_by_tracing_a/</guid>
      <pubDate>Thu, 10 Jul 2025 20:27:19 GMT</pubDate>
    </item>
    <item>
      <title>曾经看过MCP服务器，想知道为什么我们正在运行整个包装器只是为了通过JSON？因此，我完全取消了包装器，让代理商直接调用端点</title>
      <link>https://www.reddit.com/r/programming/comments/1lwmqd5/ever_looked_at_an_mcp_server_and_wondered_why/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  所以，我构建了一个协议，让AIS（和人类，如果您勇敢）调用您描述的任何工具 - 在 plain json 中 - 处于本地端点。 ，它称为 utcp（universal tool tool proncest protcess proncest protcess protcess protcess protcess protcess protcess）已经有一百万个规格。但是，这一发现后，这是一个避免的东西 - 没有包装税，没有额外的服务器，只是一个很小的JSON清单，您的经纪人正在谈论HTTP，GRPC，Websocket，CLI，任何东西，      项目都在这里启动： href =“ https://github.com/universal-tool-calling-protocol/utcp-specification”&gt; https://github.com/universal-tool-calling-protocol/      发行href =“ https://github.com/universal-tool-calling-protocol/utcp-specification/releases”&gt; https://github.com/universal-calling-calling-parotocy/utcp-specification/releases/releases/releases  href =“ https://www.utcp.io/#quick-start%5d（）”&gt; https://wwwww.utcp.io/#quick-start]（）   ，如果您和您的烤肉也许是You，如果您的爱情和您的烤架也可能会觉得 you，如果您也很有趣） yah   &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/juanviera23      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lwmqd5/ever_looked_at_an_mcp_server_and_wondered_why/</guid>
      <pubDate>Thu, 10 Jul 2025 20:06:38 GMT</pubDate>
    </item>
    <item>
      <title>HTMX Creator对鲍勃·马丁（Bob Martin）的干净代码进行了艰难的通行证</title>
      <link>https://www.reddit.com/r/programming/comments/1lwmja5/htmx_creator_takes_a_hard_pass_on_bob_martins/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/jerodsanto       [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lwmja5/htmx_creator_takes_a_hard_pass_on_bob_martins/</guid>
      <pubDate>Thu, 10 Jul 2025 19:59:07 GMT</pubDate>
    </item>
    <item>
      <title>是什么使代码美丽</title>
      <link>https://www.reddit.com/r/programming/comments/1lwmcj1/what_makes_code_beautiful/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/teivah      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lwmcj1/what_makes_code_beautiful/</guid>
      <pubDate>Thu, 10 Jul 2025 19:51:38 GMT</pubDate>
    </item>
    <item>
      <title>下一波！</title>
      <link>https://www.reddit.com/r/programming/comments/1lwmbm8/the_next_wave/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/dumindunuwan      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lwmbm8/the_next_wave/</guid>
      <pubDate>Thu, 10 Jul 2025 19:50:40 GMT</pubDate>
    </item>
    <item>
      <title>测量AI对经验丰富的开源开发人员生产率的影响</title>
      <link>https://www.reddit.com/r/programming/comments/1lwk6nj/measuring_the_impact_of_ai_on_experienced/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/ketralnis      ＆＃32;   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lwk6nj/measuring_the_impact_of_ai_on_experienced/</guid>
      <pubDate>Thu, 10 Jul 2025 18:25:50 GMT</pubDate>
    </item>
    <item>
      <title>FOKS：联合开放式密钥服务</title>
      <link>https://www.reddit.com/r/programming/comments/1lwk62j/foks_the_federated_open_key_service/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/ketralnis      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lwk62j/foks_the_federated_open_key_service/</guid>
      <pubDate>Thu, 10 Jul 2025 18:25:10 GMT</pubDate>
    </item>
    </channel>
</rss>