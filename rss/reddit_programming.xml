<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Thu, 10 Jul 2025 15:19:22 GMT</lastBuildDate>
    <item>
      <title>Kawa :: ECS  -  C ++ 20实体组件系统（ECS） - 寻找反馈和测试人员！</title>
      <link>https://www.reddit.com/r/programming/comments/1lwefyp/kawaecs_c20_entitycomponent_system_ecs_looking/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我一直在制作轻巧的，仅标头的ECS，称为kawa :: ecs，其旨在快速，最小且易于使用现代C ++ 20功能。如果您要构建游戏，仿真或AI系统，并且想要一个简单而功能强大的ECS主干，那么这可能值得检查！ 快速示例：     #include #include＆quort; #include＆lt; string＆gt;使用名称空间kawa :: ecs;结构位置{float x，y; };结构速度{float x，y; }; struct name {std :: string name; }; int main（）{注册reg（512）; entity_id e = reg.entity（）; reg.emplace＆lt;（e，0.f，0.f）; reg.emplace＆lt; velocity＆gt;（e，1.f，2.f）; reg.emplace＆lt; name＆gt;（e，; //简单查询reg.query（[]（位置＆amp; p，name* n）{std :: cout＆lt;＆lt;（n？n？n？n-＆gt; name：＆quot; float delta_time = 0.16; //并行查询（多线程）reg.query_par（[]（float dt，position＆amp; p，velocity＆amp; v）{p.x += v.x * dt; p.y += p.y += v.y * dt;}，delta_time）; }   非常感谢您检查一下！我很高兴听到您的想法并帮助使Kawa :: Ecs更好。   &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/no_safe6015       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lwefyp/kawaecs_c20_entitycomponent_system_ecs_looking/</guid>
      <pubDate>Thu, 10 Jul 2025 14:40:29 GMT</pubDate>
    </item>
    <item>
      <title>大多数抱怨AI的开发人员只是使用错误</title>
      <link>https://www.reddit.com/r/programming/comments/1lwdlja/most_devs_complaining_about_ai_are_just_using_it/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我看到了一波在线浪潮，抱怨AI会减慢它们或产生弱输出。他们声称AI是“不好的”或“无用的”，但是当您要求示例时，他们的提示始终是业余水平，零护栏，零上下文工程。他们正在处理高级AI模型，例如廉价的搜索引擎，并抱怨结果何时与他们的懒惰输入相匹配。 这是一个技能问题，简单而简单。如果您要收到垃圾输出，请首先看镜像，您的提示策略（或缺乏）几乎可以肯定是问题。 清楚地设置上下文，明确地建立护栏，并学习基本的提示工程。如果您不这样做，那么您的问题不是AI，而是您自己的技术差。 让我们停止将AI归咎于用户无能。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/zapflows      [commist]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lwdlja/most_devs_complaining_about_ai_are_just_using_it/</guid>
      <pubDate>Thu, 10 Jul 2025 14:05:33 GMT</pubDate>
    </item>
    <item>
      <title>过去两年中最受欢迎的技术堆栈是什么？ （全球调查）</title>
      <link>https://www.reddit.com/r/programming/comments/1lwczan/whats_the_most_popular_tech_stack_in_the_past_two/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/crafty_impsression_37       [注释]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lwczan/whats_the_most_popular_tech_stack_in_the_past_two/</guid>
      <pubDate>Thu, 10 Jul 2025 13:39:25 GMT</pubDate>
    </item>
    <item>
      <title>Rust-Geo：地球的依赖选择/下拉选项→国家/地区/地区→城镇</title>
      <link>https://www.reddit.com/r/programming/comments/1lwcu5n/rustgeo_dependent_selectdropdown_options_for/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/snoobeans7860       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lwcu5n/rustgeo_dependent_selectdropdown_options_for/</guid>
      <pubDate>Thu, 10 Jul 2025 13:33:01 GMT</pubDate>
    </item>
    <item>
      <title>我们停止依靠Bloom过滤器，现在对我们的Clickhouse主键进行资源指纹分类。它将我们的日志查询扫描切成块的0.85％。</title>
      <link>https://www.reddit.com/r/programming/comments/1lwcrw6/we_stopped_relying_on_bloom_filters_and_now_sort/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  嘿，我和我的团队一直在进行性能优化，并希望分享结果。我们通过重新组织日志存储在Clickhouse中。 ，而不是依靠bloom滤波器跳过索引，我们设法将几乎所有数据块扫描到小于1％，从而将日志扫描到不到1％，我们可以通过群集 +名称 + pod + pod等的订单来生成确定性的“资源指纹”（现在），以确定性的“资源指纹”（现在）。 钥匙。这包装从同一pod/服务连续地进行登录，让Clickhouse稀疏的初级钥匙索引完全跳过了无关的数据块。 结果：单个命名空间上的过滤器现在仅读取26,135个块中的222个块（0.85％）（0.85％）（0.85％），slashing I/o和潜伏期。我们目前正在使用Clickhouse的新型本机JSON列类型，该类型应该让我们消除昂贵的数据实现步骤并大大提高性能。 这种方法对我们有效，但我想听到其他人的来信。是否在这样的高心电指纹上进行排序，是一种常见的模式，还是有更有效的方法来实现我们可能错过的该数据局部性？  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/InventThought2794      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lwcrw6/we_stopped_relying_on_bloom_filters_and_now_sort/</guid>
      <pubDate>Thu, 10 Jul 2025 13:30:09 GMT</pubDate>
    </item>
    <item>
      <title>不要将编程与现实世界进行比较</title>
      <link>https://www.reddit.com/r/programming/comments/1lwcqis/dont_compare_programming_to_the_real_world/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我一直在考虑一段时间的主题  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/everdimension     link&gt; link&gt; [link]   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lwcqis/dont_compare_programming_to_the_real_world/</guid>
      <pubDate>Thu, 10 Jul 2025 13:28:26 GMT</pubDate>
    </item>
    <item>
      <title>当杰克·多尔西（Jack Dorsey）推出bitchat时，我得到了déjàvu - 这就是为什么</title>
      <link>https://www.reddit.com/r/programming/comments/1lwbkos/when_jack_dorsey_launched_bitchat_i_got_déjà_vu/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/ramesh-choudhary     &lt;a href =“https://www.reddit.com/r/programming/comments/1lwbkos/1lwbkos/when_jack_jack_dorsey_launched_bitchat_i_got_got_got_déjà_vu/”]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lwbkos/when_jack_dorsey_launched_bitchat_i_got_déjà_vu/</guid>
      <pubDate>Thu, 10 Jul 2025 12:34:13 GMT</pubDate>
    </item>
    <item>
      <title>平台工程不会为您节省</title>
      <link>https://www.reddit.com/r/programming/comments/1lwbgd8/platform_engineering_wont_save_you/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/aviator_co     link link&gt; [link]&gt; [32]   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lwbgd8/platform_engineering_wont_save_you/</guid>
      <pubDate>Thu, 10 Jul 2025 12:28:25 GMT</pubDate>
    </item>
    <item>
      <title>香草JavaScript：普通JS，JavaScript框架以及何时使用它们之间的区别</title>
      <link>https://www.reddit.com/r/programming/comments/1lwa6i0/vanilla_javascript_the_difference_between_plain/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  您见过的最好的解释  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/rikkiviki     ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lwa6i0/vanilla_javascript_the_difference_between_plain/</guid>
      <pubDate>Thu, 10 Jul 2025 11:21:05 GMT</pubDate>
    </item>
    <item>
      <title>微额外建筑手册</title>
      <link>https://www.reddit.com/r/programming/comments/1lw8jph/the_microfrontend_architecture_handbook/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/woltan_4     [link]   ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lw8jph/the_microfrontend_architecture_handbook/</guid>
      <pubDate>Thu, 10 Jul 2025 09:41:42 GMT</pubDate>
    </item>
    <item>
      <title>带来颗粒状的更新反应</title>
      <link>https://www.reddit.com/r/programming/comments/1lw8gx9/bringing_granular_updates_to_react_the_clojure_way/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/roman01la       [注释]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lw8gx9/bringing_granular_updates_to_react_the_clojure_way/</guid>
      <pubDate>Thu, 10 Jul 2025 09:36:43 GMT</pubDate>
    </item>
    <item>
      <title>接受率的上升和迫在眉睫的跌倒</title>
      <link>https://www.reddit.com/r/programming/comments/1lw84z1/the_rise_and_looming_fall_of_acceptance_rate/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  关于接受率的想法是测量编码助手的方法？  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32;  /u/scarey102   [link]   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lw84z1/the_rise_and_looming_fall_of_acceptance_rate/</guid>
      <pubDate>Thu, 10 Jul 2025 09:14:10 GMT</pubDate>
    </item>
    <item>
      <title>反应是疯狂的</title>
      <link>https://www.reddit.com/r/programming/comments/1lw60jn/react_is_insane/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/也许 - 莫纳德      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lw60jn/react_is_insane/</guid>
      <pubDate>Thu, 10 Jul 2025 06:49:20 GMT</pubDate>
    </item>
    <item>
      <title>您曾经看过一个JSON文件并以为“这应该运行”？现在这样做了。</title>
      <link>https://www.reddit.com/r/programming/comments/1lw5goh/you_ever_looked_at_a_json_file_and_thought_this/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  所以，我构建了一种编程语言，其中代码写在JSON中。 它称为JPL（JSON编程语言）。 是的，我知道。完全不必要。但也很有趣。是的，这是用Java编写的绑定，但它运行下载一个EXE。  如果您想弄乱它，请在这里进行：   https://github.com.com/github.com/github.com/w1ldn16h7/jpl  href =“ https://github.com/w1ldn1h7/jpl/releases”&gt; https://github.com/w1ldn16h7/jpl/releases     示例： https：//raw.githubusercercontent.com/w1ldn16H7/ href =“ https://raw.githubusercontent.com/w1ldn1h7/jpl/master/images/images/carbon%20(1”&gt; https：//raw.githubusercorcent.com/w1ldn16h7/jpl/master/master/master/imagers/images/images/images/images/carbon/carbon/carbon/carbon/carbon/carbon-20（1）思想，笑话，烤或公关。另外，如果使用github。提交由＆＃32; /u/u/i_4m_knight       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lw5goh/you_ever_looked_at_a_json_file_and_thought_this/</guid>
      <pubDate>Thu, 10 Jul 2025 06:14:22 GMT</pubDate>
    </item>
    <item>
      <title>好奇心驱动的加密：带有实时可视化的Collat​​z猜想启发的块密码</title>
      <link>https://www.reddit.com/r/programming/comments/1lw4xpg/curiositydriven_encryption_a_collatz/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我很高兴地宣布释放collat​​z混沌密码，这是一种受collat​​z猜想启发的实验加密算法，并由混乱的理论和信号处理中的原理启发。 iteration mechanisms to enhance unpredictability Non-linear key transformations to increase cryptographic strength A synthesis of classical 3x+1 logic with novel signal spiral dynamics  -The resulting ciphertext exhibits strong avalanche characteristics and complex diffusion behavior. 除了核心加密实现外，存储库还包括一套可视化工具，旨在说明位于加密循环的比特级扩散和波形变换。这些工具为密码的内部行为和结构提供了宝贵的见解。 这项工作旨在作为数学和密码学交集的理论和教育探索。不建议用于生产环境或关键安全应用程序。您的反馈和协作将是最欢迎的。 在此处访问完整的项目和文档： - &gt;＆＃32;提交由＆＃32; /u/u/aptered_sentience       [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lw4xpg/curiositydriven_encryption_a_collatz/</guid>
      <pubDate>Thu, 10 Jul 2025 05:41:00 GMT</pubDate>
    </item>
    </channel>
</rss>