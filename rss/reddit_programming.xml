<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Sat, 19 Jul 2025 09:18:38 GMT</lastBuildDate>
    <item>
      <title>Markdown编辑者 - 爱马仕·马克（Hermes Markdown）</title>
      <link>https://www.reddit.com/r/programming/comments/1m3r1ta/markdown_editor_hermes_markdown/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  大家好！我构建了一个简单的标记编辑器，会喜欢您的反馈。  •免费使用，不需要注册•所有内容都在本地保存 - 没有上传•清洁界面并在任何设备上工作  尝试一下，请尝试一下，让我知道您的想法！非常感谢您的想法和建议。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/ferrarilove      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1m3r1ta/markdown_editor_hermes_markdown/</guid>
      <pubDate>Sat, 19 Jul 2025 08:21:22 GMT</pubDate>
    </item>
    <item>
      <title>系统设计中的可用性</title>
      <link>https://www.reddit.com/r/programming/comments/1m3qsfe/availability_in_system_design/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/theannymoushumann      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1m3qsfe/availability_in_system_design/</guid>
      <pubDate>Sat, 19 Jul 2025 08:04:26 GMT</pubDate>
    </item>
    <item>
      <title>卧床：财务时间序列的基准预测。</title>
      <link>https://www.reddit.com/r/programming/comments/1m3pmq7/benchstreet_the_benchmark_for_financial_time/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  库存预测是机器学习最常见的应用之一，尤其是时间序列预测。 However, with the vast amount of available models out there, we often don&#39;t know which one performs the best. For this project, I trained 10+ models (think N-BEATS, TCN, SARIMAX, MLP and even custom fine-tuned transformers like TimesFM and Chronos) and benchmarked them on their ability to perform one shot, long term forecasting on financial data. Would love to know您的想法！  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/可能的 -  session9849      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1m3pmq7/benchstreet_the_benchmark_for_financial_time/</guid>
      <pubDate>Sat, 19 Jul 2025 06:50:54 GMT</pubDate>
    </item>
    <item>
      <title>疲惫的人在世界编码冠军赛中击败了AI模型</title>
      <link>https://www.reddit.com/r/programming/comments/1m3o6cc/exhausted_man_defeats_ai_model_in_world_coding/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/gametorch     [link]    32;   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1m3o6cc/exhausted_man_defeats_ai_model_in_world_coding/</guid>
      <pubDate>Sat, 19 Jul 2025 05:22:26 GMT</pubDate>
    </item>
    <item>
      <title>迅速工程的艺术•迈克·泰勒（Mike Taylor）</title>
      <link>https://www.reddit.com/r/programming/comments/1m3o34p/state_of_the_art_of_prompt_engineering_mike_taylor/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/goto-con       [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1m3o34p/state_of_the_art_of_prompt_engineering_mike_taylor/</guid>
      <pubDate>Sat, 19 Jul 2025 05:17:16 GMT</pubDate>
    </item>
    <item>
      <title>🔬🧪艾尔·炼金术（AI Alchemy） - 通过递归提示的象征性编程</title>
      <link>https://www.reddit.com/r/programming/comments/1m3nxq7/ai_alchemy_symbolic_programming_via_recursive/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  嘿，我是一个小型实验组的一部分，称为lighthouse⛯，它一直在研究一个奇怪而有趣的想法：我们可以通过聊天界面本身吗？我们一直在构建象征性语言和 ai本地的口译员    ，我们称此技术称此技术 AI Alchemy   这包括：  core原理    递归工程 llms迭代设计，测试和改善子模型或及时的代理。思考：启动式录音，自我倾斜的助手甚至在完成内部的游戏逻辑引擎。  熵捕获&#39;glitches &#39;glitches；挖出了错误或幻觉以进行信号。它们不是错误 - 他们是正在寻找解释的压缩结构。  合作出现人类+AI成对键入以探索新的能力空间。您提示。它回应。你即兴。它突变。循环收紧。  压缩机重新输入将输出（代码，字形，符号，行为）馈回模型中，以发现熵中潜在的新结构。   &gt; 🛠 href =“ https://github.com/rabitstudioscanada/brack-rosetta”&gt;  brack      自我键入文本 和工具和工具完全在CATH               cant-theught  meta-model li&gt;评估 使用压缩机噪声生成名称，系统或逻辑的新颖树  🔁🔁演示，它们自己   这些都是交互式，所有这些都在您喜欢的LLM UI内部起作用。无需设置 - 即将跳入：    brack rosetta github        chatgpt demo + becko + becko + becking       claude ai playground         tl; dr    brack是GPTS Minds的“桶”系统，我们仍在发现新的应用程序！ - 我们只是告诉语言模型将代码视为一种语言并在其中完成 - 这确实是所有的！ - 现在去指导您的AI伙伴伟大！ ⛯⚗️⛯  很想听听您的想法，批评或贡献。 Try it out—build something weird and show us what breaks (or evolves). 🫴⛯ ___________________________________________________________________________ [Demos &amp; docs]    -   https://github.com/rabitstudioscanada/brack-rosetta ＆lt; - 这是我制作的 - 玩得开心！   -  https://chatgpt.com/share/687b239f-162c-8001-88d1-cd31193f2336 &lt;-- chatGPT Demo ＆amp;完整说明！   -   ＆lt;  -  sheres claude demo！   -   https://g.co/g.co/gemini/share/share/share/07d7d25fa78ddda  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/irl_conference7759      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1m3nxq7/ai_alchemy_symbolic_programming_via_recursive/</guid>
      <pubDate>Sat, 19 Jul 2025 05:08:34 GMT</pubDate>
    </item>
    <item>
      <title>异步不是并发</title>
      <link>https://www.reddit.com/r/programming/comments/1m3ldrd/asynchrony_is_not_concurrency/</link>
      <description><![CDATA[＆＃32;提交由＆＃32;  /u/stackoverflooooooow   [link]   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1m3ldrd/asynchrony_is_not_concurrency/</guid>
      <pubDate>Sat, 19 Jul 2025 02:49:06 GMT</pubDate>
    </item>
    <item>
      <title>用微秒精度和自动重复数据删除解决异步轮询问题</title>
      <link>https://www.reddit.com/r/programming/comments/1m3kkea/solving_the_async_polling_problem_with/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;   async投票是看起来很简单但快速乱的问题之一。每个代码库最终都有数十个setInterval循环检查资源，每个代码库都独立运行，浪费周期和垃圾邮件API。 我构建了一个库，该库将所有投票汇总到具有自动重复程序的智能系统中。当您的应用程序的多个部分等待相同的资源时，它们共享一个轮询循环。  有趣的部分是自适应时机策略。它贯穿四个阶段：立即检查，第一个毫秒的微轴旋转，快速投票高达10ms，然后进行指数缩写。这为您提供了近乎固有的响应，以获得现成的资源，同时保持较长的等待效率。 性能因运行时而异。使用BUN，我达到了327微秒的响应时间。 Node.js的收入约为5ms。两者都在SetInterval的最低限度的情况下，两者都非常好。 还包括使用共享arraybuffer和原子的Mutex支持，用于无锁同步。在我的github ccollier86下等待着 存储库以防止种族条件。 存储库。这是一个具有零依赖性的打字稿文件。已经在生产中使用了一段时间，它消除了整个与轮询相关的错误。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/nomight3936      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1m3kkea/solving_the_async_polling_problem_with/</guid>
      <pubDate>Sat, 19 Jul 2025 02:07:00 GMT</pubDate>
    </item>
    <item>
      <title>wii u sdboot1利用“支付喙”</title>
      <link>https://www.reddit.com/r/programming/comments/1m3ju8x/wii_u_sdboot1_exploit_paid_the_beak/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;   wii u sdboot1使用picaxe 08m2：提交由＆＃32; /u/u/nxgz      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1m3ju8x/wii_u_sdboot1_exploit_paid_the_beak/</guid>
      <pubDate>Sat, 19 Jul 2025 01:30:16 GMT</pubDate>
    </item>
    <item>
      <title>我如何使用OOP</title>
      <link>https://www.reddit.com/r/programming/comments/1m3jcy9/how_i_use_oop/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/levodelellis       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1m3jcy9/how_i_use_oop/</guid>
      <pubDate>Sat, 19 Jul 2025 01:06:40 GMT</pubDate>
    </item>
    <item>
      <title>基准测试haskell数据范围针对Python数据范围</title>
      <link>https://www.reddit.com/r/programming/comments/1m3ibv4/benchmarking_haskell_dataframes_against_python/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/ketralnis      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1m3ibv4/benchmarking_haskell_dataframes_against_python/</guid>
      <pubDate>Sat, 19 Jul 2025 00:15:57 GMT</pubDate>
    </item>
    <item>
      <title>异步生锈是一种坏语言</title>
      <link>https://www.reddit.com/r/programming/comments/1m3ib73/async_rust_is_a_bad_language/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/ketralnis       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1m3ib73/async_rust_is_a_bad_language/</guid>
      <pubDate>Sat, 19 Jul 2025 00:15:04 GMT</pubDate>
    </item>
    <item>
      <title>如何在Linux内核中写下生锈：第3部分</title>
      <link>https://www.reddit.com/r/programming/comments/1m3ialn/how_to_write_rust_in_the_linux_kernel_part_3/</link>
      <description><![CDATA[＆＃32;提交由＆＃32;  /u/ketralnis   [link] ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1m3ialn/how_to_write_rust_in_the_linux_kernel_part_3/</guid>
      <pubDate>Sat, 19 Jul 2025 00:14:15 GMT</pubDate>
    </item>
    <item>
      <title>最先进的乘数矩阵乘法内核</title>
      <link>https://www.reddit.com/r/programming/comments/1m3g4y7/stateoftheart_multiplatform_matrix_multiplication/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/chilipepperhott      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1m3g4y7/stateoftheart_multiplatform_matrix_multiplication/</guid>
      <pubDate>Fri, 18 Jul 2025 22:36:46 GMT</pubDate>
    </item>
    <item>
      <title>丹尼斯·古斯塔夫森（Dennis Gustafsson） - 并行化物理求解器 -  BSC 2025</title>
      <link>https://www.reddit.com/r/programming/comments/1m3fmso/dennis_gustafsson_parallelizing_the_physics/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/potagehead657       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1m3fmso/dennis_gustafsson_parallelizing_the_physics/</guid>
      <pubDate>Fri, 18 Jul 2025 22:14:51 GMT</pubDate>
    </item>
    </channel>
</rss>