<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Thu, 11 Sep 2025 12:31:41 GMT</lastBuildDate>
    <item>
      <title>哈希排序通常比哈希表1快。</title>
      <link>https://www.reddit.com/r/programming/comments/1ne6jtd/hashed_sorting_is_typically_faster_than_hash/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/jadeluxe       [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ne6jtd/hashed_sorting_is_typically_faster_than_hash/</guid>
      <pubDate>Thu, 11 Sep 2025 11:42:47 GMT</pubDate>
    </item>
    <item>
      <title>VibeCoding是泡沫吗？</title>
      <link>https://www.reddit.com/r/programming/comments/1ne5se3/is_vibecoding_a_bubble/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  今天看到了一个Twitter线程，其中一堆固体创始人正在对此进行辩论。有趣的时机，今天是我自己的公共旅程的第一天。 无法编码以挽救我的生命。但是我仍在构建一个免费的会议时间表工具，例如Calendly Pro…但是，在类固醇（附加链接，检查一下） 我知道Vibe编码不是某种技术，它是一个概念，没有这样的“突发”，但是… 我是什么 you 你是什么？提交由＆＃32; /u/u/no_passion6608       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ne5se3/is_vibecoding_a_bubble/</guid>
      <pubDate>Thu, 11 Sep 2025 11:01:58 GMT</pubDate>
    </item>
    <item>
      <title>Eclipse 4.37发布</title>
      <link>https://www.reddit.com/r/programming/comments/1ne4hb2/eclipse_437_released/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/bluegoliath      [commist]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ne4hb2/eclipse_437_released/</guid>
      <pubDate>Thu, 11 Sep 2025 09:43:53 GMT</pubDate>
    </item>
    <item>
      <title>API Live Sync＃7：Import-Export</title>
      <link>https://www.reddit.com/r/programming/comments/1ne48oh/api_live_sync_7_importexport/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  在我们的以前的帖子我们live api n laid apnch in live apnch grient 设置向导和实时状态指标。最后，我们建立了一个可以自动检测变化和更新集合的工作系统。 ，但是现实世界的开发比我们最初假定的实现更加混乱。团队共同努力，框架有……嗯……特殊性，开发人员需要知道事情发生变化时发生了什么。今天，我们正在研究从“功能”转化我们的实时同步系统的高级功能。 to; quord&#39;  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/evilhighlord      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ne48oh/api_live_sync_7_importexport/</guid>
      <pubDate>Thu, 11 Sep 2025 09:27:54 GMT</pubDate>
    </item>
    <item>
      <title>跨平台GRPC测试工具</title>
      <link>https://www.reddit.com/r/programming/comments/1ne3qww/crossplatform_grpc_test_tool/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;   ui    骑手提供了开发avaloniaui应用程序的最佳支持。使用编译曲线，很容易在视图和视图模式之间导航。只需将光标放在绑定上，点击F12（转到定义），它会自动导航到相应的ViewModel类/属性 有一个实时预览编辑器，但我几乎没有使用它，这确实很方便。我宁愿只输入XAML标记。 我认为热门填充会更有用  avaloniaui基本上是wpf ++。它只是有效（TM）。 MacOS和Linux拥有一个单一的代码库，可以节省大量时。可悲的是，我认为Microsoft将始终优先考虑C＃。  f＃代码看起来很干净。另一方面，C＃代码具有很多视觉噪音 - 许多大多数是空的线，其中只包含一个开口} 或关闭Curly Brace } 。  f＃f＃f＃nuding f poss f poss f poss fub fub fus。将逻辑保持在您的脑海很容易。当您需要回到几个月前编写的一些代码时，这确实很有用。与C＃相比，您需要了解整个班级 命名约定的差异有点令人讨厌。 c＃是帕斯卡壳，而f＃则使用骆驼。最终习惯了混合的命名约定，但它在开始时会分散注意力。  f＃现在支持 task {} 表达式，并用C＃删除了使用 Tasks 的C＃。以前，f＃仅具有 async {} ，因此您必须来回转换为任务。由于来回转换而导致的性能也轻微打击  其他想法  我尝试与MVVM一起实现垂直切片架构A.K.a特征文件夹。我想我可能把这个搞砸了。我在REST API上使用了功能文件夹，这真的很好。最终的代码更加有条理，易于浏览和理解。我想在桌面应用程序上拥有同样的东西，因此尝试。如果有人知道一个垂直切片的桌面项目，请告诉我。 我正在使用32GB统一内存的M4 MacMini（基本模型）开发。这个小东西很棒。构建真的很快。我通常会打开这些应用程序，但是MacMini仍然像Pro一样运行。粉丝永远不会踢过。  firefox       ScreenShots 提交由＆＃32; /u/u/namigop      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ne3qww/crossplatform_grpc_test_tool/</guid>
      <pubDate>Thu, 11 Sep 2025 08:55:27 GMT</pubDate>
    </item>
    <item>
      <title>Pohlig-Hellman离散对数</title>
      <link>https://www.reddit.com/r/programming/comments/1ne1zxy/pohlighellman_discrete_logarithms/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/databaebee      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ne1zxy/pohlighellman_discrete_logarithms/</guid>
      <pubDate>Thu, 11 Sep 2025 06:59:37 GMT</pubDate>
    </item>
    <item>
      <title>当更多线程使情况变得更糟时</title>
      <link>https://www.reddit.com/r/programming/comments/1nduzwm/when_more_threads_make_things_worse/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/ordepdev29     [link]&gt; [link]   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nduzwm/when_more_threads_make_things_worse/</guid>
      <pubDate>Thu, 11 Sep 2025 00:35:22 GMT</pubDate>
    </item>
    <item>
      <title>AI对工程团队的影响</title>
      <link>https://www.reddit.com/r/programming/comments/1nduidd/the_impact_of_ai_on_engineering_teams/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/u/gregorojstersek      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nduidd/the_impact_of_ai_on_engineering_teams/</guid>
      <pubDate>Thu, 11 Sep 2025 00:11:37 GMT</pubDate>
    </item>
    <item>
      <title>CXL 3.0：重新定义内存内存数据库的零拷贝内存</title>
      <link>https://www.reddit.com/r/programming/comments/1ndt956/cxl_30_redefining_zerocopy_memory_for_inmemory/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;   cxl 3.0如何将基于DMA的零副本替换为cache-coherent内存池用于内存数据库，其中包含一个实验性的redis fork，映射了200ns。     &lt;！ -  sc_on--&gt;＆＃32;提交由＆＃32; /u/u/mqian41      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ndt956/cxl_30_redefining_zerocopy_memory_for_inmemory/</guid>
      <pubDate>Wed, 10 Sep 2025 23:12:45 GMT</pubDate>
    </item>
    <item>
      <title>React Propps vs State在旁遮普语中解释（带有迷你项目）</title>
      <link>https://www.reddit.com/r/programming/comments/1ndt0ms/react_props_vs_state_ਪਜਬ_ਵਚ_explained_mini/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/chintanbawa     &lt;a href =“ https://www.reddit.com/r/programming/comments/1ndt0ms/react_props_vs_state_ਪਜਬ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ndt0ms/react_props_vs_state_ਪਜਬ_ਵਚ_explained_mini/</guid>
      <pubDate>Wed, 10 Sep 2025 23:01:59 GMT</pubDate>
    </item>
    <item>
      <title>微软回到基本的开源比尔·盖茨的代码</title>
      <link>https://www.reddit.com/r/programming/comments/1ndpzfz/microsoft_goes_back_to_basic_opensources_bill/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/top-figure7252     [link]   ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ndpzfz/microsoft_goes_back_to_basic_opensources_bill/</guid>
      <pubDate>Wed, 10 Sep 2025 20:53:02 GMT</pubDate>
    </item>
    <item>
      <title>关于多处理的咆哮</title>
      <link>https://www.reddit.com/r/programming/comments/1ndpv4f/a_rant_about_multiprocessing/</link>
      <description><![CDATA[]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ndpv4f/a_rant_about_multiprocessing/</guid>
      <pubDate>Wed, 10 Sep 2025 20:48:18 GMT</pubDate>
    </item>
    <item>
      <title>像数据库这样的git</title>
      <link>https://www.reddit.com/r/programming/comments/1ndnjho/a_git_like_database/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;   i刚刚遇到了一个名为doltdb的数据库，该数据库在AI代理建筑商峰会上以 agent database 的形式表示自己， 我研究了他们的文档，以了解他们的意思是 git类似于 git like 。它本质上是用 dolt  cli包裹命令行，因此您可以运行命令，例如 dolt diff ， dolt merge ，以及 dolt Checkout 。这是一个有趣的概念。 我仍在试图找出此功能的真正杀手级用例，但是到目前为止，我还没有找到任何清晰的文档来解释它。   docs $ dolt sql -q ql -q q＆quot&#39;in到文档值（10,10）; Query OK, 1 row affected docs $ dolt diff diff --dolt a/docs b/docs --- a/docs @ 2lcu9e49ia08icjonmt3l0s7ph2cdb5s +++ b/docs @ vpl1rk08eccdfap89kkrff1pk3r8519j +-----+----+----+ | | PK | C1 | +-----+----+----+| + | 10 | 10 | +-----+-----+----+文档$ dolt commit -am＆quot;在分支上添加了一行。提交IJRRPUL05O5J0KGSK1EUDS9PT5N5DDDH0作者：tim sehn＆lt; tim@dolthub.com&gt;日期：星期一12月6日15:06:39 -0800 2021在分支文档上添加了一行$ dolt Checkout Main Switch to Branch&#39;Main&#39;Docs $ DOLT SQL -Q select&#39;select * select * select * from docs; +-----+----+| PK | C1 | +-----+----+| 1 | 1 | | 2 | 1 | +-----+----+文档$ dolt合并签出新分支更新F0GA78JRH4LLC0UUS8H2REFOPP6N870M..IJRRPUL05O5O5J0KGSKKSK1EUDS9PT5DDDH0快速前进的文档$ DOLD DOCS $ DOLD $ DOLT SQL-QL-QL-QL-QL-QL-QL-quit select; +-----+----+| PK | C1 | +-----+----+| 1 | 1 | | 2 | 1 | | 10 | 10 | +-----+----+   &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/no_lock7126      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ndnjho/a_git_like_database/</guid>
      <pubDate>Wed, 10 Sep 2025 19:16:00 GMT</pubDate>
    </item>
    <item>
      <title>这是手写Java的终结吗？构建具有AI生成代码的应用（OpenXava + Vibe编码）</title>
      <link>https://www.reddit.com/r/programming/comments/1ndmzzf/is_this_the_end_of_handwritten_java_building_an/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我正在创建一个YouTube课程，在该课程中，我在Java中构建了完整的汽车保险政策管理应用程序。扭曲：我不是直接编写Java代码。 Instead, I&#39;m using a combination of tools:   OpenXava: A framework that auto-generates a full UI from JPA entities (using annotations for behavior).  Vibe Coding (AI): I use an LLM to generate the necessary Java entity code through natural language prompts.我描述了课程，字段和逻辑，AI为我写了代码。  整个过程都集中在高级设计上，并完善自动生成的结果，而不是按行编写代码。 我刚刚发布了第三堂课，该课程着重于ui opentitive opentitive opentiity opentiity  https://youtu.be/08vqg1pfq3c        我很好奇，我很好奇地，我很好奇这个社区对这个社区对这个工作流的看法。样板甚至复杂的实体代码而不是手动编写？  AI生成的代码 +一个自动生成UI的框架的组合是否代表了UI代表企业应用程序开发的可行未来？     这意味着直接编写Java代码的终结？自定义？  期待讨论。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/comventive-fee-fee-2503       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ndmzzf/is_this_the_end_of_handwritten_java_building_an/</guid>
      <pubDate>Wed, 10 Sep 2025 18:55:43 GMT</pubDate>
    </item>
    <item>
      <title>许多坚硬的leetcode问题是容易的约束问题</title>
      <link>https://www.reddit.com/r/programming/comments/1ndjw6y/many_hard_leetcode_problems_are_easy_constraint/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/avinassh      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ndjw6y/many_hard_leetcode_problems_are_easy_constraint/</guid>
      <pubDate>Wed, 10 Sep 2025 17:01:10 GMT</pubDate>
    </item>
    </channel>
</rss>