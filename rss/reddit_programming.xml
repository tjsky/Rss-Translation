<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Mon, 08 Sep 2025 09:21:08 GMT</lastBuildDate>
    <item>
      <title>欧洲领先的AI Hackathon在这里！</title>
      <link>https://www.reddit.com/r/programming/comments/1nbi8jr/europes_leading_ai_hackathon_is_here/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;    现在打开的连接连接应用程序！ 今年11月，我们将未来带给Espoo，现在是您成为其中一部分的机会。 🫵 今年11月，您可以探索创新的边缘以及超越的东西。您是建立美好未来的一部分吗？还是您会揭露偏见并挑战系统？ 乌托邦或反乌托邦？您可以构建差异。 立即应用并加入我们的Espoo。链接在这里： https://eu.junctionplatform.com/events/events/junction-2025-2025 提交由＆＃32; /u/unctionKids       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nbi8jr/europes_leading_ai_hackathon_is_here/</guid>
      <pubDate>Mon, 08 Sep 2025 08:30:52 GMT</pubDate>
    </item>
    <item>
      <title>95％的AI飞行员撞车事故 - 工程师正在支付价格</title>
      <link>https://www.reddit.com/r/programming/comments/1nbi2xn/95_of_ai_pilots_crash_engineers_are_paying_the/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  一项新的MIT研究刚刚发现了一个令人震惊的事实：$ 35-40 b在AI飞行员身上花费了$ 35-40 B，9- out-of-10提供了零ROI。 为什么有这么多实验停滞不前？建立饮食时间，才华和预算。 错误的目标 - 低价值，高可见性的任务很少获得回报。  获奖公式是选择一个狭窄的问题，抓住一个经过战斗的距离测试的外包架工具，并设置了一个清晰的kpi。这样做的团队一年没有收入为20 m。 查看AI灾难报告文章，一份实用的清单和现成的电子邮件模板，以帮助您避免在下一个AI实验中避免常见的陷阱。   &lt;！ -  sc_on--&gt;＆＃32;&gt;＆＃32;提交由＆＃32;态href =“ https://techleadmastery.substack.com/p/ai-disaster-report-95-percent-percent-pilots-fail-checklist”&gt; [link]   ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nbi2xn/95_of_ai_pilots_crash_engineers_are_paying_the/</guid>
      <pubDate>Mon, 08 Sep 2025 08:20:51 GMT</pubDate>
    </item>
    <item>
      <title>球体和射线碰撞检测教程</title>
      <link>https://www.reddit.com/r/programming/comments/1nbhxjj/sphere_and_ray_collision_detection_tutorial/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/peterbrobby      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nbhxjj/sphere_and_ray_collision_detection_tutorial/</guid>
      <pubDate>Mon, 08 Sep 2025 08:10:45 GMT</pubDate>
    </item>
    <item>
      <title>扎实的原则看不见的问题，解释了答案：中间至专家级别</title>
      <link>https://www.reddit.com/r/programming/comments/1nbh1pe/solid_principles_unseen_questions_with_answers/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;    solid 原理是面向对象设计的基石。他们提供了一组指南，可帮助开发人员编写更可维护，可扩展和可重复使用的代码。尽管大多数开发人员可以命名五个原则，但在复杂的情况下真正理解和应用它们是专家的标志。 Undoubtedly, theory is essential, putting that knowledge to the test is the best way to prepare. This article presents advanced-level Multiple-Choice Questions (MCQs) with answers explained designed for those who want to go beyond the basics.   &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/erdsingh24      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nbh1pe/solid_principles_unseen_questions_with_answers/</guid>
      <pubDate>Mon, 08 Sep 2025 07:12:27 GMT</pubDate>
    </item>
    <item>
      <title>15年后，我如何解决分布式队列问题</title>
      <link>https://www.reddit.com/r/programming/comments/1nbg6u1/how_i_solved_a_distributed_queue_problem_after_15/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/self       [注释]    ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nbg6u1/how_i_solved_a_distributed_queue_problem_after_15/</guid>
      <pubDate>Mon, 08 Sep 2025 06:19:17 GMT</pubDate>
    </item>
    <item>
      <title>再见生成的AI</title>
      <link>https://www.reddit.com/r/programming/comments/1nbfyyz/goodbye_generative_ai/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/delvin0      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nbfyyz/goodbye_generative_ai/</guid>
      <pubDate>Mon, 08 Sep 2025 06:06:03 GMT</pubDate>
    </item>
    <item>
      <title>C和C ++：现代编程背后的隐藏力量</title>
      <link>https://www.reddit.com/r/programming/comments/1nbfjci/c_and_c_the_hidden_power_behind_modern_programming/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  想想python和javascript运行世界吗？想一想。 C和C ++在幕后几乎每个操作系统，游戏引擎和库。我的文章解释了为什么这些语言仍然是现代编程的基础 - 以及开发人员的讨论问题。检查一下并分享您的想法！  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/li_productionsyt      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nbfjci/c_and_c_the_hidden_power_behind_modern_programming/</guid>
      <pubDate>Mon, 08 Sep 2025 05:39:54 GMT</pubDate>
    </item>
    <item>
      <title>我是如何优化的，可以更快地运行115倍 - 一个简短的博客</title>
      <link>https://www.reddit.com/r/programming/comments/1nbfcjl/how_did_i_optimized_gotorch_to_run_115x_times/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  在此博客之后，我通过在向后通过和SGC期间分配中间缓冲区来优化库。我将在下一个博客中进行解释。   &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/usextern_mushroom978     &lt;a href =“ https://www.reddit.com/r/programming/comments/1nbfcjl/how_did_i_optimized_gotorch_to_run_115x_times/]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nbfcjl/how_did_i_optimized_gotorch_to_run_115x_times/</guid>
      <pubDate>Mon, 08 Sep 2025 05:28:19 GMT</pubDate>
    </item>
    <item>
      <title>[开源] LLM代理和生态系统手册 -  60+代理骨骼 +想要使用LLMS构建的开发人员教程</title>
      <link>https://www.reddit.com/r/programming/comments/1nbch63/open_source_llm_agents_ecosystem_handbook_60/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  大家好， 我一直在开发一个名为 llm aDests＆amp; amp; amp; amp; amp; Ecosystem Handbook, aimed at developers who want to explore the practical side of building with large language models. Why it might interest programmers (even if you’re not deep into ML): - 🛠 60+ agent skeletons (each with its own README + main.py) to show design patterns (scraping, analysis, scheduling, translation, RAG, MCP integrations, voice, games…) - 📚关于抹布，内存，微调和构建聊天代理的教程（例如PDFS或API）  - ⚙框架比较：何时（Langchain，Autogen，Crewai，Smolagents等）使用什么使用。 INFRA：评估框架，本地推理选项（Ollama，Llama.cpp），LLMOPS实践  - ⚡代理生成器脚本快速脚手架新项目 这个想法是提供一部“手册”（部分教育，一部分实用） - 一部分 -  devs可以从中可以从“我想尝试”     &gt;  repo链接： https://github.com/github.com/github.com/oxbshw/llm-agent-cosystem-ecosystem-stembook bookbook   &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/fearless-role-2707      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nbch63/open_source_llm_agents_ecosystem_handbook_60/</guid>
      <pubDate>Mon, 08 Sep 2025 02:52:14 GMT</pubDate>
    </item>
    <item>
      <title>介绍Gosocket  - 一个简单的Webocket框架</title>
      <link>https://www.reddit.com/r/programming/comments/1nb7fbd/introducing_gosocket_a_simple_websocket_framework/</link>
      <description><![CDATA[Hi Go community, I’m excited to share GoSocket, a lightweight WebSocket library for Go that aims to make setting up WebSocket servers fast. Setting up a WebSocket server in Go often requires writing a lot of boilerplate: handling connections, managing clients, broadcasting messages, dealing with rooms, and supporting different消息格式。 GoSocket abstracts all of that so you can get a working server running in just a few lines of code. Features  Quick setup: 5–10 lines of code to get a server running Multiple encoding support: JSON (ready), Protobuf &amp; MessagePack（计划）或RAW BINARY   房间＆amp; broadcasting: Join/leave rooms and broadcast messages easily Middleware support: Authentication, logging, CORS, etc. Graceful shutdown: Clean connection handling Multiple servers: Run chat, notifications, and admin panels on different ports simultaneously  快速示例   ws：= gosocket.newserver（）ws.withport（8080）。与Path（“/ws”）。 OnConnect（func（client *gosocket.client，ctx *gosocket.handlercontext）错误{fmt.printf（＆quidt&#39;client&#39;connected：％s \ n＆quienct&#39;＆quienct&#39;＆quient.id，iD）return nil nil}）。 onMessage（func（client *gosocket.client，message *gosocket.message，ctx *gosocket.handlercontext）错误{fmt.printf（＆quort; rectory; rectory：;％s \ n＆quort string（message.rawdata））// onDisconNect（func（client *gosocket.client，ctx *gosocket.handlercontext）错误{fmt.printf（＆quient&#39;client disseconnect：&#39;s s \ n＆quient.id nil nil} nil nil} nil nil} log.fatal（ws.start（ws.start（ws.start（ws.start））  v1.0.0 很快，但是您可以立即开始测试预生产版。 贡献  gosocket正在积极开发，我们欢迎以下内容：    文档＆amp＆amp;示例 测试边缘案例和性能场景 添加新的序列化器（ProtoBuf，MessagePack）  如果您想贡献贡献，请检查代码结构，打开一个问题，讨论您想要进行的工作，并可以在编码上进行编码。 href =“ https://github.com/filipejohansson/gosocket”&gt; https://github.com/filipejohansson/gosocket    任何帮助测试，贡献，甚至给出反馈的任何帮助测试，贡献。期待看到社区的想法！ 谢谢：）  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/filipejohansson      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nb7fbd/introducing_gosocket_a_simple_websocket_framework/</guid>
      <pubDate>Sun, 07 Sep 2025 22:53:13 GMT</pubDate>
    </item>
    <item>
      <title>我将博客从Github页面迁移到Codeberg页面。这仅仅是开始。</title>
      <link>https://www.reddit.com/r/programming/comments/1nb3rih/i_migrated_my_blog_from_github_pages_to_codeberg/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/a-chacon      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nb3rih/i_migrated_my_blog_from_github_pages_to_codeberg/</guid>
      <pubDate>Sun, 07 Sep 2025 20:22:28 GMT</pubDate>
    </item>
    <item>
      <title>您的代码如何真正控制硬件</title>
      <link>https://www.reddit.com/r/programming/comments/1nb3b31/how_your_code_really_controls_hardware/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/bluegoliath      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nb3b31/how_your_code_really_controls_hardware/</guid>
      <pubDate>Sun, 07 Sep 2025 20:04:39 GMT</pubDate>
    </item>
    <item>
      <title>DDA算法</title>
      <link>https://www.reddit.com/r/programming/comments/1nb32zl/the_dda_algorithm/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/nemin32      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nb32zl/the_dda_algorithm/</guid>
      <pubDate>Sun, 07 Sep 2025 19:55:58 GMT</pubDate>
    </item>
    <item>
      <title>如何使用AI改善工程团队的团队合作</title>
      <link>https://www.reddit.com/r/programming/comments/1nb207l/how_to_use_ai_to_improve_teamwork_in_engineering/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/u/gregorojstersek      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nb207l/how_to_use_ai_to_improve_teamwork_in_engineering/</guid>
      <pubDate>Sun, 07 Sep 2025 19:13:53 GMT</pubDate>
    </item>
    <item>
      <title>Prey 2006项目通过将其代码库与Doom 3 GPL发布来创建开源FPS游戏端口</title>
      <link>https://www.reddit.com/r/programming/comments/1nax3re/prey_2006_project_to_create_opensource_fps_game/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/r_retrohacking_mod2       [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nax3re/prey_2006_project_to_create_opensource_fps_game/</guid>
      <pubDate>Sun, 07 Sep 2025 16:05:18 GMT</pubDate>
    </item>
    </channel>
</rss>