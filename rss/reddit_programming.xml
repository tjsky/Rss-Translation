<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Fri, 10 Oct 2025 01:09:24 GMT</lastBuildDate>
    <item>
      <title>Streamtario（测试版）：一个受 Stremio 启发的现代开源媒体流平台。</title>
      <link>https://www.reddit.com/r/programming/comments/1o2mytm/streamtario_beta_a_modern_opensource_stremio/</link>
      <description><![CDATA[很高兴能分享一个我已经从事了一段时间的项目，我称之为 Streamtario。这是一个受 Stremio 启发的流媒体应用程序，但从头开始重建，仍在开发中，还有很多工作要做，每个角落都有错误，如果有人感兴趣，我希望得到一些帮助，而且我还没有发布安装程序/打包版本。 一些关键功能包括：  插件系统： 插件解析与官方和社区 Stremio 的兼容性 插件。 搜索：在所有安装的插件中搜索内容。 流媒体：由自定义 torrent 客户端提供支持的强大后端，用于实时流媒体。 高性能桌面客户端：使用 C++ 主机和嵌入式 MPV 播放器提供本机桌面体验。 个人资料：创建受 pin 保护的个人资料并轻松管理它们。 历史记录：跟踪您观看的内容并从上次中断的位置继续播放 更多详细信息，请访问 GitHub   整个平台采用微服务方法构建，提供帐户管理、插件控制、身份验证和流媒体服务，所有服务都通过 REST API、联合 GraphQL 网关和 Redis 事件总线进行通信。 正如我之前所说，我仍在积极开发它，但核心功能很稳定。我很想得到您的反馈！   由   提交 /u/DrIsLightInDarkness   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2mytm/streamtario_beta_a_modern_opensource_stremio/</guid>
      <pubDate>Fri, 10 Oct 2025 00:48:06 GMT</pubDate>
    </item>
    <item>
      <title>查找 VS Code 内存泄漏</title>
      <link>https://www.reddit.com/r/programming/comments/1o2lkpd/finding_a_vs_code_memory_leak/</link>
      <description><![CDATA[ 由   提交/u/wheybags  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2lkpd/finding_a_vs_code_memory_leak/</guid>
      <pubDate>Thu, 09 Oct 2025 23:42:17 GMT</pubDate>
    </item>
    <item>
      <title>您构建了一个人工智能代理 - 但您如何定价？</title>
      <link>https://www.reddit.com/r/programming/comments/1o2lek9/you_built_an_ai_agent_but_how_do_you_price_it/</link>
      <description><![CDATA[您终于构建了 AI 代理。它编写代码、起草电子邮件，甚至可能自行运行任务。它功能强大、实用，并且随时可以发布。但现实却是：你如何为这样的东西定价？   由   提交 /u/shift_devs   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2lek9/you_built_an_ai_agent_but_how_do_you_price_it/</guid>
      <pubDate>Thu, 09 Oct 2025 23:34:24 GMT</pubDate>
    </item>
    <item>
      <title>具有 3,200 多个引用的存储库：5 秒 → <0.1 秒（快 100 倍）</title>
      <link>https://www.reddit.com/r/programming/comments/1o2l3rl/repos_with_3200_refs_5s_01s_100x_faster/</link>
      <description><![CDATA[GitKraken Desktop 11.5 在最重要的地方实现了巨大的性能改进，打开存储库的速度提高了 5 倍，存储刷新速度提高了 100 倍，分支/标签加载速度提高了 100 倍。无需更改工作流程。只是明显更快的 Git 操作，让您恢复时间和流程。   由   提交 /u/GitKraken   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2l3rl/repos_with_3200_refs_5s_01s_100x_faster/</guid>
      <pubDate>Thu, 09 Oct 2025 23:20:38 GMT</pubDate>
    </item>
    <item>
      <title>在无服务器上构建弹性 AI 代理 |重申</title>
      <link>https://www.reddit.com/r/programming/comments/1o2hcar/building_resilient_ai_agents_on_serverless_restate/</link>
      <description><![CDATA[无服务器平台（Lambda、Vercel、Cloudflare Workers）似乎非常适合 AI 代理 — 自动扩展、按使用付费、无需基础设施。直到您的代理需要等待某些事情。 您的代理在采取行动之前需要人工批准。现在怎么办？  保持 Lambda 运行吗？ → 您将达到 15 分钟的暂停时间。还有$$$。 将状态保存到数据库并稍后恢复？ → 恭喜，您现在正在构建一个具有队列、状态管理和协调逻辑的分布式系统。 使用传统的工作流编排器？ → 告别无服务器。现在您正在管理工作线程基础设施。  这些都不是好的答案。 这篇博文介绍了持久执行作为解决方案。想法：在日志中记录代理采取的每一步（LLM 调用、API 请求、工具执行）。当您的函数需要等待或崩溃时，它不会重新开始 - 它会重播日志并从中断处继续。 Restate 将工作推送到无服务器函数，而不是要求工作人员拉取任务。您的代理保持真正的无服务器状态，同时获得：  崩溃时的持久性（永远不会丢失进度） 等待时扩展到零（无空闲成本） 用于调试的实时执行时间表 安全版本控制（正在进行的工作在部署时永远不会中断）  这篇文章包括与 Vercel AI SDK 集成的代码示例，以及 OpenAI 代理。针对实际生产问题的非常优雅的解决方案。 如果您正在构建需要在现实世界中生存的代理，那么值得一读。   由   提交 /u/stsffap   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2hcar/building_resilient_ai_agents_on_serverless_restate/</guid>
      <pubDate>Thu, 09 Oct 2025 20:44:20 GMT</pubDate>
    </item>
    <item>
      <title>Cloudflare 刚刚解决了 mcps，我用基准测试了它，它是合法的</title>
      <link>https://www.reddit.com/r/programming/comments/1o2ge3m/cloudflare_just_solved_mcps_i_tested_it_with/</link>
      <description><![CDATA[我为 Python 创建了基准测试和代码模式沙箱环境。结果非常令人难以置信。 10 次工具调用迭代变成一次迭代。在某些情况下节省超过 50% 的代币。  原始文章 https://blog.cloudflare.com/code-mode/ 我真的认为这改变了“工具调用和 mcps”的游戏规则 注意，我用 Python 编写了这篇文章作为测试，但这可以用任何语言完成，并且 高度适用于所有llm编程开发   由   提交/u/Crafty_Disk_7026   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2ge3m/cloudflare_just_solved_mcps_i_tested_it_with/</guid>
      <pubDate>Thu, 09 Oct 2025 20:08:19 GMT</pubDate>
    </item>
    <item>
      <title>这是我见过的关于人工智能编程主题的最合理的视频之一</title>
      <link>https://www.reddit.com/r/programming/comments/1o2g3ee/this_is_one_of_the_most_reasonable_videos_ive/</link>
      <description><![CDATA[ 由   提交/u/mahdi_lky   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2g3ee/this_is_one_of_the_most_reasonable_videos_ive/</guid>
      <pubDate>Thu, 09 Oct 2025 19:57:05 GMT</pubDate>
    </item>
    <item>
      <title>使用 mimalloc 和 heapless 削减 Rust 分配以构建最快的代理</title>
      <link>https://www.reddit.com/r/programming/comments/1o2b8ii/slashing_rust_allocations_with_mimalloc_and/</link>
      <description><![CDATA[ 由   提交 /u/ketralnis   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2b8ii/slashing_rust_allocations_with_mimalloc_and/</guid>
      <pubDate>Thu, 09 Oct 2025 16:52:08 GMT</pubDate>
    </item>
    <item>
      <title>写入内容：SQLite 中的并发写入事务</title>
      <link>https://www.reddit.com/r/programming/comments/1o2b5h6/the_write_stuff_concurrent_write_transactions_in/</link>
      <description><![CDATA[ 由   提交/u/ketralnis  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2b5h6/the_write_stuff_concurrent_write_transactions_in/</guid>
      <pubDate>Thu, 09 Oct 2025 16:48:51 GMT</pubDate>
    </item>
    <item>
      <title>哪种语言最适合人工智能代码生成？</title>
      <link>https://www.reddit.com/r/programming/comments/1o2b1wp/which_language_is_best_for_ai_code_generation/</link>
      <description><![CDATA[ 由   提交/u/AltruisticPrimary34  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2b1wp/which_language_is_best_for_ai_code_generation/</guid>
      <pubDate>Thu, 09 Oct 2025 16:45:02 GMT</pubDate>
    </item>
    <item>
      <title>Copper-Engine：一款全新 3D 游戏引擎，旨在为世界各地的独立开发者提供支持</title>
      <link>https://www.reddit.com/r/programming/comments/1o291e9/copperengine_a_new_3d_game_engine_made_to_empower/</link>
      <description><![CDATA[Hello World！ 我叫 Kris Hass，是 Copper-Engine 的开发者，这是一个进入游戏引擎市场的全新产品，重点是为独立开发者提供支持并帮助他们制作独特的创意作品。 Copper-Engine 已经开发了 3 年，最初是作为一个业余爱好项目，但在后来的几年中转向了 用于现实世界的通用引擎。 如前所述，我们的核心信念之一是独立团队有能力创建一些最好、最独特的项目，通常会击败大型工作室。我们认为这是因为大型工作室缺乏独立团队的基础，即言论自由，无法创造一个可以蓬勃发展创造力的地方。 我们目前正在开发代号为 Themélio 的 Cooper-Engine 版本 0.3。虽然功能尚未完成，但该版本包含了引擎的大部分核心功能，包括专业关卡编辑器、批处理渲染器、ECS、C# 脚本和基于 physx 的物理引擎。 Themélio 充当基础，向潜在的 Copper-Engine 用户展示未来的发展。 如果您对我们的项目感兴趣，我们的网站刚刚上线，同时还有一篇介绍性文章，展示了 0.3 版的未来、引擎的状态以及我们未来的计划。 请前往 https://coppr.dev/article/first-article 并关注我们的社交活动，CopperEngine 在 twitter 和 copperengine.bsky.social 在 bluesky。 再见~ Copper-Engine 团队。   由   提交 /u/ChrisHuskyFurry   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o291e9/copperengine_a_new_3d_game_engine_made_to_empower/</guid>
      <pubDate>Thu, 09 Oct 2025 15:29:58 GMT</pubDate>
    </item>
    <item>
      <title>模糊测试作为有效开发的基础 LuaJIT 案例研究</title>
      <link>https://www.reddit.com/r/programming/comments/1o288de/fuzzing_as_the_basis_for_effective_development_a/</link>
      <description><![CDATA[ 由   提交/u/ketralnis  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o288de/fuzzing_as_the_basis_for_effective_development_a/</guid>
      <pubDate>Thu, 09 Oct 2025 15:00:15 GMT</pubDate>
    </item>
    <item>
      <title>内存访问是 O(N^[1/3])</title>
      <link>https://www.reddit.com/r/programming/comments/1o288b9/memory_access_is_on13/</link>
      <description><![CDATA[ 由   提交/u/ketralnis  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o288b9/memory_access_is_on13/</guid>
      <pubDate>Thu, 09 Oct 2025 15:00:12 GMT</pubDate>
    </item>
    <item>
      <title>雷纳·格林（Modernescpp 著名）去世</title>
      <link>https://www.reddit.com/r/programming/comments/1o286vv/rainer_grimm_of_modernescpp_fame_has_passed_away/</link>
      <description><![CDATA[ 由   提交/u/mariuz  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o286vv/rainer_grimm_of_modernescpp_fame_has_passed_away/</guid>
      <pubDate>Thu, 09 Oct 2025 14:58:41 GMT</pubDate>
    </item>
    <item>
      <title>为什么我们需要 SIMD</title>
      <link>https://www.reddit.com/r/programming/comments/1o286u5/why_we_need_simd/</link>
      <description><![CDATA[ 由   提交/u/ketralnis  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o286u5/why_we_need_simd/</guid>
      <pubDate>Thu, 09 Oct 2025 14:58:38 GMT</pubDate>
    </item>
    </channel>
</rss>