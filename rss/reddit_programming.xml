<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Thu, 02 Oct 2025 09:18:10 GMT</lastBuildDate>
    <item>
      <title>编码更快10×。验证没有。谁在使用生产跟踪重播来缩小差距？</title>
      <link>https://www.reddit.com/r/programming/comments/1nvyuu5/coding_got_10_faster_validation_didnt_whos_using/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  在去年我们的产生代码跳跃的能力（AI助手，Codegen等），但我们的 repares cadence 却没有。瓶颈从编写代码转变为验证行为。 经典答案 - “只需写更多的测试”  - 开始感觉像是用更多的火焰打火：更多的固定装置，更多的固定装置，更多的模拟，更多的INFRA，更多的片状，更多的片状，并且仍然错过了合同的合同。 Capture real interactions in prod (HTTP in/out, DB queries, queues) with strict PII scrubbing. Curate a small “golden path” set of traces that covers the highest-value flows. Replay those traces in CI against fresh builds and diff only外部可观察的行为（状态代码，有效载荷形状，关键字段，定时信封）。 进行重播确定性（冻结时间/ids/ids/dandans; stub nost; stub nonderminisism        对我们有用的是   捕获了无声的API/合同回归，有时会错过单位/集成套件。 更少的薄片与基于重型模拟的测试。 更快地“ go/no-go go/no-go go go/no-go”在关键路径上进行。 新功能在锻炼之前才涵盖。 多步/状态流需要仔细缝制。  Golden Sets漂移； curation is ongoing work. Privacy/compliance engineering is non-optional.  Questions for folks who’ve tried similar:  How do you select traces (top-N endpoints, error-prone flows, revenue paths, statistical sampling)? Tips to keep the golden set新鲜不爆炸存储？ 您的比较有多严格 - 行为差异与字节字节？ 您喜欢的任何工具模式（捕获/重播，pii擦洗），oss或homegrown？ 提交由＆＃32; /u/u/u/wide-chocaly-763     [link&gt; [link]   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nvyuu5/coding_got_10_faster_validation_didnt_whos_using/</guid>
      <pubDate>Thu, 02 Oct 2025 09:11:57 GMT</pubDate>
    </item>
    <item>
      <title>直到编程成瘾是真实的</title>
      <link>https://www.reddit.com/r/programming/comments/1nvyqrz/til_that_programming_addiction_is_real/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/head_sundae7767      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nvyqrz/til_that_programming_addiction_is_real/</guid>
      <pubDate>Thu, 02 Oct 2025 09:04:49 GMT</pubDate>
    </item>
    <item>
      <title>与Valhalla #jvmls的Kotlin中更好的不变性</title>
      <link>https://www.reddit.com/r/programming/comments/1nvyhgr/better_immutability_in_kotlin_with_valhalla_jvmls/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/bluegoliach      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nvyhgr/better_immutability_in_kotlin_with_valhalla_jvmls/</guid>
      <pubDate>Thu, 02 Oct 2025 08:48:30 GMT</pubDate>
    </item>
    <item>
      <title>关于多线程渲染的故事| Pixieditor九月状态</title>
      <link>https://www.reddit.com/r/programming/comments/1nvyd1u/a_story_about_multithreaded_rendering_pixieditor/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/flabbet      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nvyd1u/a_story_about_multithreaded_rendering_pixieditor/</guid>
      <pubDate>Thu, 02 Oct 2025 08:40:33 GMT</pubDate>
    </item>
    <item>
      <title>我如何开始编程</title>
      <link>https://www.reddit.com/r/programming/comments/1nvy19a/how_i_started_programming/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;   ngl我18岁时约会了22岁，以为我是狗屎。就像，一个年长的女孩选择了 me ？巨大的W.我非常渴望她的验证，我忽略了所有的危险信号。然后我发现她被骗了。这并不伤心，它打断了我的大脑。它证实了我的每一个不安全感。我还不够。我甚至相信她很愚蠢。它解锁了一些我什至不知道我有过的深层妈妈问题，总是追逐那些觉得“家”的女孩但实际上只是混乱的。多年来，我对自己的人际关系感到如此无能为力。总是开始比赛是一个低点。直到我意识到世界是否会发挥肮脏为止，我需要学习游戏的规则。更好的是，我需要构建自己的作弊代码。 所以我开始编码。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/extract_trainer_1697         [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nvy19a/how_i_started_programming/</guid>
      <pubDate>Thu, 02 Oct 2025 08:19:19 GMT</pubDate>
    </item>
    <item>
      <title>我已经建立了一个工具，可以在从基础到面试的结构化路径中可视化算法。会喜欢您的反馈！</title>
      <link>https://www.reddit.com/r/programming/comments/1nvy0cu/ive_built_a_tool_to_visualize_algorithms_in_a/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/over_effort6298      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nvy0cu/ive_built_a_tool_to_visualize_algorithms_in_a/</guid>
      <pubDate>Thu, 02 Oct 2025 08:17:39 GMT</pubDate>
    </item>
    <item>
      <title>AI正在开发人员劳动力中造成沉默的危机</title>
      <link>https://www.reddit.com/r/programming/comments/1nvxty1/ai_is_creating_a_silent_crisis_in_the_developer/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  毫无否认的是，像副铜和chatgpt这样的AI已成为开发人员的生产力火箭助推器。它可以将30分钟的样板任务变成30秒的提示。但是，当我将这些工具更深入地集成到工作流程中时，我看到了一个有关副作用的信息：我们默默地创建了一个两层的系统。 在一侧，新一波的开发人员对AI的高度倾斜，潜在的运输代码，他们不了解他们不了解。另一方面，拒绝这些工具的经验丰富的开发人员被抛在后面，相比之下，它们的生产力开始变得苍白。感觉就像我们正在为原始速度提供深刻的了解，而且我不确定长期的成本是否值得。 让我打破我看到的两个主要挑战。  vibe编码者：当您不理解“  ”时，“作为学生，我会看到一个学生，我会看到colea not ai no n ai no a in ai deep for to real tape after nevely却学习时，但要避免学习时，但要避免学习。令人困惑。一种用于提高效率的工具正在使用拖延。周围，​​经验丰富的开发人员，雇主和讲师都在引起警报：“初级开发人员不知道如何编码！＆quot&#39; 这是AI过度依赖的固有风险。这让我想知道：这是未来吗？一个没有人了解代码背后的齿轮和机制的世界，只是它起作用了吗？当AI无法修复关键错误时，您缺乏介入的基本知识时会发生什么？  AI-ABSTAINERS：被留在后面的风险 相反，我们有出色，经验丰富的开发人员被抛在后面，因为他们选择不采用这些工具，因为他们选择了这些工具。尽管深层知识是无价的，但生产率较慢的缺点正在成为一种真正的责任。 我们必须说实话：AI只会变得更好，更快，更有效。问题不是会很快构建软件的最佳选择，而是什么时候。忽略这就是冒着无关紧要的风险。 “工艺之神”的课程“  这个难题使我想起了神秘之王的神灵，“手工艺之神”。他代表了传统的手工艺术。一位领先时代的国王引发了一场工业革命，这位上帝面临选择：坚持过去或拥抱未来。他明智地将自己重塑为“蒸汽和机械之神”，“”象征创新和技术。 现实世界中的工业革命遵循相同的脚本。抵制的工匠和铁匠陷入了贫困，而适应工厂和机械的人则蓬勃发展。这一转变建立了现代世界，并创造了持续到今天的命运。 我的结论：锻造一条新的道路 我不想成为没有AI的开发人员，我也不想成为由于顽固而留下的那个人。我的目标是成为新一代的一部分：具有深厚基本知识的开发人员，使用AI来编写其大部分代码，并具备调试和解决AI无法做到的问题的技能。  ai无法做所有事情，但是很快就会做。了解您的手艺，但要掌握该工具。不要被抛在后面。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/heis_king_of_none      [link]   ＆＃32;   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nvxty1/ai_is_creating_a_silent_crisis_in_the_developer/</guid>
      <pubDate>Thu, 02 Oct 2025 08:05:52 GMT</pubDate>
    </item>
    <item>
      <title>一个node.js + Express回购，以生成DB Metadata +用户提示（OpenAI API）的SQL</title>
      <link>https://www.reddit.com/r/programming/comments/1nvx3go/a_nodejs_express_repo_to_generate_sql_from_db/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/someonesopranos      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nvx3go/a_nodejs_express_repo_to_generate_sql_from_db/</guid>
      <pubDate>Thu, 02 Oct 2025 07:18:58 GMT</pubDate>
    </item>
    <item>
      <title>我创建了最好的IA搜索引擎</title>
      <link>https://www.reddit.com/r/programming/comments/1nvvudo/jai_créé_le_meilleur_moteur_de_recherche_ia/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  如果找不到所需的结果，则单击按钮并完美的搜索结果吸引力。我使用脑API，这是世界上使用AI的最快方法（它比Chatgpt快800倍，并且在1.5秒内创建了2000行代码）。您可以在链接上使用它 https://searchmilien.oneapp.dev 。 Google中有一半的结果可能没有打开，这是由于X框架选项，并且很快就会进行调整。你怎么认为？   &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/hug_lesbosons     &lt;a href =“https://www.reddit.com/r/programming/comments/1nvvudo/jai_créé_le_meille_meille_motor_motor_motor_de_recherche_ia/]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nvvudo/jai_créé_le_meilleur_moteur_de_recherche_ia/</guid>
      <pubDate>Thu, 02 Oct 2025 06:01:10 GMT</pubDate>
    </item>
    <item>
      <title>建立了一个带有Rust + React的笔记应用程序，因为我厌倦了电子膨胀</title>
      <link>https://www.reddit.com/r/programming/comments/1nvvkjc/built_a_notetaking_app_with_rust_react_because_i/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;   ，因此我在过去的6个月中一直在研究这个名为lokus的本地第一笔记应用程序。之所以开始是因为我对现有工具感到沮丧 - 概念很慢，黑曜石需要10个插件才能有用，并且一切都需要订阅。 Tech stack: - Frontend: React 19 + TipTap (ProseMirror) - Backend: Rust + Tauri 2.0 - ~10MB bundle vs typical Electron apps at 100MB+ - Launches in under 1 second - Full-text search across 10k notes in ~50ms Features: - Wiki-style linking with backlinks - 2D/3D graph visualization (WebGL-accelerated) - Notion-like database views -帆布/白板模式 - 插件系统（VS代码风格） - 用于AI集成的MCP服务器 - 将所有作为Markdown文件本地存储的所有内容，图形渲染是最难的部分 - 必须从D3 -Force转移到带有Web工作人员的Sigma.js，以60fps处理1000多个节点。它是开源的：http：//github.com/lokus-ai/lokus会喜欢反馈，尤其是在建筑决策上。很高兴回答技术问题。    &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/codewithinferno     [link link]&gt; [link]&gt; [link]   [注释]    ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nvvkjc/built_a_notetaking_app_with_rust_react_because_i/</guid>
      <pubDate>Thu, 02 Oct 2025 05:45:25 GMT</pubDate>
    </item>
    <item>
      <title>直到LISP</title>
      <link>https://www.reddit.com/r/programming/comments/1nvu1qm/til_about_lisp/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  关于这种语言的最有趣的事情是，人们经常将其称为“很多令人讨厌的愚蠢括号。”   &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/u/john_smith1365       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nvu1qm/til_about_lisp/</guid>
      <pubDate>Thu, 02 Oct 2025 04:18:04 GMT</pubDate>
    </item>
    <item>
      <title>什么是自举？ - 计算机手机</title>
      <link>https://www.reddit.com/r/programming/comments/1nvpsxd/what_is_bootstrapping_anyway_computerphile/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/mycall      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nvpsxd/what_is_bootstrapping_anyway_computerphile/</guid>
      <pubDate>Thu, 02 Oct 2025 00:50:08 GMT</pubDate>
    </item>
    <item>
      <title>GPU模式演讲80：闪存如何工作</title>
      <link>https://www.reddit.com/r/programming/comments/1nvnbhw/gpu_mode_lecture_80_how_flashattention_4_works/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/mttd      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nvnbhw/gpu_mode_lecture_80_how_flashattention_4_works/</guid>
      <pubDate>Wed, 01 Oct 2025 22:57:30 GMT</pubDate>
    </item>
    <item>
      <title>在Python中构建气候模拟游戏（没有游戏引擎！）</title>
      <link>https://www.reddit.com/r/programming/comments/1nvmqar/building_a_climate_simulation_game_in_python/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/dialigent_historian_4       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nvmqar/building_a_climate_simulation_game_in_python/</guid>
      <pubDate>Wed, 01 Oct 2025 22:32:10 GMT</pubDate>
    </item>
    <item>
      <title>F3：未来的开源数据文件格式</title>
      <link>https://www.reddit.com/r/programming/comments/1nvmaot/f3_the_opensource_data_file_format_for_the_future/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/mttd       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nvmaot/f3_the_opensource_data_file_format_for_the_future/</guid>
      <pubDate>Wed, 01 Oct 2025 22:14:46 GMT</pubDate>
    </item>
    </channel>
</rss>