<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Mon, 18 Aug 2025 09:22:47 GMT</lastBuildDate>
    <item>
      <title>经过2年以上的开发，我们刚刚开源了整个AI平台 - 请烘烤我们的代码😅</title>
      <link>https://www.reddit.com/r/programming/comments/1mth1zk/we_just_opensourced_our_entire_ai_platform_after/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  几个月后“我们疯了？” meetings, we finally pulled the trigger and open-sourced WEAM - our team AI platform. What it is: Think ChatGPT but built for teams of 20+ Next.js frontend, Node.js/Python backend Connects to OpenAI, Claude, Gemini, Llama - basically every LLM API Has &quot;Brains&quot; （智能文件夹），自定义代理，RAG管道，现成的AI应用程序实际上已经准备好生产（我们一直在内部使用） 我们正在寻找的内容：代码评论（残酷，我们可以接受🔥）为什么您这样做X？”问题搜索错误（肯定有错误隐藏）功能建议架构决策的一般反馈 为什么要开源？诚实地？我们认为AI平台不应该是黑匣子。另外，社区可能会用它来建立比我们以往任何时候都更凉爽的东西。 - &gt;＆＃32;提交由＆＃32; /u/u/flightslow2085      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mth1zk/we_just_opensourced_our_entire_ai_platform_after/</guid>
      <pubDate>Mon, 18 Aug 2025 09:18:20 GMT</pubDate>
    </item>
    <item>
      <title>验尸的。电子商务网站</title>
      <link>https://www.reddit.com/r/programming/comments/1mtghmm/postmortem_of_ecommerce_site/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/electrical_gas4694     [link]  ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mtghmm/postmortem_of_ecommerce_site/</guid>
      <pubDate>Mon, 18 Aug 2025 08:43:08 GMT</pubDate>
    </item>
    <item>
      <title>检查egui_graphs网络演示</title>
      <link>https://www.reddit.com/r/programming/comments/1mtgh5n/check_egui_graphs_web_demo/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  ⭐ project      &lt;！ -  sc_on-&gt; 32;提交由＆＃32; /u/u/u/blitzar90      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mtgh5n/check_egui_graphs_web_demo/</guid>
      <pubDate>Mon, 18 Aug 2025 08:42:14 GMT</pubDate>
    </item>
    <item>
      <title>内容 - 可调的存储（CAS）</title>
      <link>https://www.reddit.com/r/programming/comments/1mtg9rn/contentaddressable_storage_cas/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/vannam0511      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mtg9rn/contentaddressable_storage_cas/</guid>
      <pubDate>Mon, 18 Aug 2025 08:28:53 GMT</pubDate>
    </item>
    <item>
      <title>8个被低估的熊猫功能，可以节省您数小时的编码</title>
      <link>https://www.reddit.com/r/programming/comments/1mtg01n/8_underrated_pandas_functions_that_will_save_you/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  花了太长的时间编写复杂的代码来进行数据操纵，只是发现有内置的熊猫函数可以一行执行此操作。我希望我早些时候知道。这些不是您的典型 .head（）和 .describe（）  - 我们正在谈论的功能，这些功能实际上可以改变您与数据框架的工作方式。 媒介：   是否有人在那一刻发现了您想重写一半旧代码的熊猫功能？您希望早日发现什么功能？  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/motor_cry_4380       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mtg01n/8_underrated_pandas_functions_that_will_save_you/</guid>
      <pubDate>Mon, 18 Aug 2025 08:11:37 GMT</pubDate>
    </item>
    <item>
      <title>Ubicloud：AWS的开源替代品</title>
      <link>https://www.reddit.com/r/programming/comments/1mtfihf/ubicloud_open_source_alternative_to_aws/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/top-associate-6276       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mtfihf/ubicloud_open_source_alternative_to_aws/</guid>
      <pubDate>Mon, 18 Aug 2025 07:40:45 GMT</pubDate>
    </item>
    <item>
      <title>NUMA是新网络：每个插座内存模型如何重塑微服务放置</title>
      <link>https://www.reddit.com/r/programming/comments/1mt8qjj/numa_is_the_new_network_how_persocket_memory/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  探讨非统一内存访问（numa）如何重塑微服务放置。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/mqian41     [link]   [commist]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mt8qjj/numa_is_the_new_network_how_persocket_memory/</guid>
      <pubDate>Mon, 18 Aug 2025 01:34:23 GMT</pubDate>
    </item>
    <item>
      <title>记录代码很无聊...。但是不一定是</title>
      <link>https://www.reddit.com/r/programming/comments/1mt6zy1/documenting_code_is_boring_but_it_doesnt_have_to/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  本文让我思考了我们行业中的基本悖论 - 我们都迫切需要良好的文档，但我们大多数人都讨厌创建它。该文章谈到了通过更好的设计和结构使文档“减少无聊”，但是我对基本问题更加好奇：写文档的痛苦实际上值得解决，还是大多数开发人员只是接受它是必要的邪恶？以我的经验，大约有三个营地：1。受害者 - 撰写文档，因为他们必须恨它2。您是：•通过乏味的乏味，因为您知道这很重要吗？ •使用任何工具/自动化来减轻痛苦？ •只是……除非绝对强迫，否则不这样做？我特别感兴趣的是人们认为这是一个值得通过更好的工具解决的问题，还是只是我们需要接受的开发的固有部分。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/ok-ok-ad7050     splass &lt;56fba&gt;  ＆＃32;   [注释]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mt6zy1/documenting_code_is_boring_but_it_doesnt_have_to/</guid>
      <pubDate>Mon, 18 Aug 2025 00:12:49 GMT</pubDate>
    </item>
    <item>
      <title>自定义LISP REPL</title>
      <link>https://www.reddit.com/r/programming/comments/1mt5886/customizing_lisp_repls/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/aartaka      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mt5886/customizing_lisp_repls/</guid>
      <pubDate>Sun, 17 Aug 2025 22:53:16 GMT</pubDate>
    </item>
    <item>
      <title>固定靴子，TPM和反陈词发动机</title>
      <link>https://www.reddit.com/r/programming/comments/1mt05nb/secure_boot_tpm_and_anticheat_engines/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/tapo      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mt05nb/secure_boot_tpm_and_anticheat_engines/</guid>
      <pubDate>Sun, 17 Aug 2025 19:28:52 GMT</pubDate>
    </item>
    <item>
      <title>你可以构建东西</title>
      <link>https://www.reddit.com/r/programming/comments/1msxjqq/you_can_just_build_things/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/rozenmd      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1msxjqq/you_can_just_build_things/</guid>
      <pubDate>Sun, 17 Aug 2025 17:50:13 GMT</pubDate>
    </item>
    <item>
      <title>AI辅助软件工程生产率的现实</title>
      <link>https://www.reddit.com/r/programming/comments/1msxjl1/the_reality_of_aiassisted_software_engineering/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/valatw      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1msxjl1/the_reality_of_aiassisted_software_engineering/</guid>
      <pubDate>Sun, 17 Aug 2025 17:50:03 GMT</pubDate>
    </item>
    <item>
      <title>Quantoniumos：单一共振傅立叶变换 + 48轮Feistel（开放研究，可再现测试）</title>
      <link>https://www.reddit.com/r/programming/comments/1msx1zx/quantoniumos_unitary_resonance_fourier_transform/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  上下文：经典的DFT管道不是共鸣，而加密中的大多数扩散设计都与信号物理学分离。该仓库探索了一个单一的共振傅立叶变换（RFT）和增强的48轮Feistel引擎，重点是 *可重复的 *测量值（ENV锁，脚本，JSON输出）。  implights     •rft操作员带有unit-modulus specter spectra + spectra + intogulus spectra + intogulus spectra + basks sasks sasks→ψ -  6ψ†x”≤1e-12）。 •密码：feistel（48），带有AES S-box，mixColumns类似的扩散，arx;域分离的HKDF时间表。 •包装器：盐ctr + hkdf split（enc/mac） + hmac tag（encrypt-then-mac）。 •可重复性：脚本将指标保存到JSON； artifacts archived with DOIs. Numbers (current build) • Unitarity: machine precision on tested ensembles (≤ 1e−12). • Diffusion: message-avalanche ≈ 0.438, key-avalanche ≈ 0.527, key sensitivity ≈ 0.495. • Perf: engine-only ≈小型缓冲区上的9.2 Mb/s（批量时更高）。 在本地运行  1）克隆：git clone  CD Quantoniumos   2）Python env + deps;构建pybind11 C ++扩展名（readme中的一个命令）。  3）测试：   -  python test_unitarity.py-py-n 4096  -  trials 10000-out test_unitarity.junitarity.json   - 结果/test_v2_compread.json   paper/dois（用于归档） •ZENODO（版本，v0.2.0）：10.5281/Zenodo.168904445 |概念：10.5281/Zenodo.16890444  我要寻找的内容（讨论提示） •密码库人：批评Feistel F功能（S-box/MDS/ARX）和域-Sep Speched;用σ≤0.02的味精 - 瓦尔兰奇推动味精的想法。 •信号/num-lin-alg folks：对单位性条件（单位模式频谱 +蒙版正交性）和快速率的想法。建议更好的种子/锁紧files/ci。 范围注意：这是**研究代码**（尚无形式的IND-CPA/CCA降低；侧通道姿势取决于Impl）。请作为仪器测试台，而不是生产加密。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/realeaspect2373       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1msx1zx/quantoniumos_unitary_resonance_fourier_transform/</guid>
      <pubDate>Sun, 17 Aug 2025 17:31:41 GMT</pubDate>
    </item>
    <item>
      <title>春季启动 - 用于显示响应代码和自定义错误代码的服务类示例</title>
      <link>https://www.reddit.com/r/programming/comments/1mswuo9/spring_boot_service_class_example_for_displaying/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/lazy-transition8236     [link]    ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mswuo9/spring_boot_service_class_example_for_displaying/</guid>
      <pubDate>Sun, 17 Aug 2025 17:24:00 GMT</pubDate>
    </item>
    <item>
      <title>MP4分析仪 -  CLI和GUI检查MP4文件</title>
      <link>https://www.reddit.com/r/programming/comments/1mswnqs/mp4_analyzer_cli_gui_for_inspecting_mp4_files/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  对于想要学习MP4容器格式的任何人，我最近构建了 mp4analyzer&gt; mp4analyzer ，用于检查MP4文件结构的Python工具。随附CLI和基于QT的GUI。发表于 pypi 易于安装（ pip install install install install install install intertim mp4analyzer ）。    -  cli：mp4 box box hierArchy，parser pars pars pars pars pars pars pars pars pars 逐帧视频分析和时间轴可视化。包括人均详细信息：类型（I/P/B），字节大小，时间戳和演示文稿与解码顺序。需要FFMPEG进行框架解码。从发行。。 也许这对于任何想了解MP4内部的人都可能有用。让我知道你们所有人的想法。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/hoveliasmmary192       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mswnqs/mp4_analyzer_cli_gui_for_inspecting_mp4_files/</guid>
      <pubDate>Sun, 17 Aug 2025 17:16:36 GMT</pubDate>
    </item>
    </channel>
</rss>