<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Wed, 08 Oct 2025 09:18:13 GMT</lastBuildDate>
    <item>
      <title>Tsoding，野牛和可能的替代品</title>
      <link>https://www.reddit.com/r/programming/comments/1o15f77/tsoding_bison_and_possible_alternatives/</link>
      <description><![CDATA[于是，编程影响者Tsoding（我时不时地看他）制作了一个关于Yacc、Bison和其他解析工具的视频。这显然是他的系列的一部分，他在其中探讨了神秘且过时的 GNU 内容。要么做出替代方案，要么取笑它，或者两者兼而有之。 事情是这样的......当我学习语言理论时，他们使用 Bison 给我们提供了“现实生活”的语言。正在使用的语法示例...它仍然是我至今使用的工具。现在我开始担心我可能正在使用过时的工具，并且我需要探索更好的替代方案。 我还有一些方法来完成视频，但从我到目前为止所看到的来看，Tsoding 没有引用任何更好或更现代的方法来解析代码。这促使我发布此内容... 您日常使用什么来编写语法/解析代码？您在 C/Cpp 中使用什么？ Python 呢？   由   提交/u/Nac_oh  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o15f77/tsoding_bison_and_possible_alternatives/</guid>
      <pubDate>Wed, 08 Oct 2025 09:04:09 GMT</pubDate>
    </item>
    <item>
      <title>使用 Tauri 构建可视化 Docker 数据库管理器</title>
      <link>https://www.reddit.com/r/programming/comments/1o1398z/built_a_visual_docker_database_manager_with_tauri/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  嘿👋-solo dev。 Just launched Docker DB Manager, a desktop app built with Tauri v2 and React. The problem: Managing database containers across projects got tedious—constantly checking available ports, recreating containers to change settings, and hunting for passwords across .env files and notes. What it does:  Create and manage containers without terminal commands Detects port conflicts before creating containers Edit configuration (ports, names) without manual recreation Generates ready-to-copy connection strings Syncs with Docker Desktop in real-time  Currently supports PostgreSQL, MySQL, redis和mongodb（更多数据库来了）。 是开源，我很喜欢您的反馈：  github：  https://github.com/abians/docker-db-manager    可用于MacOS（Apple Silicon + Intel）。 Windows和Linux即将推出。 很高兴回答有关架构或实施的问题！ 🚀  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/zukonsio     &lt;a href =“ https://www.reddit.com/r/programming/comments/1o1398z/built_a_a_visual_visual_database_database_manager_with_with_with_with_with_with_with_tauri/”]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o1398z/built_a_visual_docker_database_manager_with_tauri/</guid>
      <pubDate>Wed, 08 Oct 2025 06:42:45 GMT</pubDate>
    </item>
    <item>
      <title>2025年学习的20个最难至最简单的编程语言排名|比兹米亚</title>
      <link>https://www.reddit.com/r/programming/comments/1o12xcz/20_hardest_to_easiest_rankings_of_programming/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;    20最难的编程语言供开发人员在2025年学习。   &lt;！ -  sc_on-&gt;提交由＆＃32; /u/waozen      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o12xcz/20_hardest_to_easiest_rankings_of_programming/</guid>
      <pubDate>Wed, 08 Oct 2025 06:22:27 GMT</pubDate>
    </item>
    <item>
      <title>CSS有42个单位</title>
      <link>https://www.reddit.com/r/programming/comments/1o12gps/css_has_42_units/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/harromeister      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o12gps/css_has_42_units/</guid>
      <pubDate>Wed, 08 Oct 2025 05:54:07 GMT</pubDate>
    </item>
    <item>
      <title>十年前的一堂课中的代码，因为统一不起作用（显然）</title>
      <link>https://www.reddit.com/r/programming/comments/1o126jj/code_from_a_lesson_a_decade_ago_for_unity_not/</link>
      <description><![CDATA[嘿伙计们，我想我正在学习 2014 年关于 Unity 的游戏开发课程？无论如何，这段代码的目的是增加 Skyplane - 材质四边形对象上的 x 偏移量。编译时没有错误，但它不会更改启动时的 x 偏移量。至少在剧本上，这个数字仍在增加。但材质不受影响。我使用的是unity 2022。代码有什么问题吗？另外，我并没有真正在 reddit 上发帖，而且我完全不知道发布此内容的 URL 要求是什么，lmao。我刚刚复制并粘贴了发布时所在的页面。 using UnityEngine; using System.Collections; public class TextureOffsetAnimator1 : MonoBehaviour { public Vector2 ScrollSpeeds = new Vector2(0.0f, 0.0f); public Renderer TargetRenderer = null; //Private Private Vector2 _offset = Vector2.zero; //创建MonoBehaviour后第一次执行Update之前调用一次 void Start() { if (TargetRenderer == null) { TargetRenderer = GetComponent(); } if (TargetRenderer != null) { _offset = TargetRenderer.material.GetTextureOffset(“_MainTex”); } } // 每帧调用一次更新 void Update() { if (!TargetRenderer) return; _offset += ScrollSpeeds * Time.deltaTime; TargetRenderer.material.SetTextureOffset(&quot;_MainTex&quot;, _offset); } }   由   提交/u/GRILL3DCHEESEBOB   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o126jj/code_from_a_lesson_a_decade_ago_for_unity_not/</guid>
      <pubDate>Wed, 08 Oct 2025 05:36:39 GMT</pubDate>
    </item>
    <item>
      <title>重建世界项目</title>
      <link>https://www.reddit.com/r/programming/comments/1o114bv/rebuild_the_world_project/</link>
      <description><![CDATA[ 一旦陷入死胡同，请从后退一些步骤开始  一个致力于当代信息技术（尤其是编程）退化趋势的新网站刚刚出现。 其中涵盖的大多数主题对于公众来说可能极具争议性，但是，在我看来，每个主题背后都有强有力的理由，它们不应该被简单地忽略。   由   提交/u/SureCoyote9650   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o114bv/rebuild_the_world_project/</guid>
      <pubDate>Wed, 08 Oct 2025 04:35:35 GMT</pubDate>
    </item>
    <item>
      <title>设计用于分支 AI 对话的 SDK（Python + TypeScript）</title>
      <link>https://www.reddit.com/r/programming/comments/1o110i0/designing_an_sdk_for_branching_ai_conversations/</link>
      <description><![CDATA[传统的 AI 聊天 API 是线性的 - 从头到尾都是一条消息链。 当我们开始尝试分支对话（任何消息都可以分叉到新路径）时，出现了很多有趣的技术问题。 一些更具挑战性的部分：  将分支表示为 图而不是列表，同时保持可查询性和轻量级。 有效维护上下文 - 决定分支是继承完整历史记录、部分历史记录还是重新开始（我们将这些上下文模式称为“完整/部分/无”）。 跨多个分支同时流式传输响应，而不会破坏顺序保证。 确保每个分支都有一个真正的 UUID（没有“主”占位符），以便合并和引用在以后保持一致。 处理令牌限制以及跨不同分支的使用情况跟踪。  最终结果是一个小型跨语言 SDK (Python + TypeScript)，它可以抽象出这些问题并公开简单的调用 比如 conversations.create()、branches.create()和messages.stream()。 我写了一篇简短的技术文章，解释了我们如何处理这些设计决策以及我们在构建它时学到了什么： https://afzal.xyz/rethinking-ai-conversations-why-branching-beats-线性-thinking-85ed5cfd97f5 很想听听其他人如何建模类似的分支或树结构对话系统 - 特别是在有效维护上下文或可视化对话图方面。   由   提交 /u/sleaktrade   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o110i0/designing_an_sdk_for_branching_ai_conversations/</guid>
      <pubDate>Wed, 08 Oct 2025 04:29:49 GMT</pubDate>
    </item>
    <item>
      <title>设计用于分支 AI 对话的 SDK（Python + TypeScript）</title>
      <link>https://www.reddit.com/r/programming/comments/1o10zkb/designing_an_sdk_for_branching_ai_conversations/</link>
      <description><![CDATA[传统的 AI 聊天 API 是线性的 - 从头到尾都是一条消息链。 当我们开始尝试分支对话（任何消息都可以分叉到新路径）时，出现了许多有趣的技术问题。 一些更具挑战性的部分：  将分支表示为图形而不是列表，同时保留它 可查询且轻量级。 高效维护上下文 - 决定分支是继承完整历史记录、部分历史记录还是重新开始（我们将这些上下文模式称为“完整”/“部分”/“无”）。 跨多个分支同时流式传输响应，而不破坏顺序保证。 确保每个分支都有一个真正的 UUID（无“主”占位符），以便合并和引用保持一致  跨不同分支处理令牌限制和使用情况跟踪。  最终结果是一个小型跨语言 SDK (Python + TypeScript)，它将这些问题抽象出来并公开简单的调用，例如conversations.create()、branches.create() 和 messages.stream()。 我写了一篇简短的技术文章 解释我们如何处理这些设计决策以及我们在构建过程中学到了什么： https://afzal.xyz/rethinking-ai-conversations-why-branching-beats-线性-thinking-85ed5cfd97f5 很想听听其他人如何建模类似的分支或树结构对话系统 - 特别是在有效维护上下文或可视化对话图方面。   由   提交 /u/sleaktrade   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o10zkb/designing_an_sdk_for_branching_ai_conversations/</guid>
      <pubDate>Wed, 08 Oct 2025 04:28:24 GMT</pubDate>
    </item>
    <item>
      <title>Chandler Carruth：铁锈和碳的内存安全无处不在 | RustConf 2025</title>
      <link>https://www.reddit.com/r/programming/comments/1o0vlzd/chandler_carruth_memory_safety_everywhere_with/</link>
      <description><![CDATA[ 由   提交/u/BlueGoliath  [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o0vlzd/chandler_carruth_memory_safety_everywhere_with/</guid>
      <pubDate>Wed, 08 Oct 2025 00:04:39 GMT</pubDate>
    </item>
    <item>
      <title>裸体检测、人工智能架构：我们如何在我的初创公司中解决它</title>
      <link>https://www.reddit.com/r/programming/comments/1o0v1mx/nudity_detection_ai_architecture_how_we_solved_it/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/trolleid     [link]   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o0v1mx/nudity_detection_ai_architecture_how_we_solved_it/</guid>
      <pubDate>Tue, 07 Oct 2025 23:39:38 GMT</pubDate>
    </item>
    <item>
      <title>可组合状态机：在 RTS 游戏中构建可扩展的单元行为</title>
      <link>https://www.reddit.com/r/programming/comments/1o0ukwq/composable_state_machines_building_scalable_unit/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/egregorameriki     [link]        [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o0ukwq/composable_state_machines_building_scalable_unit/</guid>
      <pubDate>Tue, 07 Oct 2025 23:19:11 GMT</pubDate>
    </item>
    <item>
      <title>解释人工智能决策树的童年游戏</title>
      <link>https://www.reddit.com/r/programming/comments/1o0t8ml/the_childhood_game_that_explains_ais_decision/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  工程师最近探索了经典棋盘游戏猜测谁是谁？揭示了AI决策树的基本逻辑。 在游戏中，玩家没有猜测 - 他们提出了提供最多信息的问题，直到只剩下一个剩下的可能性。这反映了机器学习中的决策树如何拆分数据：每个“问题”（功能）旨在减少不确定性并创建更清洁的分区。 该项目在游戏的是/否机制和预测性ML过程（例如功能选择和信息增益）之间划分了直接相似之处。就像玩家可能问的那样：“您的角色戴眼镜吗？”要删除一半的选择，模型可能会问：“血压高吗？”为了完善其分类。 通过使用怀旧的，视觉示例，工程师说明了如何理解简单游戏中的问题效率可以使AI模型如何学习以最小的步骤进行准确的预测。   &lt;！ -  sc_on--&gt; 32;&gt; 32;提交由＆＃32; /u/u/shift_devs     [link]   ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o0t8ml/the_childhood_game_that_explains_ais_decision/</guid>
      <pubDate>Tue, 07 Oct 2025 22:22:18 GMT</pubDate>
    </item>
    <item>
      <title>局部性和时空假设</title>
      <link>https://www.reddit.com/r/programming/comments/1o0ov3x/locality_and_temporalspatial_hypothesis/</link>
      <description><![CDATA[ 由   提交/u/ketralnis  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o0ov3x/locality_and_temporalspatial_hypothesis/</guid>
      <pubDate>Tue, 07 Oct 2025 19:36:58 GMT</pubDate>
    </item>
    <item>
      <title>创始人的盲点杀死了初创企业</title>
      <link>https://www.reddit.com/r/programming/comments/1o0olp1/the_founders_blind_spot_that_kills_startups/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  大多数初创公司失败了，因为非技术创始人失去了产品的技术现实。了解“创始人的盲点”如何不受管理的技术债务导致灾难性失败。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/gamunu      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o0olp1/the_founders_blind_spot_that_kills_startups/</guid>
      <pubDate>Tue, 07 Oct 2025 19:27:12 GMT</pubDate>
    </item>
    <item>
      <title>打字稿就像c＃</title>
      <link>https://www.reddit.com/r/programming/comments/1o0m43p/typescript_is_like_c/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/ketralnis      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o0m43p/typescript_is_like_c/</guid>
      <pubDate>Tue, 07 Oct 2025 17:58:26 GMT</pubDate>
    </item>
    </channel>
</rss>