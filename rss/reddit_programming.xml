<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Mon, 11 Aug 2025 01:24:01 GMT</lastBuildDate>
    <item>
      <title>转换网络安全：Kintsugi Paradox-Loop验证码系统</title>
      <link>https://www.reddit.com/r/programming/comments/1mmy4im/transforming_cybersecurity_the_kintsugi/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  ＃转换网络安全：Kintsugi Paradox-Loop Captcha Captcha System  大多数码头都会使真实的用户感到沮丧，并且几乎不会减慢现代机器人。如果验证可能是直观，美丽和协作的，该怎么办？   kintsugi悖论 - 环验证码系统是一个开源项目，可以重新构想安全性：机器人被困在递归悖论循环中，而人类经历了创造性的哲学挑战。 Each attack is transformed into digital art, inspired by the Japanese philosophy of Kintsugi—repairing cracks with gold to create something stronger and more beautiful. Highlights: - Quantum paradox puzzles challenge bots, not humans - Every interaction generates community art - No tracking, no tedious image puzzles - Open邀请艺术家，哲学家和开发商贡献 体验悖论，加入革命，并帮助我们建立越来越强大和更美丽的安全性。提交由＆＃32; /u/u/u/fearless_issue4846       [commist]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mmy4im/transforming_cybersecurity_the_kintsugi/</guid>
      <pubDate>Sun, 10 Aug 2025 23:59:27 GMT</pubDate>
    </item>
    <item>
      <title>美容内容管道 - 自动社交媒体内容收集器</title>
      <link>https://www.reddit.com/r/programming/comments/1mmxme5/beauty_content_pipeline_automated_social_media/</link>
      <description><![CDATA[]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mmxme5/beauty_content_pipeline_automated_social_media/</guid>
      <pubDate>Sun, 10 Aug 2025 23:35:54 GMT</pubDate>
    </item>
    <item>
      <title>git责备认知偏见 - 修补大脑的默认决策分支</title>
      <link>https://www.reddit.com/r/programming/comments/1mmvhn2/git_blame_cognitive_biases_patching_your_brains/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/perpectiveship       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mmvhn2/git_blame_cognitive_biases_patching_your_brains/</guid>
      <pubDate>Sun, 10 Aug 2025 22:01:47 GMT</pubDate>
    </item>
    <item>
      <title>Secretshare：轻松，安全一次秘密共享CLI [OPENSOURCE]</title>
      <link>https://www.reddit.com/r/programming/comments/1mmug32/secretshare_easy_secure_one_time_secret_sharing/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我最近不得不分享大量的API键，而且似乎野性没有一种简单的黑客友好方式来执行此操作。我构建了一个易于使用的CLI来共享秘密，整个过程大约需要15秒钟：  接收者运行Secret_Share，它会生成一个一次性的公共密钥，它们可以发送给发送者 发件人运行secret_shred_share，在接收方的eversiver中，他们可以从接收者那里播放  它是开源。没有服务器。它使用非常标准/无聊/安全加密（RSA-OAEP和AES-GCM）。私钥永远不会写给磁盘，并且一旦有效载荷解码（每次新键）就会从内存中驱逐。它对CLI的用户友好（清晰的消息，剪贴板集成）。您可以使用任何聊天工具，因为通信渠道永远不会看到私钥。唯一的依赖项是Google维护的GO软件包（术语和系统）。它很简单（您可以在大约5分钟内阅读整个代码库）。  github： https：//github.com/scosman/scosman/secman/secret_share_share  sc_on-&gt;＆＃32;提交由＆＃32; /u/davernow       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mmug32/secretshare_easy_secure_one_time_secret_sharing/</guid>
      <pubDate>Sun, 10 Aug 2025 21:18:26 GMT</pubDate>
    </item>
    <item>
      <title>Zig的可爱语法</title>
      <link>https://www.reddit.com/r/programming/comments/1mmtcfv/zigs_lovely_syntax/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/steveklabnik1     [link]  ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mmtcfv/zigs_lovely_syntax/</guid>
      <pubDate>Sun, 10 Aug 2025 20:34:24 GMT</pubDate>
    </item>
    <item>
      <title>如何提出对代码库的有影响力的改进并拥有实施</title>
      <link>https://www.reddit.com/r/programming/comments/1mmrk79/how_to_propose_an_impactful_improvement_to_the/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/gregorojstersek      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mmrk79/how_to_propose_an_impactful_improvement_to_the/</guid>
      <pubDate>Sun, 10 Aug 2025 19:24:56 GMT</pubDate>
    </item>
    <item>
      <title>从害羞的工程师到甲骨文的导演，以及熟练的沟通者</title>
      <link>https://www.reddit.com/r/programming/comments/1mmrjmd/from_shy_engineer_to_director_at_oracle_and_a/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/u/gregorojstersek      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mmrjmd/from_shy_engineer_to_director_at_oracle_and_a/</guid>
      <pubDate>Sun, 10 Aug 2025 19:24:22 GMT</pubDate>
    </item>
    <item>
      <title>偷偷摸摸地提交</title>
      <link>https://www.reddit.com/r/programming/comments/1mmq9en/sneaky_git_commits/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/tavianator      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mmq9en/sneaky_git_commits/</guid>
      <pubDate>Sun, 10 Aug 2025 18:35:30 GMT</pubDate>
    </item>
    <item>
      <title>大规模负载平衡：隐藏的挑战和经验教训</title>
      <link>https://www.reddit.com/r/programming/comments/1mmo3d0/load_balancing_at_scale_hidden_challenges_and/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  负载平衡似乎很简单，直到您在动态环境中以大规模运行。 在大型系统中，无论是Kubernetes，Cansure Erchingeration，还是传统的服务部署，上游服务器都在不断变化。 Workloads vary in complexity, requests can be uneven, and simple algorithms like round-robin often break down. This post looks at the real-world issues that show up in production: • Traffic imbalance during host rotation • Cold-start spikes when new instances join • How different algorithms (least connections, power-of-two-choices, consistent hashing) behave under stress • The impact of proxy architecture （Envoy vs Haproxy）关于负载分配精度 它是基于从高流量环境中的操作反向代理中学到的经验教训，以及公平，效率和弹性之间的权衡。  href =“ https://startwithawhy.com/reverseproxy/2025/08/08/reverseproxy-deep-deep-dive-part4.html”&gt; https://startwithhy.com/reverseproxy/2025/2025/08/08/08/08/08/reverseproxy-deep-deep-dive-part4.hhh.hhh.hhhh.hhhhh.hhhhhhh.hhhhhhhhhh.hhhhhhhh pret 要听到他人如何在自己的系统中解决这些挑战。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/miggyishu      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mmo3d0/load_balancing_at_scale_hidden_challenges_and/</guid>
      <pubDate>Sun, 10 Aug 2025 17:12:01 GMT</pubDate>
    </item>
    <item>
      <title>招聘很烂：工程师对雇用的看法</title>
      <link>https://www.reddit.com/r/programming/comments/1mmmwy8/hiring_sucks_an_engineers_perspective_on_hiring/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  可以在当天改善招聘？  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/skybar-one       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mmmwy8/hiring_sucks_an_engineers_perspective_on_hiring/</guid>
      <pubDate>Sun, 10 Aug 2025 16:26:23 GMT</pubDate>
    </item>
    <item>
      <title>构建REDIS克隆 - 第2.0部分：将单个节点变成分布式群集</title>
      <link>https://www.reddit.com/r/programming/comments/1mmmtyo/building_a_redis_clone_part_20_turning_a_single/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/sushant098123     [link]   ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mmmtyo/building_a_redis_clone_part_20_turning_a_single/</guid>
      <pubDate>Sun, 10 Aug 2025 16:23:12 GMT</pubDate>
    </item>
    <item>
      <title>Ngrok  - 您的Local主持人的护照</title>
      <link>https://www.reddit.com/r/programming/comments/1mml8pf/ngrok_your_localhosts_passport_to_the_internet/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  如果您曾经想分享本地应用程序，远程测试API或在不部署的情况下运行实时Websocket演示-Ngrok是Lifesaver。设置ngrok  创建安全http＆amp; HTTPS隧道 实时应用程序的WebSocket隧道  API测试从任何地方 交通检查＆amp; debugging tools  No matter if you’re working in Node.js, Python, or any other stack, ngrok can turn your localhost into a secure public URL in seconds. 🎥 Watch here: Ngrok - Your Localhost’s Passport到Internet   很想听听您使用的Ngrok技巧或您使用的任何创造性方法！  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/azad_11014       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mml8pf/ngrok_your_localhosts_passport_to_the_internet/</guid>
      <pubDate>Sun, 10 Aug 2025 15:20:23 GMT</pubDate>
    </item>
    <item>
      <title>ELI5对帽定理的解释。</title>
      <link>https://www.reddit.com/r/programming/comments/1mml4x2/eli5_explanation_of_the_cap_theorem/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/trolleid     [link]   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mml4x2/eli5_explanation_of_the_cap_theorem/</guid>
      <pubDate>Sun, 10 Aug 2025 15:16:05 GMT</pubDate>
    </item>
    <item>
      <title>系统设计中的势力：完整示例</title>
      <link>https://www.reddit.com/r/programming/comments/1mmkzqa/idempotency_in_system_design_full_example/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/trolleid     [link]   ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mmkzqa/idempotency_in_system_design_full_example/</guid>
      <pubDate>Sun, 10 Aug 2025 15:10:12 GMT</pubDate>
    </item>
    <item>
      <title>非程序员解决编程问题的解决方案。</title>
      <link>https://www.reddit.com/r/programming/comments/1mmkarz/nonprogrammers_solutions_to_programming_problems/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/nsredditshitposter     [link]   ＆＃32;   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mmkarz/nonprogrammers_solutions_to_programming_problems/</guid>
      <pubDate>Sun, 10 Aug 2025 14:41:13 GMT</pubDate>
    </item>
    </channel>
</rss>