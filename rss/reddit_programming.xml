<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Fri, 10 Oct 2025 03:32:07 GMT</lastBuildDate>
    <item>
      <title>开发的未来：每个项目只允许一名开发人员。</title>
      <link>https://www.reddit.com/r/programming/comments/1o2p4wq/the_future_of_development_only_one_developer/</link>
      <description><![CDATA[ 由   提交/u/grauenwolf   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2p4wq/the_future_of_development_only_one_developer/</guid>
      <pubDate>Fri, 10 Oct 2025 02:32:24 GMT</pubDate>
    </item>
    <item>
      <title>我们是在培养创新还是技术债务？</title>
      <link>https://www.reddit.com/r/programming/comments/1o2p4l6/are_we_cultivating_innovation_or_technical_debt/</link>
      <description><![CDATA[人工智能和编程工具加速了软件开发，但代码可维护性和团队协作付出了怎样的代价？分享有关人工智能生成的代码如何引入技术债务的实用见解。在这里阅读我的深入分析：https://www.linkedin.com/feed/update/urn:li:activity:7381534536892878848/ 完整文章 可在媒体上使用： https://medium.com/@techiewissen/are-we-cultivating-innovation-or-technical-debt-019b6a0e6e1d   由   提交 /u/Responsible_Lynx_712   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2p4l6/are_we_cultivating_innovation_or_technical_debt/</guid>
      <pubDate>Fri, 10 Oct 2025 02:31:57 GMT</pubDate>
    </item>
    <item>
      <title>GitHub 最佳实践：每次编辑文件时，将其提交到 main</title>
      <link>https://www.reddit.com/r/programming/comments/1o2ovoa/github_best_practice_every_time_you_edit_a_file/</link>
      <description><![CDATA[ 由   提交/u/grauenwolf   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2ovoa/github_best_practice_every_time_you_edit_a_file/</guid>
      <pubDate>Fri, 10 Oct 2025 02:19:44 GMT</pubDate>
    </item>
    <item>
      <title>编写正则表达式是纯粹的乐趣。否则你无法说服我。</title>
      <link>https://www.reddit.com/r/programming/comments/1o2o6ew/writing_regex_is_pure_joy_you_cant_convince_me/</link>
      <description><![CDATA[ 由   提交 /u/ZoneZealousideal4073   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2o6ew/writing_regex_is_pure_joy_you_cant_convince_me/</guid>
      <pubDate>Fri, 10 Oct 2025 01:46:30 GMT</pubDate>
    </item>
    <item>
      <title>用于提高 Copilot 一致性的 copilot-instructions.md 样板</title>
      <link>https://www.reddit.com/r/programming/comments/1o2nvpx/a_boilerplate_for_copilotinstructionsmd_to/</link>
      <description><![CDATA[我已经为 copilot-instructions.md 创建了一个带有样板的 Github 要点，以帮助执行编码标准并提高 Visual Studio Code 中 Copilot 输出的一致性。 请查看并告诉我您的想法： https://gist.github.com/h8rt3rmin8r/34ccd047866c98715c14ca3ab80a82e4 欢迎贡献，因为这很大程度上是一项正在进行的工作。具体来说，与 Python 环境和 Powershell 陷阱相关的额外提示会很有用。   由   提交 /u/h8rt3rmin8r   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2nvpx/a_boilerplate_for_copilotinstructionsmd_to/</guid>
      <pubDate>Fri, 10 Oct 2025 01:31:54 GMT</pubDate>
    </item>
    <item>
      <title>消费类硬件上的万亿级哥德巴赫验证 - 新的开源 C# 算法</title>
      <link>https://www.reddit.com/r/programming/comments/1o2nsin/trillionscale_goldbach_verification_on_consumer/</link>
      <description><![CDATA[我一直在研究一种高效且新颖的经验哥德巴赫验证方法，通过使用固定的“齿轮”将每个偶数的工作量减少到 O(1)。小素数作为见证人。我没有检查每个偶数 n 的许多可能的素数对，而是只测试 n-q 是否是一个小固定集合（前 300 个素数）中 q 的素数。 关键结果： - K=300 至 10^10 的 100% 覆盖率 - &gt;万亿规模的 99.99999% 覆盖率 - 在消费类硬件上运行 （24 线程工作站） - 两种执行模式：分段筛和确定性 Miller-Rabin 它非常有效，我希望看到它在更强大的硬件上运行。 论文（Zenodo）：https://zenodo.org/records/17308646 开源实现 (C#/.NET)：https://github.com/joshkartz/Fixed-Gear-Goldbach-Engine 它是免费且开源的。检查一下，随意下载、本地运行或进行改进！   由   提交/u/joshk_art   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2nsin/trillionscale_goldbach_verification_on_consumer/</guid>
      <pubDate>Fri, 10 Oct 2025 01:27:33 GMT</pubDate>
    </item>
    <item>
      <title>你们对 Java 的深度嵌套类有何看法</title>
      <link>https://www.reddit.com/r/programming/comments/1o2nib1/what_do_yall_think_about_javas_deeply_nested/</link>
      <description><![CDATA[该视频深入探讨了 Maven 和 gradle 如何以一种非常古老的方式构建项目。   由   提交/u/sunnykentz  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2nib1/what_do_yall_think_about_javas_deeply_nested/</guid>
      <pubDate>Fri, 10 Oct 2025 01:13:40 GMT</pubDate>
    </item>
    <item>
      <title>看到她隐形的后门..</title>
      <link>https://www.reddit.com/r/programming/comments/1o2ng07/see_her_invisible_back_door/</link>
      <description><![CDATA[ 由   提交 /u/rand0mmm   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2ng07/see_her_invisible_back_door/</guid>
      <pubDate>Fri, 10 Oct 2025 01:10:34 GMT</pubDate>
    </item>
    <item>
      <title>Streamtario（测试版）：一个受 Stremio 启发的现代开源媒体流平台。</title>
      <link>https://www.reddit.com/r/programming/comments/1o2mytm/streamtario_beta_a_modern_opensource_stremio/</link>
      <description><![CDATA[很高兴能分享一个我已经从事了一段时间的项目，我称之为 Streamtario。这是一个受 Stremio 启发的流媒体应用程序，但从头开始重建，仍在开发中，还有很多工作要做，每个角落都有错误，如果有人感兴趣，我希望得到一些帮助，而且我还没有发布安装程序/打包版本。 一些关键功能包括：  插件系统： 插件解析与官方和社区 Stremio 的兼容性 插件。 搜索：在所有安装的插件中搜索内容。 流媒体：由自定义 torrent 客户端提供支持的强大后端，用于实时流媒体。 高性能桌面客户端：使用 C++ 主机和嵌入式 MPV 播放器提供本机桌面体验。 个人资料：创建受 pin 保护的个人资料并轻松管理它们。 历史记录：跟踪您观看的内容并从上次中断的位置继续播放 更多详细信息，请访问 GitHub   整个平台采用微服务方法构建，提供帐户管理、插件控制、身份验证和流媒体服务，所有服务都通过 REST API、联合 GraphQL 网关和 Redis 事件总线进行通信。 正如我之前所说，我仍在积极开发它，但核心功能很稳定。我很想得到您的反馈！   由   提交 /u/DrIsLightInDarkness   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2mytm/streamtario_beta_a_modern_opensource_stremio/</guid>
      <pubDate>Fri, 10 Oct 2025 00:48:06 GMT</pubDate>
    </item>
    <item>
      <title>查找 VS Code 内存泄漏</title>
      <link>https://www.reddit.com/r/programming/comments/1o2lkpd/finding_a_vs_code_memory_leak/</link>
      <description><![CDATA[ 由   提交/u/wheybags  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2lkpd/finding_a_vs_code_memory_leak/</guid>
      <pubDate>Thu, 09 Oct 2025 23:42:17 GMT</pubDate>
    </item>
    <item>
      <title>您构建了一个人工智能代理 - 但您如何定价？</title>
      <link>https://www.reddit.com/r/programming/comments/1o2lek9/you_built_an_ai_agent_but_how_do_you_price_it/</link>
      <description><![CDATA[您终于构建了 AI 代理。它编写代码、起草电子邮件，甚至可能自行运行任务。它功能强大、实用，并且随时可以发布。但现实却是：你如何为这样的东西定价？   由   提交 /u/shift_devs   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2lek9/you_built_an_ai_agent_but_how_do_you_price_it/</guid>
      <pubDate>Thu, 09 Oct 2025 23:34:24 GMT</pubDate>
    </item>
    <item>
      <title>具有 3,200 多个引用的存储库：5 秒 → <0.1 秒（快 100 倍）</title>
      <link>https://www.reddit.com/r/programming/comments/1o2l3rl/repos_with_3200_refs_5s_01s_100x_faster/</link>
      <description><![CDATA[GitKraken Desktop 11.5 在最重要的地方实现了巨大的性能改进，打开存储库的速度提高了 5 倍，存储刷新速度提高了 100 倍，分支/标签加载速度提高了 100 倍。无需更改工作流程。只是明显更快的 Git 操作，让您恢复时间和流程。   由   提交 /u/GitKraken   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2l3rl/repos_with_3200_refs_5s_01s_100x_faster/</guid>
      <pubDate>Thu, 09 Oct 2025 23:20:38 GMT</pubDate>
    </item>
    <item>
      <title>在无服务器上构建弹性 AI 代理 |重申</title>
      <link>https://www.reddit.com/r/programming/comments/1o2hcar/building_resilient_ai_agents_on_serverless_restate/</link>
      <description><![CDATA[无服务器平台（Lambda、Vercel、Cloudflare Workers）似乎非常适合 AI 代理 — 自动扩展、按使用付费、无需基础设施。直到您的代理需要等待某些事情。 您的代理在采取行动之前需要人工批准。现在怎么办？  保持 Lambda 运行吗？ → 您将达到 15 分钟的暂停时间。还有$$$。 将状态保存到数据库并稍后恢复？ → 恭喜，您现在正在构建一个具有队列、状态管理和协调逻辑的分布式系统。 使用传统的工作流编排器？ → 告别无服务器。现在您正在管理工作线程基础设施。  这些都不是好的答案。 这篇博文介绍了持久执行作为解决方案。想法：在日志中记录代理采取的每一步（LLM 调用、API 请求、工具执行）。当您的函数需要等待或崩溃时，它不会重新开始 - 它会重播日志并从中断处继续。 Restate 将工作推送到无服务器函数，而不是要求工作人员拉取任务。您的代理保持真正的无服务器状态，同时获得：  崩溃时的持久性（永远不会丢失进度） 等待时扩展到零（无空闲成本） 用于调试的实时执行时间表 安全版本控制（正在进行的工作在部署时永远不会中断）  这篇文章包括与 Vercel AI SDK 集成的代码示例，以及 OpenAI 代理。针对实际生产问题的非常优雅的解决方案。 如果您正在构建需要在现实世界中生存的代理，那么值得一读。   由   提交 /u/stsffap   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2hcar/building_resilient_ai_agents_on_serverless_restate/</guid>
      <pubDate>Thu, 09 Oct 2025 20:44:20 GMT</pubDate>
    </item>
    <item>
      <title>Cloudflare 刚刚解决了 mcps，我用基准测试了它，它是合法的</title>
      <link>https://www.reddit.com/r/programming/comments/1o2ge3m/cloudflare_just_solved_mcps_i_tested_it_with/</link>
      <description><![CDATA[我为 Python 创建了基准测试和代码模式沙箱环境。结果非常令人难以置信。 10 次工具调用迭代变成一次迭代。在某些情况下节省超过 50% 的代币。  原始文章 https://blog.cloudflare.com/code-mode/ 我真的认为这改变了“工具调用和 mcps”的游戏规则 注意，我用 Python 编写了这篇文章作为测试，但这可以用任何语言完成，并且 高度适用于所有llm编程开发   由   提交/u/Crafty_Disk_7026   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2ge3m/cloudflare_just_solved_mcps_i_tested_it_with/</guid>
      <pubDate>Thu, 09 Oct 2025 20:08:19 GMT</pubDate>
    </item>
    <item>
      <title>这是我见过的关于人工智能编程主题的最合理的视频之一</title>
      <link>https://www.reddit.com/r/programming/comments/1o2g3ee/this_is_one_of_the_most_reasonable_videos_ive/</link>
      <description><![CDATA[ 由   提交/u/mahdi_lky   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2g3ee/this_is_one_of_the_most_reasonable_videos_ive/</guid>
      <pubDate>Thu, 09 Oct 2025 19:57:05 GMT</pubDate>
    </item>
    </channel>
</rss>