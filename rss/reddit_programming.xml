<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Thu, 02 Oct 2025 12:30:45 GMT</lastBuildDate>
    <item>
      <title>Kubernetes编排不仅仅是一袋YAML</title>
      <link>https://www.reddit.com/r/programming/comments/1nw25v6/kubernetes_orchestration_is_more_than_a_bag_of/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/davidmdm      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nw25v6/kubernetes_orchestration_is_more_than_a_bag_of/</guid>
      <pubDate>Thu, 02 Oct 2025 12:17:46 GMT</pubDate>
    </item>
    <item>
      <title>每个API开发人员都应该了解的九个HTTP边缘案例</title>
      <link>https://www.reddit.com/r/programming/comments/1nw1yhf/nine_http_edge_cases_every_api_developer_should/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/ludovicianul      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nw1yhf/nine_http_edge_cases_every_api_developer_should/</guid>
      <pubDate>Thu, 02 Oct 2025 12:07:51 GMT</pubDate>
    </item>
    <item>
      <title>了解GO中的对象池设计模式：实用指南</title>
      <link>https://www.reddit.com/r/programming/comments/1nw1vf8/understanding_the_object_pool_design_pattern_in/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  🚀刚刚发布了对象池设计模式的深入研究 - 示例！ 对象池是那些被低估的模式之一，当您使用昂贵到昂贵的资源（如DB连接，baster of for-profers of Contractions of Cornection for-profers of Cression）时，可以极大地提高性能。 模式实际解决的问题（以及为何重要）   懒惰与渴望初始化所解释的 使用Golang内置的Sync.pool有效地使用 有效地使用IT   ＆amp;并发注意事项（带代码段）  如果您曾经想知道为什么GO的数据库/SQL在负载下如此有效 - 这是因为在引擎盖下汇总！    👉 href =“ https://medium.com/design-bootcamp/understanding-the-the-boot-pool-design-pattern-pattern-in-go-a-co-a-partical-guide-6eb9715db014”&gt; https://medium.com/design-bootcamp/understanding-the-boot-pool-design-pattern-pattern-in-go-a-po-a-practical-guide-6eb9715db014   会喜欢社区的反馈。您是否在GO项目中使用过对象池，或者您喜欢依靠GC并让其处理分配？  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/priyankchheda15     [link]    32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nw1vf8/understanding_the_object_pool_design_pattern_in/</guid>
      <pubDate>Thu, 02 Oct 2025 12:03:47 GMT</pubDate>
    </item>
    <item>
      <title>这是AGI在编程中首次出现的方式吗？</title>
      <link>https://www.reddit.com/r/programming/comments/1nw1s1o/is_this_how_agi_first_shows_up_in_programming/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/santosh_arron       [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nw1s1o/is_this_how_agi_first_shows_up_in_programming/</guid>
      <pubDate>Thu, 02 Oct 2025 11:59:23 GMT</pubDate>
    </item>
    <item>
      <title>＃关于在JavaScript与其他语言中提升的问题</title>
      <link>https://www.reddit.com/r/programming/comments/1nw1aon/a_question_on_hoisting_in_javascript_vs_other/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  链接（在）帖子中有一个很好的解释！一个问题 - 为什么“提升”在JavaScript中，与其他语言不同？ 在诸如Java，Python等语言中的如此特殊的话题，只需要记住两个直接规则中的任何一个之一 - “您在定义它之前无法调用函数”。或＆quot“在您的代码中定义程序中的何处都没有关系。对于变量，它始终是“您不能在声明变量之前使用变量”。如果您声明该变量但不提供值，则将与“&#39; ”提供默认值/未定义的值。提交由＆＃32; /u/fossterer   href =“ https://www.linkedin.com/posts/iamryanyu_frontend-javascript-hoisting-737910419378868224-- ge9？ut m_source = share＆amp; utm_medium = member_android＆amp; rcm = acoaaAmowsgb06Kllb4dtavywct68nn7rutahvzg“&gt; [link]    ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nw1aon/a_question_on_hoisting_in_javascript_vs_other/</guid>
      <pubDate>Thu, 02 Oct 2025 11:34:41 GMT</pubDate>
    </item>
    <item>
      <title>没有评论，但是代码中的摘要呢？</title>
      <link>https://www.reddit.com/r/programming/comments/1nw11gw/no_comments_but_what_about_summaries_in_code/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我正在观看YouTube视频，内容涉及您应该编写两年前创建的毫无意外代码的原因，但是我有一个问题可以使用一些专业知识。在Visual Studio中使用C ++或C＃等语言的摘要呢？摘要更适合IntelliSense，可以说我正在编写您将来必须使用的库。我没有发表评论，但我只是添加摘要，代码应该说明自己。但是，当您必须调用功能时，您是否想查看函数/方法的摘要？我们需要提供什么参数以及原因。完成后返回了什么？我只想伸出援手，看看您的最佳体验  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/standard_apple7147      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nw11gw/no_comments_but_what_about_summaries_in_code/</guid>
      <pubDate>Thu, 02 Oct 2025 11:21:10 GMT</pubDate>
    </item>
    <item>
      <title>数据工程中有趣的链接 -  2025年9月</title>
      <link>https://www.reddit.com/r/programming/comments/1nw0wq8/interesting_links_in_data_engineering_september/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/rmoff     link&gt; link&gt; link&gt;      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nw0wq8/interesting_links_in_data_engineering_september/</guid>
      <pubDate>Thu, 02 Oct 2025 11:14:19 GMT</pubDate>
    </item>
    <item>
      <title>在Erlang的99.9999％正常运行时间背后的架构</title>
      <link>https://www.reddit.com/r/programming/comments/1nvzaas/the_architecture_behind_999999_uptime_in_erlang/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;   诸如Discord和WhatsApp之类的应用程序如何处理数百万的并发用户，而其他一些人则仅在几千中挣扎，这真是令人印象深刻。今天，我们将探讨Erlang如何在保持系统生存和稳定的同时如何处理大量的工作量。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/ubarber9673     [link]  ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nvzaas/the_architecture_behind_999999_uptime_in_erlang/</guid>
      <pubDate>Thu, 02 Oct 2025 09:39:54 GMT</pubDate>
    </item>
    <item>
      <title>编码更快10×。验证没有。谁在使用生产跟踪重播来缩小差距？</title>
      <link>https://www.reddit.com/r/programming/comments/1nvyuu5/coding_got_10_faster_validation_didnt_whos_using/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  在去年我们的产生代码跳跃的能力（AI助手，Codegen等），但我们的 repares cadence 却没有。瓶颈从编写代码转变为验证行为。 经典答案 - “只需写更多的测试”  - 开始感觉像是用更多的火焰打火：更多的固定装置，更多的固定装置，更多的模拟，更多的INFRA，更多的片状，更多的片状，并且仍然错过了合同的合同。 Capture real interactions in prod (HTTP in/out, DB queries, queues) with strict PII scrubbing. Curate a small “golden path” set of traces that covers the highest-value flows. Replay those traces in CI against fresh builds and diff only外部可观察的行为（状态代码，有效载荷形状，关键字段，定时信封）。 进行重播确定性（冻结时间/ids/ids/dandans; stub nost; stub nonderminisism        对我们有用的是   捕获了无声的API/合同回归，有时会错过单位/集成套件。 更少的薄片与基于重型模拟的测试。 更快地“ go/no-go go/no-go go go/no-go”在关键路径上进行。 新功能在锻炼之前才涵盖。 多步/状态流需要仔细缝制。  Golden Sets漂移； curation is ongoing work. Privacy/compliance engineering is non-optional.  Questions for folks who’ve tried similar:  How do you select traces (top-N endpoints, error-prone flows, revenue paths, statistical sampling)? Tips to keep the golden set新鲜不爆炸存储？ 您的比较有多严格 - 行为差异与字节字节？ 您喜欢的任何工具模式（捕获/重播，pii擦洗），oss或homegrown？ 提交由＆＃32; /u/u/u/wide-chocaly-763     [link&gt; [link]   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nvyuu5/coding_got_10_faster_validation_didnt_whos_using/</guid>
      <pubDate>Thu, 02 Oct 2025 09:11:57 GMT</pubDate>
    </item>
    <item>
      <title>直到编程成瘾是真实的</title>
      <link>https://www.reddit.com/r/programming/comments/1nvyqrz/til_that_programming_addiction_is_real/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/head_sundae7767      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nvyqrz/til_that_programming_addiction_is_real/</guid>
      <pubDate>Thu, 02 Oct 2025 09:04:49 GMT</pubDate>
    </item>
    <item>
      <title>与Valhalla #jvmls的Kotlin中更好的不变性</title>
      <link>https://www.reddit.com/r/programming/comments/1nvyhgr/better_immutability_in_kotlin_with_valhalla_jvmls/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/bluegoliach      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nvyhgr/better_immutability_in_kotlin_with_valhalla_jvmls/</guid>
      <pubDate>Thu, 02 Oct 2025 08:48:30 GMT</pubDate>
    </item>
    <item>
      <title>关于多线程渲染的故事| Pixieditor九月状态</title>
      <link>https://www.reddit.com/r/programming/comments/1nvyd1u/a_story_about_multithreaded_rendering_pixieditor/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/flabbet      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nvyd1u/a_story_about_multithreaded_rendering_pixieditor/</guid>
      <pubDate>Thu, 02 Oct 2025 08:40:33 GMT</pubDate>
    </item>
    <item>
      <title>我如何开始编程</title>
      <link>https://www.reddit.com/r/programming/comments/1nvy19a/how_i_started_programming/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;   ngl我18岁时约会了22岁，以为我是狗屎。就像，一个年长的女孩选择了 me ？巨大的W.我非常渴望她的验证，我忽略了所有的危险信号。然后我发现她被骗了。这并不伤心，它打断了我的大脑。它证实了我的每一个不安全感。我还不够。我甚至相信她很愚蠢。它解锁了一些我什至不知道我有过的深层妈妈问题，总是追逐那些觉得“家”的女孩但实际上只是混乱的。多年来，我对自己的人际关系感到如此无能为力。总是开始比赛是一个低点。直到我意识到世界是否会发挥肮脏为止，我需要学习游戏的规则。更好的是，我需要构建自己的作弊代码。 所以我开始编码。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/extract_trainer_1697         [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nvy19a/how_i_started_programming/</guid>
      <pubDate>Thu, 02 Oct 2025 08:19:19 GMT</pubDate>
    </item>
    <item>
      <title>AI正在开发人员劳动力中造成沉默的危机</title>
      <link>https://www.reddit.com/r/programming/comments/1nvxty1/ai_is_creating_a_silent_crisis_in_the_developer/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  毫无否认的是，像副铜和chatgpt这样的AI已成为开发人员的生产力火箭助推器。它可以将30分钟的样板任务变成30秒的提示。但是，当我将这些工具更深入地集成到工作流程中时，我看到了一个有关副作用的信息：我们默默地创建了一个两层的系统。 在一侧，新一波的开发人员对AI的高度倾斜，潜在的运输代码，他们不了解他们不了解。另一方面，拒绝这些工具的经验丰富的开发人员被抛在后面，相比之下，它们的生产力开始变得苍白。感觉就像我们正在为原始速度提供深刻的了解，而且我不确定长期的成本是否值得。 让我打破我看到的两个主要挑战。  vibe编码者：当您不理解“  ”时，“作为学生，我会看到一个学生，我会看到colea not ai no n ai no a in ai deep for to real tape after nevely却学习时，但要避免学习时，但要避免学习。令人困惑。一种用于提高效率的工具正在使用拖延。周围，​​经验丰富的开发人员，雇主和讲师都在引起警报：“初级开发人员不知道如何编码！＆quot&#39; 这是AI过度依赖的固有风险。这让我想知道：这是未来吗？一个没有人了解代码背后的齿轮和机制的世界，只是它起作用了吗？当AI无法修复关键错误时，您缺乏介入的基本知识时会发生什么？  AI-ABSTAINERS：被留在后面的风险 相反，我们有出色，经验丰富的开发人员被抛在后面，因为他们选择不采用这些工具，因为他们选择了这些工具。尽管深层知识是无价的，但生产率较慢的缺点正在成为一种真正的责任。 我们必须说实话：AI只会变得更好，更快，更有效。问题不是会很快构建软件的最佳选择，而是什么时候。忽略这就是冒着无关紧要的风险。 “工艺之神”的课程“  这个难题使我想起了神秘之王的神灵，“手工艺之神”。他代表了传统的手工艺术。一位领先时代的国王引发了一场工业革命，这位上帝面临选择：坚持过去或拥抱未来。他明智地将自己重塑为“蒸汽和机械之神”，“”象征创新和技术。 现实世界中的工业革命遵循相同的脚本。抵制的工匠和铁匠陷入了贫困，而适应工厂和机械的人则蓬勃发展。这一转变建立了现代世界，并创造了持续到今天的命运。 我的结论：锻造一条新的道路 我不想成为没有AI的开发人员，我也不想成为由于顽固而留下的那个人。我的目标是成为新一代的一部分：具有深厚基本知识的开发人员，使用AI来编写其大部分代码，并具备调试和解决AI无法做到的问题的技能。  ai无法做所有事情，但是很快就会做。了解您的手艺，但要掌握该工具。不要被抛在后面。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/heis_king_of_none      [link]   ＆＃32;   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nvxty1/ai_is_creating_a_silent_crisis_in_the_developer/</guid>
      <pubDate>Thu, 02 Oct 2025 08:05:52 GMT</pubDate>
    </item>
    <item>
      <title>一个node.js + Express回购，以生成DB Metadata +用户提示（OpenAI API）的SQL</title>
      <link>https://www.reddit.com/r/programming/comments/1nvx3go/a_nodejs_express_repo_to_generate_sql_from_db/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/someonesopranos      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nvx3go/a_nodejs_express_repo_to_generate_sql_from_db/</guid>
      <pubDate>Thu, 02 Oct 2025 07:18:58 GMT</pubDate>
    </item>
    </channel>
</rss>