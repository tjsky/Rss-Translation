<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Sat, 09 Aug 2025 12:31:19 GMT</lastBuildDate>
    <item>
      <title>这是编程的未来吗？</title>
      <link>https://www.reddit.com/r/programming/comments/1mlmtx1/is_this_the_future_of_programming/</link>
      <description><![CDATA[Aside from this free AI coding agent, Google is also working on creating another AI that incorporates design, coding, testing, deployment all in one AI package, a layman or any person(aka consumer) can use the AI and just describe verbally their requirements for an app and voila a full working app is produced by this AI ready to download with no human programmer needed.预计Google将从现在两年后部署此AI。如果AI接管整个游戏，程序员现在需要立即开始准备备份计划。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/_dark_wing     [link]       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mlmtx1/is_this_the_future_of_programming/</guid>
      <pubDate>Sat, 09 Aug 2025 11:09:06 GMT</pubDate>
    </item>
    <item>
      <title>MBCOMPASS- FOSS指南针和导航应用程序</title>
      <link>https://www.reddit.com/r/programming/comments/1mlmiw5/mbcompass_foss_compass_and_navigation_app/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  大家好， 我很高兴地宣布MBCompass，它是一个现代，免费和开源的指南针和导航应用程序，没有ADS，IAP或跟踪。  这是支持指南针和导航功能，轻巧且简单！ 我构建了mbcompass，而不仅仅是另一个福斯指南针应用程序；它弥合了 Compass 和完整导航应用程序  功能：  显示明确的基本方向和磁性方位。 在µT。 （加速度计，磁力计，陀螺仪）。 通过设置控制光和黑暗主题支持。 在导航期间保持屏幕。 景观取向支持。 使用JetPack组成和材料设计构建。 Android 5.0+ 网站上的完整列表   即使有所有这些功能，MBCompass也只有1.35MB APK APK尺寸，没有ADS，没有IAIAP，没有跟踪器    ，以获取更多信息： https://compassmb.github.io/mbcompass-site/ 提交由＆＃32; /u/u/u/u/abate-devs      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mlmiw5/mbcompass_foss_compass_and_navigation_app/</guid>
      <pubDate>Sat, 09 Aug 2025 10:50:25 GMT</pubDate>
    </item>
    <item>
      <title>http/2：续集总是更糟</title>
      <link>https://www.reddit.com/r/programming/comments/1mlmabr/http2_the_sequel_is_always_worse/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/cay-o-nuts       [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mlmabr/http2_the_sequel_is_always_worse/</guid>
      <pubDate>Sat, 09 Aug 2025 10:35:19 GMT</pubDate>
    </item>
    <item>
      <title>Kotlin的丰富错误：本机，打字错误，没有例外</title>
      <link>https://www.reddit.com/r/programming/comments/1mllyti/kotlins_rich_errors_native_typed_errors_without/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/cekrem      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mllyti/kotlins_rich_errors_native_typed_errors_without/</guid>
      <pubDate>Sat, 09 Aug 2025 10:14:30 GMT</pubDate>
    </item>
    <item>
      <title>大多数抹布的设置都破坏了 - 这是修复您的方法</title>
      <link>https://www.reddit.com/r/programming/comments/1mllfu7/most_rag_setups_are_broken_heres_how_to_fix_yours/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/javinpaul     &lt;a href =“ https://www.reddit.com/r/programming/comments/1mllfu7/most_rag_setups_are_broken_heres_heres_hores_how_how_to_fix_yours/]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mllfu7/most_rag_setups_are_broken_heres_how_to_fix_yours/</guid>
      <pubDate>Sat, 09 Aug 2025 09:39:04 GMT</pubDate>
    </item>
    <item>
      <title>我在Java中建造了一个具有自定义RISC架构和编译器的64位VM</title>
      <link>https://www.reddit.com/r/programming/comments/1mll7y7/i_built_a_64bit_vm_with_custom_risc_architecture/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我已经开发了Triton-64：在Java中是一个完整的64位虚拟机实现，纯粹是出于教育目的而创建的，以加深我对编译器和计算机体系结构的理解。这个项目从我的 Advanced assembler with pseudo-instruction support (LDI64, PUSH, POP, JMP label, ...) TriC programming language and compiler (high-level → assembly) Memory-mapped I/O (keyboard input to内存等...）  framebuffer（可用于char/pixels） 可启动ROM系统      tric语言示例（malloc and free）：          grobal freeSthead = 0分配16个字节，如果（ptr1 == 0）{return -1};分配失败 @ptr1 = 0x123456789abcdef0;将一个值写入分配的内存返回 @ptr1;将存储在a0} func Write64（addr，value）中的Ptr1中存储的值返回{@Addr = value} func read64（addr）{return @addr} func malloc（size_req）{if（freelisthead == 0）{freelisthead = 402784256;从内存图Write64（Freelisthead，（134217728＆lt;＆lt; 32）| 0）的常数。包装尺寸 +下一个指针} var current = freelisthead var prev = 0 var lowmask =（1＆lt;＆lt; 32）-1 var highMask = 〜lowmask while（current！= 0）{var header = read64（current）var blocksize var blocksize = header＆gt＆gt;＆gt;＆gt;＆gt;＆gt;＆gt;＆gt; 32 var next block =标题＆amp; lowmask if（blockSize＆gt; = size_req + 8）{if（prev == 0）{freelisthead = nextBlock} else {var prevheader = read64（prev）var sizepart = prevheader＆amp; HighMask Write64（prev，sizepart | next block）}返回电流 + 8} prev = current = current = next block} return 0} func free（ptr）{var header = ptr -8 var blocksize = read64（header）＆gt;＆gt;＆gt;＆gt; 32 write64（标题，（blocksize＆lt;＆lt; 32）| freelisthead）freelisthead = header}      示范：   framebuffer输出•    github：   https：//github.com.com/github.com/lpc4/lpc4/lpc4/triton-64/triton-64/triton-64-64 此体系结构的最小操作系统。由于我以前从未建造过操作系统，因此这可能非常困难。在深入研究之前，我将感谢有关当前项目的任何反馈。我是否应该考虑添加任何架构更改或功能，以使VM更适合运行操作系统？任何建议或资源将不胜感激。谢谢你的阅读！   &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/coldrepresentative91       [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mll7y7/i_built_a_64bit_vm_with_custom_risc_architecture/</guid>
      <pubDate>Sat, 09 Aug 2025 09:23:29 GMT</pubDate>
    </item>
    <item>
      <title>类似于Clojure的项目清单</title>
      <link>https://www.reddit.com/r/programming/comments/1mlkt3l/list_of_clojurelike_projects/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/ilevd      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mlkt3l/list_of_clojurelike_projects/</guid>
      <pubDate>Sat, 09 Aug 2025 08:55:12 GMT</pubDate>
    </item>
    <item>
      <title>刚刚构建了一个将任何应用程序变成Windows服务的工具 -  NSSM的全面管理替代品</title>
      <link>https://www.reddit.com/r/programming/comments/1mlkajv/just_built_a_tool_that_turns_any_app_into_a/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  嗨， ，我很高兴共享Servy，它可以使您能够按照Windows服务运行任何应用程序，可以完全控制其工作目录，启动类型，日志记录，健康检查和参数。正是您需要的。它解决了一个常见的问题，其中默认为C：\ Windows \ System32作为其工作目录，破坏依赖相对路径或本地配置的应用程序。  servy允许您以Windows.js，Python，Python，.net应用程序，脚本，脚本等方式运行任何可执行文件。它允许您设置一个自定义工作目录，以避免路径问题，重定向stdout和stderr旋转记录文件，并包括具有自动恢复和重新启动策略的内置健康检查。该工具具有干净，现代的UI，可轻松服务管理，并且与Windows 7通过Windows 11以及Windows Server兼容。 它非常适合保持背景流程在而无需将其重写为服务的情况下。 在GitHub上查看： https://github.com/aelassas/servy    演示视频： https://www.youtube.com/watch?v=jpmzzejd4f0 提交由＆＃32; /u/u/adunhappy5308     [link]&gt; [link]   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mlkajv/just_built_a_tool_that_turns_any_app_into_a/</guid>
      <pubDate>Sat, 09 Aug 2025 08:19:26 GMT</pubDate>
    </item>
    <item>
      <title>Ohyaml.wtf | yaml琐事让你去wtf</title>
      <link>https://www.reddit.com/r/programming/comments/1mlj15v/ohyamlwtf_yaml_trivia_to_make_you_go_wtf/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/elizobserves     &lt;a href =“ https://www.reddit.com/r/programming/comments/1mlj15v/ohyamlwtf_yaml_yaml_yaml_trivia_trivia_trivia_make_make_you_go_go_go_go_go_wtf/”]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mlj15v/ohyamlwtf_yaml_trivia_to_make_you_go_wtf/</guid>
      <pubDate>Sat, 09 Aug 2025 06:57:43 GMT</pubDate>
    </item>
    <item>
      <title>🎥刚刚制作了AI生成的动画“我一生中的软件工程师”视频！ 🚀链接：https：//youtu.be/nm4183i9d6c?si=jhhodlwv-oz6nawx</title>
      <link>https://www.reddit.com/r/programming/comments/1mlilfo/just_made_an_aigenerated_animated_day_in_my_life/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/tt0ky0      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mlilfo/just_made_an_aigenerated_animated_day_in_my_life/</guid>
      <pubDate>Sat, 09 Aug 2025 06:30:12 GMT</pubDate>
    </item>
    <item>
      <title>🚀乌托邦命名系统（UNS） - 分散命名的未来就在这里！</title>
      <link>https://www.reddit.com/r/programming/comments/1mlhvnk/utopia_naming_system_uns_the_future_of/</link>
      <description><![CDATA[Hey Redditors, I’m excited to share the latest on the Utopia Naming System (UNS) — a truly decentralized, free, and privacy-first naming system designed to revolutionize how we address and discover resources on the internet. What is UNS? 🤔  uns是一个下一代命名系统，该系统构建为 break break break break break脱离了传统DNS和基于区块链的命名服务的集中式网守，可收取费用或推动广告。以下是使它与众不同的原因：   免费使用：无付款，没有广告，没有附加条件。     分散且无信任：您的域名将您的域名链接到您的身份与您的身份链接到您的身份，但没有成本的所有人或强大的主人公或强度。全球可访问性，支持多种语言和脚本。  灵活且模块化：与现有的互联网协议一起使用并支持未来的技术集成。   有什么新功能？ 🆕 We’ve been pushing hard on expanding UNS with some fantastic new capabilities and exciting roadmap milestones, including:  UT-IP Encoder: Visual IP address obfuscation for enhanced privacy — turning your IPs into cool Unicode symbols. Decentralized subdomain management: Easily create, list, and使用安全的CLI工具管理子域 - 不需要中央权威。   uns and Iot：探索与IoT设备进行集成以进行分散的发现和交流。    多语言支持：扩展超越拉丁字母，以包括拉丁字母超越全球脚本。消息传递：想象一下与零广告或监视的聊天，共享和交易。  分散域租赁＆amp;市场：共享并将您的UNS资产货币化。   硬件钱包集成：用可信赖的硬件安全地管理您的未身份。     gamification＆amp;激励措施：使参与乐趣和有意义 - 因为谁不喜欢一个友好的竞争？  您为什么要关心？ ❤️ 当前的互联网命名景观由集中式注册商，高费用和隐私风险主导。 UNS通过：  将您控制无需成本。 通过透明&gt;透明，可调式的账本      通过消除AD AD驱动的           - 您的身份和资产真正属于您的地方。  自己尝试一下！ 很好奇地看到UNS行动吗？与 Olliver 是我们的AI视频发言人，他分解了Uns的美德，并向 debbie 打招呼，AI接待员，可以帮助您在此处帮助您的系统：     🔗 UNS on GitHub — dive into the code, contribute, or just check it out! Join the Conversation 🗣️ UNS is an open, evolving project fueled by community input.有想法，问题，还是只是想嘲笑分散命名？在下面放置评论或查看GitHub讨论。 最终想法 互联网对于一个尊重用户，削减中间人并包含真正的分散性的命名系统而言，Internet逾期了。 uns不仅是一个愿景 - 现在正在发生，而且每个人都是免费的。 让我们构建一个更好的网络，一个名字。    - 杰伊（Jay），杰伊（Jay），uns project Lead         /u/u/u/misos-peach4845       [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mlhvnk/utopia_naming_system_uns_the_future_of/</guid>
      <pubDate>Sat, 09 Aug 2025 05:46:15 GMT</pubDate>
    </item>
    <item>
      <title>设计AI应用程序：适用于新AI世界的分布式系统的原理</title>
      <link>https://www.reddit.com/r/programming/comments/1mlhmq7/designing_ai_applications_principles_from/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我发表了一篇有关使AI应用程序可靠的文章。您如何看待它？  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/tistory_wing_9573     [link]   ＆＃32;   [commist]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mlhmq7/designing_ai_applications_principles_from/</guid>
      <pubDate>Sat, 09 Aug 2025 05:31:11 GMT</pubDate>
    </item>
    <item>
      <title>在Docker中运行第三方工具</title>
      <link>https://www.reddit.com/r/programming/comments/1mlduze/run_thirdparty_tools_inside_docker/</link>
      <description><![CDATA[If you are writing a new CLI tool, you should consider shipping it as a standalone binary, and there a long discussion on that last一个月。 但是，如果您想使用工具，该怎么办？您应该如何确保该工具不希望从机器中窃取数据？ 风险甚至没有理论化，因为甚至亚马逊的foss代码已经 compriation  Docker中的工具。理想情况下，互联网访问禁用。该工具将仅访问安装在Docker映像上的数据。通常，大多数工具不需要访问当前目录之外的文件。 这大大降低了第三方工具的攻击表面。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/ashishb_net      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mlduze/run_thirdparty_tools_inside_docker/</guid>
      <pubDate>Sat, 09 Aug 2025 02:11:20 GMT</pubDate>
    </item>
    <item>
      <title>超越敏捷</title>
      <link>https://www.reddit.com/r/programming/comments/1mlcmf7/moving_past_agile/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我认为我们很多人都希望从当前的项目管理方式中继续前进。从过去借一些想法，敏捷折扣了一个好主意吗？超过敏捷的真实是什么，它将需要什么。在下面的视频中对此（也许是令人惊讶的结论）进行了一些想法。  披露：这里没有AI内容。这一切都只是吸引了我的频道流量，因为我希望YouTube相信我作为一个人。   &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/stumblingtowards       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mlcmf7/moving_past_agile/</guid>
      <pubDate>Sat, 09 Aug 2025 01:11:05 GMT</pubDate>
    </item>
    <item>
      <title>GPT-5在这里...而且擅长网络开发吗？</title>
      <link>https://www.reddit.com/r/programming/comments/1mla1y4/gpt5_is_here_and_its_not_good_at_web_development/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/polidario       [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1mla1y4/gpt5_is_here_and_its_not_good_at_web_development/</guid>
      <pubDate>Fri, 08 Aug 2025 23:12:25 GMT</pubDate>
    </item>
    </channel>
</rss>