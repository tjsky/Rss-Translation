<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Sat, 27 Sep 2025 18:19:50 GMT</lastBuildDate>
    <item>
      <title>如果当前的LLM如此强大，并且还可以归功于CoRSOR，Co-Pilot，Replit等等，则可以编写任何代码。那么，为什么他们仍然无法创建自我发展的AI。</title>
      <link>https://www.reddit.com/r/programming/comments/1ns29gl/if_current_llms_are_that_strong_and_also_cursor/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  您想什么并检查我添加的代码。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/gainsed_fix8516        [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ns29gl/if_current_llms_are_that_strong_and_also_cursor/</guid>
      <pubDate>Sat, 27 Sep 2025 18:17:23 GMT</pubDate>
    </item>
    <item>
      <title>设计两次并信任您的工作</title>
      <link>https://www.reddit.com/r/programming/comments/1nrz2a0/design_twice_and_trust_in_what_you_do/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/dong2015     [link]   ＆＃32;   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nrz2a0/design_twice_and_trust_in_what_you_do/</guid>
      <pubDate>Sat, 27 Sep 2025 16:09:00 GMT</pubDate>
    </item>
    <item>
      <title>PostgreSQL 18发布 -  PGBENCH结果表明它是迄今为止最快的</title>
      <link>https://www.reddit.com/r/programming/comments/1nrw3p3/postgresql_18_released_pgbench_results_show_its/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我刚刚使用PGBENCH MIX TESTS发布了PG版本12–18的基准比较：   httpps：&gt;  pg18在每个指标中都导致：    3,057 tps   - 最高吞吐量   5.232 ms延迟延迟  - 最低响应时间         183,431 threstions  contrions  cont  用于交易工作负载。喜欢在生产中测试PG18的任何人的反馈吗？  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/ozkansoftware      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nrw3p3/postgresql_18_released_pgbench_results_show_its/</guid>
      <pubDate>Sat, 27 Sep 2025 14:05:26 GMT</pubDate>
    </item>
    <item>
      <title>Microsoft是否悄悄地为木板后的未来准备.NET？看看他们旗舰平台背后的战略变化。</title>
      <link>https://www.reddit.com/r/programming/comments/1nrsgid/is_microsoft_quietly_preparing_net_for_a_postoop/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  嘿， 无论您是.net dev还是对主要编程平台的发展如何发展感兴趣，我一直在注意到Microsoft生态系统中一些有趣的暗流，这表明与.net 10的策略性竞争很大的策略性竞争（net 10255）（即2025年）。这是我根据他们的研究和语言设计选择的几个主要转变：    1。证明运行时间本身是AI-Weaw：而不仅仅是提供AI库（例如Python的生态系统），因此证据表明Microsoft正在努力使.NET运行时本身本身AI本身。这包括ML驱动的JIT编译器和AI工作负载的头等数据类型（ tensor＆lt; t＆gt; ）。这是一种令人着迷的方法，可以通过更改引擎，而不仅仅是汽车的内部来缩小与Python的差距。   2。将经典的OOP语言转移到“ post-oop”立场： c＃是一种典型的OOP语言，但是诸如记录，模式匹配和对歧视工会的研究之类的功能表明，它们正在为未来的未来做准备，在这种情况下，以数据为导向和功能性的范式与OOP共同，而不仅仅是附加组件。 It&#39;s a case study in evolving a mature language without breaking it.  The overall strategy seems to be a response to competition from languages like Rust and Go and the changing hardware landscape (i.e., the end of Moore&#39;s Law and the rise of specialized silicon). I wrote a more detailed analysis of these points and a few others (like their plans for UI and concurrency) in a Medium article.我在这里发布它是因为我认为这引发了有关编程平台的发展方向的更广泛的对话。 我很想听到这个社区的消息 - 您是否看到Java，Go或Rust等其他生态系统中的类似趋势？这是成熟平台采用的正确方向吗？  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/riturajpokhriyal       [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nrsgid/is_microsoft_quietly_preparing_net_for_a_postoop/</guid>
      <pubDate>Sat, 27 Sep 2025 11:05:57 GMT</pubDate>
    </item>
    <item>
      <title>我对自己的独立C ++ 2D游戏引擎进行物理，资产渲染和AABB碰撞检测的视频</title>
      <link>https://www.reddit.com/r/programming/comments/1nrojl7/video_in_which_i_go_over_physics_asset_rendering/</link>
      <description><![CDATA[This is a devlog that follows an update to a previous feature that I added to my game Galatic Inc. It involves its own gravity system, its own rendering system, as well it&#39;s own click detection and collision resolution. The following is a link to the github for the project:  https://github.com/natethegrappler    这是实际游戏的下载：    https://natethecoder.itch.ith.io/galatic-inc-inc      &lt;！ -  sc_on-提交由＆＃32; /u/u/uscmassStrike9439      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nrojl7/video_in_which_i_go_over_physics_asset_rendering/</guid>
      <pubDate>Sat, 27 Sep 2025 06:57:44 GMT</pubDate>
    </item>
    <item>
      <title>了解浮点数</title>
      <link>https://www.reddit.com/r/programming/comments/1nriyvn/understanding_floatingpoint_numbers/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/ductuctoryComments      ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nriyvn/understanding_floatingpoint_numbers/</guid>
      <pubDate>Sat, 27 Sep 2025 01:43:18 GMT</pubDate>
    </item>
    <item>
      <title>PGM索引</title>
      <link>https://www.reddit.com/r/programming/comments/1nres1z/the_pgmindex/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/ketralnis      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nres1z/the_pgmindex/</guid>
      <pubDate>Fri, 26 Sep 2025 22:22:55 GMT</pubDate>
    </item>
    <item>
      <title>迭代字符串和手动解码UTF-8</title>
      <link>https://www.reddit.com/r/programming/comments/1nrerjs/iterating_strings_and_manually_decoding_utf8/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/ketralnis       [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nrerjs/iterating_strings_and_manually_decoding_utf8/</guid>
      <pubDate>Fri, 26 Sep 2025 22:22:19 GMT</pubDate>
    </item>
    <item>
      <title>Go Maps Deep Diev -O（1）表演，溢出和成长背后的秘密</title>
      <link>https://www.reddit.com/r/programming/comments/1nrerby/go_maps_deep_dive_the_secrets_behind_o1/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/ketralnis     [link]       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nrerby/go_maps_deep_dive_the_secrets_behind_o1/</guid>
      <pubDate>Fri, 26 Sep 2025 22:22:03 GMT</pubDate>
    </item>
    <item>
      <title>飞行记录器中的1.25</title>
      <link>https://www.reddit.com/r/programming/comments/1nrepm8/flight_recorder_in_go_125/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/ketralnis       [commist]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nrepm8/flight_recorder_in_go_125/</guid>
      <pubDate>Fri, 26 Sep 2025 22:19:52 GMT</pubDate>
    </item>
    <item>
      <title>[由reddit删除]</title>
      <link>https://www.reddit.com/r/programming/comments/1nrep5e/removed_by_reddit/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;   [由于违反 content Policy Policy Policy Policy 。 ]   &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/ketralnis       [commist]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nrep5e/removed_by_reddit/</guid>
      <pubDate>Fri, 26 Sep 2025 22:19:17 GMT</pubDate>
    </item>
    <item>
      <title>每秒都会将数十亿个字符串变成整数，而不会发生冲突</title>
      <link>https://www.reddit.com/r/programming/comments/1nreor8/turning_billions_of_strings_into_integers_every/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/ketralnis      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nreor8/turning_billions_of_strings_into_integers_every/</guid>
      <pubDate>Fri, 26 Sep 2025 22:18:48 GMT</pubDate>
    </item>
    <item>
      <title>将Fortran F-16模拟器转换为Unity3D</title>
      <link>https://www.reddit.com/r/programming/comments/1nreolg/translating_a_fortran_f16_simulator_to_unity3d/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/ketralnis        [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nreolg/translating_a_fortran_f16_simulator_to_unity3d/</guid>
      <pubDate>Fri, 26 Sep 2025 22:18:36 GMT</pubDate>
    </item>
    <item>
      <title>让我们谈谈在Zig，c，rust和... Go中的对齐，尺寸和包装？</title>
      <link>https://www.reddit.com/r/programming/comments/1nrdhf2/lets_talk_about_alignment_sizing_and_packing_in/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/bluegoliath      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nrdhf2/lets_talk_about_alignment_sizing_and_packing_in/</guid>
      <pubDate>Fri, 26 Sep 2025 21:26:09 GMT</pubDate>
    </item>
    <item>
      <title>从完整的堆栈到完整的团队堆栈</title>
      <link>https://www.reddit.com/r/programming/comments/1nrd0os/from_full_stack_to_full_team_stack/</link>
      <description><![CDATA[]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nrd0os/from_full_stack_to_full_team_stack/</guid>
      <pubDate>Fri, 26 Sep 2025 21:06:10 GMT</pubDate>
    </item>
    </channel>
</rss>