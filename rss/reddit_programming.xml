<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Sun, 31 Aug 2025 03:37:02 GMT</lastBuildDate>
    <item>
      <title>最小的看板</title>
      <link>https://www.reddit.com/r/programming/comments/1n4g6jf/the_most_minimal_kanban/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  撰写了本文，内容涉及实施最小的软件看板，以及可能对软件设计的说法。希望你喜欢。 🙂 我想尝试使用Linux中的CLI工具来为大多数人写一个Web应用程序的内容。我认为 可以使该模型与bash/yq一起使用，但不想对该概念进行编程。提交由＆＃32; /u/u/fd93_blog       [commist]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n4g6jf/the_most_minimal_kanban/</guid>
      <pubDate>Sat, 30 Aug 2025 23:50:00 GMT</pubDate>
    </item>
    <item>
      <title>AI合作者从头开始写了一个工作的C编译器</title>
      <link>https://www.reddit.com/r/programming/comments/1n4ez3d/ai_collaborator_wrote_a_working_c_compiler_from/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  如果有人想检查源本身，则将存储库链接。我一直在尝试使用AI来构建更复杂的软件系统。在过去的几周中，我们（我的AI合作者）（我 +“ EVE”）试图创建一个具有LLVM后端的C89编译器。  实验的目的是让代理商疯了，看看它可以做什么，不要取代人类或使其看起来像是生产级的编译器。  项目的当前状态：      程序  通过包括合并排序，FIB，2D数组和控制流  的测试，我发现有趣的是，适合AI驱动的开发的编译器如何非常适合编译器。由于它们是模块化且可测试的，因此可以通过测试驱动的开发和上下文管理来指导AI。在此设置下，夏娃生产了大部分系统。我的角色主要是在她被卡住并提供检查时重新开始她。 限制：  尚无优化通过 错误处理是最小的 清理和边缘案例和边缘案例仍然是不完整的             这是一个profectiment of Fastiment Impertiment Importife &lt;我可能是我的prove&gt;，我可能已经准备好了，这可能是我的p&gt;这个社区的反馈：  您建议您接下来运行什么基准或测试套件？ 编译器结构的哪些方面您认为AI驱动的系统最难处理？      对于上下文中，我也有ML的背景来训练我自己的模型。我的一部分动机是探索AI的软件开发仍然遥不可及，而不是预期的。  要澄清，AI并未带有现有的编译器代码库。工作流程及时→生成→测试→迭代。  当然，llms是通过人工编写的代码和文献进行培训的，因此输出是下游的。我认为这不太视为“纯发明”，而是更多地显示出正确的方法（TDD，模块化崩溃，上下文管理），AI可以无需直接人类实施的情况组装工作系统。  链接：         wyrmcc（compiler）： https://github.com/liyuzer/eve          &lt;！ -  sc_on-&gt; 32;提交由＆＃32; /u/u/u/u/comentivesprize20     link link&gt; [link link]  &lt;a href =“ https://www.reddit.com/r/programming/comments/1n4ez3d/ai_collaborator_wrote_a_working_c_compiler_from//]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n4ez3d/ai_collaborator_wrote_a_working_c_compiler_from/</guid>
      <pubDate>Sat, 30 Aug 2025 22:52:32 GMT</pubDate>
    </item>
    <item>
      <title>乐观还是悲观？了解数据库中的锁定</title>
      <link>https://www.reddit.com/r/programming/comments/1n4eewc/optimistic_or_pessimistic_understanding_locking/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/dhairya-chauhan     [link]  ＆＃32;   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n4eewc/optimistic_or_pessimistic_understanding_locking/</guid>
      <pubDate>Sat, 30 Aug 2025 22:26:20 GMT</pubDate>
    </item>
    <item>
      <title>为什么“首先发生了什么？”是大规模系统中最难的问题之一</title>
      <link>https://www.reddit.com/r/programming/comments/1n4dldv/why_what_happened_first_is_one_of_the_hardest/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/scalableThread      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n4dldv/why_what_happened_first_is_one_of_the_hardest/</guid>
      <pubDate>Sat, 30 Aug 2025 21:49:47 GMT</pubDate>
    </item>
    <item>
      <title>试图在物理硬件上运行自己的操作系统（结果混合）</title>
      <link>https://www.reddit.com/r/programming/comments/1n4c1qe/trying_to_run_my_own_os_on_physical_hardware_with/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/daedaluscommunity       [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n4c1qe/trying_to_run_my_own_os_on_physical_hardware_with/</guid>
      <pubDate>Sat, 30 Aug 2025 20:42:46 GMT</pubDate>
    </item>
    <item>
      <title>Tinyrender的第二版：500行Bare C ++的软件渲染</title>
      <link>https://www.reddit.com/r/programming/comments/1n4bxwe/second_edition_of_tinyrenderer_software_rendering/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/haqreu      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n4bxwe/second_edition_of_tinyrenderer_software_rendering/</guid>
      <pubDate>Sat, 30 Aug 2025 20:38:08 GMT</pubDate>
    </item>
    <item>
      <title>WOW私人服务器C ++代码评论tariq10x</title>
      <link>https://www.reddit.com/r/programming/comments/1n47l0k/wow_private_servers_c_code_review_by_tariq10x/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  高质量的深入研究私人服务器在引擎盖下的工作方式。作为一个在这些日子里玩过这些的人，我总是想知道他们是如何将其删除的。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/bulltrapking       [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n47l0k/wow_private_servers_c_code_review_by_tariq10x/</guid>
      <pubDate>Sat, 30 Aug 2025 17:36:04 GMT</pubDate>
    </item>
    <item>
      <title>大胆的Devlog-八月摘要 - 警告，LSP和测试</title>
      <link>https://www.reddit.com/r/programming/comments/1n3xdf6/bold_devlog_august_summary_warnings_lsp_test/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/levodelellis      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n3xdf6/bold_devlog_august_summary_warnings_lsp_test/</guid>
      <pubDate>Sat, 30 Aug 2025 09:31:35 GMT</pubDate>
    </item>
    <item>
      <title>如何使用Inception V3对525种鸟类进行分类</title>
      <link>https://www.reddit.com/r/programming/comments/1n3wx0l/how_to_classify_525_bird_species_using_inception/</link>
      <description><![CDATA[In this guide you will build a full image classification pipeline using Inception V3. You will prepare directories, preview sample images, construct data generators, and assemble a transfer learning model. You will compile, train, evaluate, and visualize results for a multi-class bird species dataset.  You can find more教程，并在此处加入我的新闻通讯： https://eranfeit.net/      在这里观看完整的教程：    https://www.youtube.com/watch?v=d_jb9ga2u_c2u_c    - &gt;＆＃32;提交由＆＃32; /u/u/feitgemel      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n3wx0l/how_to_classify_525_bird_species_using_inception/</guid>
      <pubDate>Sat, 30 Aug 2025 09:01:13 GMT</pubDate>
    </item>
    <item>
      <title>这个提议让我今天微笑</title>
      <link>https://www.reddit.com/r/programming/comments/1n3wwpp/this_commit_made_me_smile_today/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/norah_ai      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n3wwpp/this_commit_made_me_smile_today/</guid>
      <pubDate>Sat, 30 Aug 2025 09:00:46 GMT</pubDate>
    </item>
    <item>
      <title>停止将HTTP用于所有事物：拯救职业的API协议指南</title>
      <link>https://www.reddit.com/r/programming/comments/1n3wtf7/stop_using_http_for_everything_the_api_protocol/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/javinpaul      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n3wtf7/stop_using_http_for_everything_the_api_protocol/</guid>
      <pubDate>Sat, 30 Aug 2025 08:54:30 GMT</pubDate>
    </item>
    <item>
      <title>我正在努力实施我自己的编程语言 - 不是我</title>
      <link>https://www.reddit.com/r/programming/comments/1n3ukwg/im_working_on_implementing_a_programming_language/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/jadeluxe     [link]    ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n3ukwg/im_working_on_implementing_a_programming_language/</guid>
      <pubDate>Sat, 30 Aug 2025 06:29:03 GMT</pubDate>
    </item>
    <item>
      <title>用交互式演示解释了JavaScript封闭</title>
      <link>https://www.reddit.com/r/programming/comments/1n3th8z/javascript_closures_explained_with_interactive/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  最好的类比理解闭合是 backpack 。     函数exfunctiona（）{const outervariable =＆quot;我来自外部！＆quort;;函数exFunctionb（）{console.log（outervariable）; //从其背包访问变量。 }返回exfunctionb; } const myclusion = exFunctiona（）; //外部功能运行并消失了... mycluse（）; //...但是Interfunction仍然有其背包！ logs“我来自外面！”    思考定义任何函数（函数a）时，我们定义了其中的一些变量 （词汇范围）。在这里，我们定义变量 outervariable 内部函数a 。 思考，要记住这些信息，函数创建 backpack 并将所有这些值保留在其中。 然后，我们再次定义了另一个函数（function b）Insel  strong&gt;我们的function function a function a）。函数b可以访问 parent函数（函数a）中定义的变量。  因此，现在我们的内部函数将创建 backpack 并保留所有这些信息。当我们的外部功能（函数A）执行并返回其上下文，并且词汇范围也会完成。但是请记住，我们的内部功能（函数b）具有自己的背包，在背包内部，它具有从 e父函数a （已经执行的）。我们的内部函数b仍然可以访问父函数中定义的变量a被称为闭合。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/sanudelhi       [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n3th8z/javascript_closures_explained_with_interactive/</guid>
      <pubDate>Sat, 30 Aug 2025 05:23:44 GMT</pubDate>
    </item>
    <item>
      <title>互联网实验注释索引</title>
      <link>https://www.reddit.com/r/programming/comments/1n3scml/internet_experiment_note_index/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我非常喜欢研究基础技术如何随着时间的流逝而发展的历史。这似乎是一系列文档的集合，详细介绍了TCP和UDP的早期迭代的演变和批评。 希望其他人也发现这很有趣！  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/serenecalathea      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n3scml/internet_experiment_note_index/</guid>
      <pubDate>Sat, 30 Aug 2025 04:19:14 GMT</pubDate>
    </item>
    <item>
      <title>在Python中重新加载课程并共享边界</title>
      <link>https://www.reddit.com/r/programming/comments/1n3moz9/reloading_classes_in_python_and_shared_borders/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/ketralnis      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n3moz9/reloading_classes_in_python_and_shared_borders/</guid>
      <pubDate>Fri, 29 Aug 2025 23:32:46 GMT</pubDate>
    </item>
    </channel>
</rss>