<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Fri, 12 Sep 2025 18:19:02 GMT</lastBuildDate>
    <item>
      <title>我在没有游戏引擎的情况下在Python中编码了Pac-Man。</title>
      <link>https://www.reddit.com/r/programming/comments/1nf9x4a/i_coded_pacman_in_python_without_a_game_engine/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/dialigent_historian_4      &lt;a href =“ https://www.reddit.com/r/programming/comments/1nf9x4a/i_coded_pa​​cman_in_in_python_withon_without_a_game_engine/]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nf9x4a/i_coded_pacman_in_python_without_a_game_engine/</guid>
      <pubDate>Fri, 12 Sep 2025 17:50:38 GMT</pubDate>
    </item>
    <item>
      <title>AI编码助手的生产力悖论</title>
      <link>https://www.reddit.com/r/programming/comments/1nf9buo/the_productivity_paradox_of_ai_coding_assistants/</link>
      <description><![CDATA[＆＃32;提交由＆＃32;  /u/West-Chard-1474   [link] ＆＃32;   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nf9buo/the_productivity_paradox_of_ai_coding_assistants/</guid>
      <pubDate>Fri, 12 Sep 2025 17:27:32 GMT</pubDate>
    </item>
    <item>
      <title>容器的工作方式：从头开始构建一个类似码头的容器</title>
      <link>https://www.reddit.com/r/programming/comments/1nf96ir/how_containers_work_building_a_dockerlike/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/iximiuz      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nf96ir/how_containers_work_building_a_dockerlike/</guid>
      <pubDate>Fri, 12 Sep 2025 17:21:50 GMT</pubDate>
    </item>
    <item>
      <title>对Postgres 18感到兴奋</title>
      <link>https://www.reddit.com/r/programming/comments/1nf90qr/get_excited_about_postgres_18/</link>
      <description><![CDATA[＆＃32;提交由＆＃32;  /u/craigkerstiens   [link]   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nf90qr/get_excited_about_postgres_18/</guid>
      <pubDate>Fri, 12 Sep 2025 17:15:30 GMT</pubDate>
    </item>
    <item>
      <title>许多坚硬的leetcode问题是容易的约束问题</title>
      <link>https://www.reddit.com/r/programming/comments/1nf8hyo/many_hard_leetcode_problems_are_easy_constraint/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/iamkeyur      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nf8hyo/many_hard_leetcode_problems_are_easy_constraint/</guid>
      <pubDate>Fri, 12 Sep 2025 16:55:19 GMT</pubDate>
    </item>
    <item>
      <title>开发人员生产力指标的一切错误</title>
      <link>https://www.reddit.com/r/programming/comments/1nf85j7/everything_wrong_with_developer_productivity/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;   dora四是作为团队改进的反馈机制，而不是比较整个组织中的性能的一种方式。一路上的某个地方，我们失去了该线程，而是开始追逐“生产力指标”。 马丁·福勒（Martin Fowler）说最好的是：您无法衡量个人开发人员的生产力。那是一个傻瓜的事。甚至官方的Dora网站都强调这些不是生产力指标，它们是软件交付性能指标。  现在肯定有一个行业。插入您的存储库并发出跟踪器并吐出40多个指标的仪表板的工具。其中一些很有用。其他人则因设计而积极危害。  问题是，代码是真实工作的有损表示。编写代码通常不到工程师实际做的一半。在提交日志中未捕获问题，探索权衡和系统设计。 像肯特·贝克（Kent Beck）和里奇·希基（Rich Hickey）这样的人甚至认为，开发中最有价值的部分是思考，而不是打字。而且您无法真正在度量中捕获它。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/aviator_co      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nf85j7/everything_wrong_with_developer_productivity/</guid>
      <pubDate>Fri, 12 Sep 2025 16:41:45 GMT</pubDate>
    </item>
    <item>
      <title>“我得到了PWNED”：Chalk＆Debug的NPM维护者就大规模的供应链攻击讲话</title>
      <link>https://www.reddit.com/r/programming/comments/1nf6df3/i_got_pwned_npm_maintainer_of_chalk_debug_speaks/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  嘿，本周，我发现我们发现发现一个受欢迎的开源项目，包括调试和粉笔在内。我很高兴地说，被妥协的维护者Josh（Qix）同意与我坐下来讨论他的经历，这是一次非常坦率的对话，但我认为有一个很重要的对话。问题仍在循环。   MFA是在帐户上吗？  “肯定有MFA……但是一次性的一次性密码没有抗性。他们可以在中间。没有加密检查，没有像U2F那样的flow ug&gt;            爆炸半径的规模    charlie（我们的研究人员）发现了这个问题，当时发现了一个可疑的途径： 我看到了一个重要的途径……我第一次看我的错误 - 我第一次，我和我看到了我，我和我第一次，我和我看到了我，我和我第一次，我和我看到了。 JS生态系统将受到影响。分析的其中有恶意软件。互联网上有一些“热门”，实际上这没什么大不了的，有些人说这是安全的胜利。乔什（Josh）分享说，这不是胜利，我们逃脱它的唯一原因是因为攻击者多么无效。恶意软件包在它们的生存的2小时窗口中下载了250万次。  生态系统级别的缺点   乔什（Josh）坦率地说明注册表的响应时间和缺失的保障措施：   “在与npm的攻击过程中遇到了巨大的响应。除了通过公共形式提交票外，乔什（Josh）还为将来经历这件经历的任何人提供了一些建议，这是一个公开和透明的建议，互联网在很大程度上同意乔什（Josh）以最好的方式处理了这一点（简而言之，没有首先要张紧）。在开源中，透明和立即可以节省很多人的时间和金钱。   &lt;！ -  sc_on-&gt;＆＃32;由＆＃32;  [link]  ＆＃32; href =“ https://www.reddit.com/r/programming/comments/1NF6DF3/I_GOT_PWNED_PWNED_NPM_MAINTAINER_MAINTAINER_OF_CHALK_CHALK_DEBUG_SPEAK_SPEAKES/”&gt; [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nf6df3/i_got_pwned_npm_maintainer_of_chalk_debug_speaks/</guid>
      <pubDate>Fri, 12 Sep 2025 15:32:55 GMT</pubDate>
    </item>
    <item>
      <title>看不见的角色花了我太多的调试时间</title>
      <link>https://www.reddit.com/r/programming/comments/1nf0dli/the_invisible_character_that_cost_me_too_much/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/ludovicianul      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nf0dli/the_invisible_character_that_cost_me_too_much/</guid>
      <pubDate>Fri, 12 Sep 2025 11:13:46 GMT</pubDate>
    </item>
    <item>
      <title>Graph Rag Pipeline完全在本地使用Ollama运行，并具有完整的源归因</title>
      <link>https://www.reddit.com/r/programming/comments/1nf08e5/graph_rag_pipeline_that_runs_entirely_locally/</link>
      <description><![CDATA[Hey , I&#39;ve been deep in the world of local RAG and wanted to share a project I built, VeritasGraph, that&#39;s designed from the ground up for private, on-premise use with tools we all love. My setup uses Ollama with llama3.1 for generation and nomic-embed-text for embeddings.整个东西在我的计算机上运行而不会击中任何外部API。 主要目标是解决两个大问题： 多跳​​的推理：当您需要从不同文档连接事实时，标准向量抹布失败。 Veritasgraph构建了一个知识图来遍历这些关系。  Trust＆amp;验证：它为每个生成的语句提供了完整的源归因，因此您可以准确看到源文档的哪一部分用于构建答案。 我遇到（并已解决）的关键挑战之一是Ollama的默认上下文长度。我发现2048年的违约正在截断上下文并导致不良结果。该存储库包括一个具有12K上下文窗口的Llama3.1版本的途径，该版本完全解决了问题。 该项目包括： 完整的图形rag ragpipeline。  gradio ui用于交互式聊天体验。代码和说明： https://github.com/bibinprathap/veritasgraph    我真的很感兴趣地听到您的想法，尤其是在本地LLM上实施和提示。我敢肯定有可以进一步优化的方法。 谢谢！  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/bitterhouse8234       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nf08e5/graph_rag_pipeline_that_runs_entirely_locally/</guid>
      <pubDate>Fri, 12 Sep 2025 11:05:49 GMT</pubDate>
    </item>
    <item>
      <title>使用AI（主要是LLM）的限制因素</title>
      <link>https://www.reddit.com/r/programming/comments/1nezpel/the_limiting_factor_in_using_ai_mostly_llms/</link>
      <description><![CDATA[ You can’t automate what you can’t articulate.  To me, this is one of the core principles of working with generative AI. This is another, perhaps more powerful principle:  In knowledge work, the bottleneck is not the external availability of information.这是处理能力的内部带宽，这取决于您的先天能力和思想的训练状态。源  我认为这已经是发生的问题。 我广泛使用AI。但是，我主要在最了解的领域中受益。这与AI在软件工程中杀死初级职位的假设相吻合，而高级职位仍未受到影响。   ai应用作乘数，而不是代理。     所以，我的假设是我们的假设是AI是AI是乘坐的基础。因此，总的来说，我们从训练我们的思想而不是AI-Improvements中总共受益。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/fastsascha      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nezpel/the_limiting_factor_in_using_ai_mostly_llms/</guid>
      <pubDate>Fri, 12 Sep 2025 10:35:46 GMT</pubDate>
    </item>
    <item>
      <title>屏蔽高需求系统免受欺诈</title>
      <link>https://www.reddit.com/r/programming/comments/1ney0wh/shielding_highdemand_systems_from_fraud/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  与机器人作战的一些策略  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/fr0ddy       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ney0wh/shielding_highdemand_systems_from_fraud/</guid>
      <pubDate>Fri, 12 Sep 2025 08:50:58 GMT</pubDate>
    </item>
    <item>
      <title>BSA启动量子政策议程</title>
      <link>https://www.reddit.com/r/programming/comments/1neuyaq/bsa_launches_quantum_policy_agenda/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/donutloop      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1neuyaq/bsa_launches_quantum_policy_agenda/</guid>
      <pubDate>Fri, 12 Sep 2025 05:31:41 GMT</pubDate>
    </item>
    <item>
      <title>GO中的原型设计模式 - 更快的对象创建🚀</title>
      <link>https://www.reddit.com/r/programming/comments/1neu6uk/prototype_design_pattern_in_go_faster_object/</link>
      <description><![CDATA[Hey folks, I recently wrote a blog about the Prototype Design Pattern and how it can simplify object creation in Go. Instead of constantly re-building complex objects from scratch (like configs, game entities, or nested structs), Prototype lets you clone pre-initialized objects, saving time and reducing beriplate。 在博客中，我介绍：  浅层与深克隆的基础知识。体系结构和性能繁重的应用程序。  如果您曾经在缓慢而昂贵的对象初始化中挣扎，这可能会有所帮助：   https://medium.com/design-bootcamp/understanding-the-prototype-design-pattern-pattern-in-go-a-paractical-guide-329bf656fdec   很好奇地听到您如何在项目中解决类似问题！  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/priyankchheda15     [link]     32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1neu6uk/prototype_design_pattern_in_go_faster_object/</guid>
      <pubDate>Fri, 12 Sep 2025 04:46:07 GMT</pubDate>
    </item>
    <item>
      <title>BUN安装的幕后</title>
      <link>https://www.reddit.com/r/programming/comments/1nesqgh/behind_the_scenes_of_bun_install/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/iamkeyur     [link]&gt; [link]&gt; [link]   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nesqgh/behind_the_scenes_of_bun_install/</guid>
      <pubDate>Fri, 12 Sep 2025 03:26:49 GMT</pubDate>
    </item>
    <item>
      <title>保持卷发的挑战</title>
      <link>https://www.reddit.com/r/programming/comments/1nesqco/the_challenge_of_maintaining_curl/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/iamkeyur      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nesqco/the_challenge_of_maintaining_curl/</guid>
      <pubDate>Fri, 12 Sep 2025 03:26:40 GMT</pubDate>
    </item>
    </channel>
</rss>