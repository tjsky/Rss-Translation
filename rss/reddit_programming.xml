<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Wed, 10 Sep 2025 15:19:06 GMT</lastBuildDate>
    <item>
      <title>超越Vibe编码AI Slop：专业人士的代理工作流程</title>
      <link>https://www.reddit.com/r/programming/comments/1ndguzf/beyond_vibe_coded_ai_slop_agentic_workflows_for/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/derjanni      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ndguzf/beyond_vibe_coded_ai_slop_agentic_workflows_for/</guid>
      <pubDate>Wed, 10 Sep 2025 15:11:04 GMT</pubDate>
    </item>
    <item>
      <title>ELOQKV：开源（GPL V2），高性能，分布式，酸交易键值商店，带有REDIS API</title>
      <link>https://www.reddit.com/r/programming/comments/1ndgrup/eloqkv_opensource_gpl_v2_highperformance/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;   许多不错的功能包括：  高性能：在C6G.8xlarge上最多160万QPS  分布式分布式多高160万QP transactional: Supports SQL-like BEGIN/COMMIT/ROLLBACK in addition to Redis MULTI/EXEC, even in distributed settings Storage tiering: Automatically moves data from memory to SSD and S3 object storage Cloud native: Hosted and serverless options available, with a generous free tier (25GB storage and up to 10K QPS)   &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/iamprecipitate      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ndgrup/eloqkv_opensource_gpl_v2_highperformance/</guid>
      <pubDate>Wed, 10 Sep 2025 15:07:54 GMT</pubDate>
    </item>
    <item>
      <title>适用于软件团队的AI协助：游戏的状态•BirgittaBöckeler</title>
      <link>https://www.reddit.com/r/programming/comments/1ndfkxu/ai_assistance_for_software_teams_the_state_of/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/goto-con       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ndfkxu/ai_assistance_for_software_teams_the_state_of/</guid>
      <pubDate>Wed, 10 Sep 2025 14:22:15 GMT</pubDate>
    </item>
    <item>
      <title>巧妙的云：自动托管，用于开发人员轻松部署应用程序</title>
      <link>https://www.reddit.com/r/programming/comments/1ndf8yk/clever_cloud_automated_hosting_for_developers_to/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/waozen     [link]   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ndf8yk/clever_cloud_automated_hosting_for_developers_to/</guid>
      <pubDate>Wed, 10 Sep 2025 14:09:36 GMT</pubDate>
    </item>
    <item>
      <title>C ++ dataFrame新版本（3.6.0）已发布</title>
      <link>https://www.reddit.com/r/programming/comments/1ndeyjx/c_dataframe_new_version_360_is_out/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;    c ++ dataframe 新版本包括一堆新的分析和数据wrangranglanglangling例程。但是，重要的新闻是关于视觉和内容的重要返工。 您的反馈都非常感谢。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/hmoein      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ndeyjx/c_dataframe_new_version_360_is_out/</guid>
      <pubDate>Wed, 10 Sep 2025 13:58:39 GMT</pubDate>
    </item>
    <item>
      <title>.NET 10的性能改进</title>
      <link>https://www.reddit.com/r/programming/comments/1ndemk4/performance_improvements_in_net_10/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/ben_a_adams      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ndemk4/performance_improvements_in_net_10/</guid>
      <pubDate>Wed, 10 Sep 2025 13:45:08 GMT</pubDate>
    </item>
    <item>
      <title>多年来，我们搞砸了我们的查询构建器。这是我们如何修复它的故事以及我们一路上获得的教训。</title>
      <link>https://www.reddit.com/r/programming/comments/1nddp6e/we_messed_up_our_query_builder_for_years_heres/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我想分享我们在Signoz的团队的故事。长期以来，我们的平台有一个温和的查询构建器。在早期，我们有单独的对数，痕迹和指标的接口，这导致了零散的体验。我们的下一次尝试将基于SQL的UI统一的尝试从根本上存在缺陷，尤其是对于日志，因为它无法处理复杂的布尔逻辑或括号。     在累积问题和用户反馈后，我们意识到我们必须完全彻底改革我们的方法。对我们来说，一个关键的教训是，无论从技术上讲多么明显。似乎没有发现的功能，那是毫无用处的。我们还学会了不代表用户做出假设，因为它只会带来令人沮丧且令人惊讶的经历。 这导致查询建造者V5，这是一个完整的建筑改写，不仅可以解决核心问题，而且还使我们还清了很多UX债务。这是一个令人沮丧的旅程，但结果是一种允许进行复杂搜索的工具，并且是如此直观，以至于有些用户自愿替换了其Raw Clickhouse SQL查询:) yay   &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/unvent 2794     &lt;a href =“ https://www.reddit.com/r/programming/comments/1nddp6e/we_messed_up_our_query_query_builder_for_years_heres/]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nddp6e/we_messed_up_our_query_builder_for_years_heres/</guid>
      <pubDate>Wed, 10 Sep 2025 13:06:19 GMT</pubDate>
    </item>
    <item>
      <title>什么是模块化的整体，为什么您应该关心？ 🔥</title>
      <link>https://www.reddit.com/r/programming/comments/1nda6tp/what_is_a_modular_monolith_and_why_you_should_care/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/pepincho      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nda6tp/what_is_a_modular_monolith_and_why_you_should_care/</guid>
      <pubDate>Wed, 10 Sep 2025 10:09:58 GMT</pubDate>
    </item>
    <item>
      <title>使用Jmeter负载测试比较春季启动中的虚拟线程与平台线程</title>
      <link>https://www.reddit.com/r/programming/comments/1nd95t0/comparing_virtual_threads_vs_platform_threads_in/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我已经在 spring boot虚拟线程与平台线程进行jmeter load Testing上创建了一个视频课程。        link： https://youtu.be/LDgriPNWCjY Here I checked how Virtual Threads actually perform compared to Platform Threads in a real Spring Boot app in case of IO Based Operations . For the setup , I ran two instances of the same application:  First one - with Virtual Threads enabled Second one - Same application with the default Tomcat thread pool (Platform Threads) running on different port   Then I used JMeter to hit both application with increasing load (starting around 200 users/sec, then pushing up to 1000+）。我还捕获了并排的结果（例如图，吞吐量，响应时间）。  观察值：      平台线程，一旦tomcat在200个线程的范围左右逐渐越来越较大的范围 strong  当我运行更长的测试时，差异更加明显。   一个警告：这个好处确实显示出 i/o-o-heavy请求（我什至添加了A  thread.sleep.sleep.sleep ）。正如预期的那样，对于CPU繁重的东西，虚拟线程不会给予相同的优势。   &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/mrayandutta       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nd95t0/comparing_virtual_threads_vs_platform_threads_in/</guid>
      <pubDate>Wed, 10 Sep 2025 09:05:17 GMT</pubDate>
    </item>
    <item>
      <title>JEP 401：刚刚提交的价值类和对象（预览）！</title>
      <link>https://www.reddit.com/r/programming/comments/1nd8vob/jep_401_value_classes_and_objects_preview_has/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  它正在出现的JDK尚不清楚。但是，这是跨越的主要里程碑。另外，瓦尔哈拉（Valhalla）的新及早访问（大概与当前的JDK最新）也将很快上线。链接的帖子中的详细信息。 ，对于那些不熟悉的人， u/brian_goetz 是领导Project valhalla努力的人。因此，他在链接的帖子中发表的评论可以帮助您通过普通用户与公开JDK团队本身的官方单词在假设之间分开。  u/pron98 是另一个OpenJDK团队成员，在链接的帖子中发表评论。  &lt;！ -  sc_on- sc_on-&gt;＆＃32;提交由＆＃32;态href =“ https://www.reddit.com/r/java/comments/1nckdwr/jep_401_value_value_classes_and_objects_preview_has/”&gt; [link]   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nd8vob/jep_401_value_classes_and_objects_preview_has/</guid>
      <pubDate>Wed, 10 Sep 2025 08:46:19 GMT</pubDate>
    </item>
    <item>
      <title>git注意：git最酷，最不受欢迎的功能</title>
      <link>https://www.reddit.com/r/programming/comments/1nd8nsi/git_notes_gits_coolest_most_unloved_feature/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  你知道...吗？如果这样做，您将其用于什么？  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/esiy0676     [link]   ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nd8nsi/git_notes_gits_coolest_most_unloved_feature/</guid>
      <pubDate>Wed, 10 Sep 2025 08:31:55 GMT</pubDate>
    </item>
    <item>
      <title>铲软件在哪里？为什么AI编码声明不加起来</title>
      <link>https://www.reddit.com/r/programming/comments/1nd88hz/wheres_the_shovelware_why_ai_coding_claims_dont/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我刚刚遇到了Mike Judge的这篇文章。我认为它还没有在这里共享。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/livid_sign9681     [link]   ＆＃32;   [注释]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nd88hz/wheres_the_shovelware_why_ai_coding_claims_dont/</guid>
      <pubDate>Wed, 10 Sep 2025 08:03:08 GMT</pubDate>
    </item>
    <item>
      <title>API测试在微服务中感觉到重复性。您如何处理？</title>
      <link>https://www.reddit.com/r/programming/comments/1nd7rc7/api_testing_feels_repetitive_across_microservices/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我最近一直在考虑微服务测试。突出的一件事是它的重复性。 Every service has APIs, and a big chunk of the testing is the same across them:  Negative inputs Boundary values Encoding quirks Those invisible Unicode characters that ruin your weekend  I ended up building a CLI tool called Dochia to help automate this shared layer of API testing.它读取您的OpenAPI规格并产生许多智能边缘有效载荷，然后产生有关破裂的报告。 开源回购：github.com/dochia-dev/dochia-cli  我很乐意在这里听到其他人在这里处理重复测试：  lizz fl lizz fl lizz you 套房？ 或只是希望客户永远不会发送怪异的有效载荷？  好奇地向社区学习，如果多奇亚对你们中的某些人有用，很高兴提交由＆＃32; /u/u/u/ludovicianul       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nd7rc7/api_testing_feels_repetitive_across_microservices/</guid>
      <pubDate>Wed, 10 Sep 2025 07:30:49 GMT</pubDate>
    </item>
    <item>
      <title>流程系统设计：构建LLM编排平台</title>
      <link>https://www.reddit.com/r/programming/comments/1nd7hzt/flowrun_system_design_building_an_llm/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/history_wing_9573        [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nd7hzt/flowrun_system_design_building_an_llm/</guid>
      <pubDate>Wed, 10 Sep 2025 07:13:30 GMT</pubDate>
    </item>
    <item>
      <title>现代算法的不合理效力</title>
      <link>https://www.reddit.com/r/programming/comments/1nd7bby/the_unreasonable_effectiveness_of_modern_sort/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/voultapher      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nd7bby/the_unreasonable_effectiveness_of_modern_sort/</guid>
      <pubDate>Wed, 10 Sep 2025 07:01:35 GMT</pubDate>
    </item>
    </channel>
</rss>