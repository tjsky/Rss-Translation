<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Wed, 15 Oct 2025 09:19:05 GMT</lastBuildDate>
    <item>
      <title>我不喜欢使用 VScode 副驾驶代码补全的人</title>
      <link>https://www.reddit.com/r/programming/comments/1o760o5/i_dont_like_people_who_use_vscode_copilot_code/</link>
      <description><![CDATA[所以我并不完全反对使用 github copilot，但我绝对讨厌代码补全功能。每当我看到有人使用它时，我对他们的印象就像一块 50 公斤重的岩石从 500m 高处掉下来。 我的意思是作为一个程序员有一些尊严。 甚至从某个地方（LLM 除外）复制粘贴整个代码也会好得多，至少你知道搜索过它并且可能知道它会做什么 你对此有何想法？ 这是发布此内容的正确子吗？第一次发帖。   由   提交/u/Its_so_annoying   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o760o5/i_dont_like_people_who_use_vscode_copilot_code/</guid>
      <pubDate>Wed, 15 Oct 2025 09:07:34 GMT</pubDate>
    </item>
    <item>
      <title>在“利用时间 -1 天”时代，自我更新恶意软件如何在部署补丁之前利用漏洞</title>
      <link>https://www.reddit.com/r/programming/comments/1o75x9p/inside_the_timetoexploit_1_days_era_how/</link>
      <description><![CDATA[ 由   提交 /u/wineandcode   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o75x9p/inside_the_timetoexploit_1_days_era_how/</guid>
      <pubDate>Wed, 15 Oct 2025 09:01:19 GMT</pubDate>
    </item>
    <item>
      <title>偶然发现了这个“电子”，但对于 java 项目你们怎么看</title>
      <link>https://www.reddit.com/r/programming/comments/1o73u1u/stumbled_upon_this_electron_but_for_java_project/</link>
      <description><![CDATA[ 由   提交/u/sunnykentz  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o73u1u/stumbled_upon_this_electron_but_for_java_project/</guid>
      <pubDate>Wed, 15 Oct 2025 06:43:37 GMT</pubDate>
    </item>
    <item>
      <title>我是一名程序员，而不是批准 Copilot 生成代码的橡皮图章</title>
      <link>https://www.reddit.com/r/programming/comments/1o729o1/i_am_a_programmer_not_a_rubberstamp_that_approves/</link>
      <description><![CDATA[ 由   提交/u/pyeri  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o729o1/i_am_a_programmer_not_a_rubberstamp_that_approves/</guid>
      <pubDate>Wed, 15 Oct 2025 05:09:03 GMT</pubDate>
    </item>
    <item>
      <title>现代编译器如何优化代码演练</title>
      <link>https://www.reddit.com/r/programming/comments/1o722wo/how_modern_compilers_optimize_code_a_walkthrough/</link>
      <description><![CDATA[ 由   提交 /u/CockroachFair4921   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o722wo/how_modern_compilers_optimize_code_a_walkthrough/</guid>
      <pubDate>Wed, 15 Oct 2025 04:58:19 GMT</pubDate>
    </item>
    <item>
      <title>运行具有自动扩展和实时流量的持久 WebSocket API 的最经济高效的方法是什么？</title>
      <link>https://www.reddit.com/r/programming/comments/1o71amc/whats_the_most_costefficient_way_to_run_a/</link>
      <description><![CDATA[我一直在 Go (Gin) 中开发实时后端，通过 WebSocket 连接桥接 VS Code 扩展和移动客户端。 API 处理设备配对、身份验证和实时消息传递 — 充当桌面和客户端之间的发现和消息代理服务  当前架构  语言： Go 1.21 平台： Google Cloud Platform（自动扩展实例组） 负载均衡器 具有粘性会话的 GCP HTTP(S) LB（CLIENT_IP 亲和性） 数据库： Firestore（NoSQL、自动扩展） 并发性：每个实例约 200 个套接字，总共最多 3000 个 扩展触发器： CPU 利用率 75% 成本范围：27 美元 - 60 美元/月 设计：先填充后溢出自动扩展、每个实例的内存中消息代理 TLS： Google 管理的 SSL 证书  该设置表现良好 - 实例自动扩展，粘性会话保持 WebSocket 持久性，Firestore 处理持久状态。 单个 Hetzner CPX 服务器可以更经济高效地处理相同的负载，而不会损失太多可靠性。 编程和编程架构问题 对于那些构建过类似实时 Go 或 WebSocket 系统的人：  对于并发 Go 服务，您如何决定何时横向扩展（多实例）与纵向扩展（单个强大节点）？ 您是否找到了 Hetzner 或类似的裸机 提供商对于稳定的 WebSocket 工作负载更具成本效益？ 我设计中的每个实例都维护自己的消息代理和令牌缓存； Firestore 存储持久数据。粘性会话避免了跨节点协调 - 这种方法是否存在隐藏的扩展陷阱？ 添加 Redis Pub/Sub 或轻量级状态总线实际上会提高可靠性，还是只会增加复杂性和成本？ 对于长期存在的 WebSocket，是否有人发现 Kubernetes 或 Cloud Run 在实践中比手动管理更便宜 虚拟机？  我主要是在系统扩展时尝试平衡成本、可靠性和架构简单性。   由   提交 /u/vscoderCopilot   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o71amc/whats_the_most_costefficient_way_to_run_a/</guid>
      <pubDate>Wed, 15 Oct 2025 04:14:37 GMT</pubDate>
    </item>
    <item>
      <title>我一晚上就开发了一个应用程序来跟踪我的工作申请。它叫做 jobGetsJob，我想要真正的反馈</title>
      <link>https://www.reddit.com/r/programming/comments/1o711py/construí_en_una_noche_una_app_para_seguir_mis/</link>
      <description><![CDATA[昨晚，我遇到了快速构建一些东西的错误。 我有一个想法，已经思考了一段时间，我说：“好吧，考虑得足够多了，我会做的。” 因此，在一个晚上，我组装了 jobGetsJob，一个可以跟踪所有这些想法的应用程序。工作申请，并像项目一样组织你的工作搜索。 这个想法很简单，几乎显而易见：获得工作也是一份工作，如果你可以组织你的代码，为什么不以同样的方式组织你的申请？ 它只不过是一个 MVP，一个第一个版本，一个测试是否真的需要的东西。 这就是为什么我将其上传到网上，我想要 真实反馈，未经过滤。您觉得它有用吗？你是不是缺少了什么？如果你正在找工作，你会使用它吗？ 你可以在这里输入并尝试👇 https://jobgetsjob.vercel.app/   由   提交/u/fertejo20  [链接]   &lt;跨度&gt; &lt;跨度&gt;]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o711py/construí_en_una_noche_una_app_para_seguir_mis/</guid>
      <pubDate>Wed, 15 Oct 2025 04:01:20 GMT</pubDate>
    </item>
    <item>
      <title>在 Zig 中构建 Redis 克隆 — 第 2 部分</title>
      <link>https://www.reddit.com/r/programming/comments/1o6zjom/building_a_redis_clone_in_zigpart_2/</link>
      <description><![CDATA[ 由   提交 /u/pseudocharleskk   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o6zjom/building_a_redis_clone_in_zigpart_2/</guid>
      <pubDate>Wed, 15 Oct 2025 02:46:10 GMT</pubDate>
    </item>
    <item>
      <title>Augment Code 的定价是不可持续的</title>
      <link>https://www.reddit.com/r/programming/comments/1o6zdnn/augment_codes_pricing_is_unsustainable/</link>
      <description><![CDATA[ 由   提交/u/grauenwolf   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o6zdnn/augment_codes_pricing_is_unsustainable/</guid>
      <pubDate>Wed, 15 Oct 2025 02:38:05 GMT</pubDate>
    </item>
    <item>
      <title>从头开始理解容器：使用 Bash 构建容器（没有 Docker，没有魔法）</title>
      <link>https://www.reddit.com/r/programming/comments/1o6wkca/understanding_containers_from_scratch_building/</link>
      <description><![CDATA[多年来，Docker 已经成为许多开发人员的黑匣子——我们每天都使用它，但很少有人真正了解幕后发生的事情。 我想真正了解容器如何隔离进程、管理文件系统和设置网络。因此，我决定仅使用 Bash 脚本从头开始构建自己的容器 - 没有 Docker，没有 Podman，只有 Linux 原语，例如： • 用于文件系统隔离的 chroot • 用于进程和命名空间隔离的取消共享和克隆 • 用于容器网络的 veth 对 • 以及一些用于端口转发的 iptables 技巧 结果：一个在自己的网络内运行 Node.js Web 应用程序的小型容器， 文件系统 - 完全使用 shell 命令构建。 这是完整的深入探讨https://youtu.be/FNfNxoOIZJs   由   提交/u/abhishekkumar333  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o6wkca/understanding_containers_from_scratch_building/</guid>
      <pubDate>Wed, 15 Oct 2025 00:26:22 GMT</pubDate>
    </item>
    <item>
      <title>CamoLeak：关键 GitHub Copilot 漏洞泄露私人源代码</title>
      <link>https://www.reddit.com/r/programming/comments/1o6tew1/camoleak_critical_github_copilot_vulnerability/</link>
      <description><![CDATA[ 由   提交/u/grauenwolf   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o6tew1/camoleak_critical_github_copilot_vulnerability/</guid>
      <pubDate>Tue, 14 Oct 2025 22:09:25 GMT</pubDate>
    </item>
    <item>
      <title>为什么你的老板不担心人工智能——“你就不能把它关掉吗？”</title>
      <link>https://www.reddit.com/r/programming/comments/1o6sjes/why_your_boss_isnt_worried_about_ai_cant_you_just/</link>
      <description><![CDATA[ 由   提交/u/cheerfulboy  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o6sjes/why_your_boss_isnt_worried_about_ai_cant_you_just/</guid>
      <pubDate>Tue, 14 Oct 2025 21:34:30 GMT</pubDate>
    </item>
    <item>
      <title>2.97 美元的 ADC 能有多糟糕？</title>
      <link>https://www.reddit.com/r/programming/comments/1o6siqy/how_bad_can_a_297_adc_be/</link>
      <description><![CDATA[ 由   提交/u/cheerfulboy  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o6siqy/how_bad_can_a_297_adc_be/</guid>
      <pubDate>Tue, 14 Oct 2025 21:33:48 GMT</pubDate>
    </item>
    <item>
      <title>2025 年从自主代理到人工 QA、AI 测试工具</title>
      <link>https://www.reddit.com/r/programming/comments/1o6si9q/from_autonomous_agents_to_humanassisted_qa_ai/</link>
      <description><![CDATA[ 由   提交/u/cheerfulboy  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o6si9q/from_autonomous_agents_to_humanassisted_qa_ai/</guid>
      <pubDate>Tue, 14 Oct 2025 21:33:16 GMT</pubDate>
    </item>
    <item>
      <title>干净的承诺如何让公关审查变得更容易</title>
      <link>https://www.reddit.com/r/programming/comments/1o6rbo1/how_clean_commits_make_pr_reviews_easier/</link>
      <description><![CDATA[众所周知，审查拉取请求非常耗时，而且非常重要。因此，加快审核速度并实现更高质量的审核应该成为所有开发人员的一项关键技能。然而，我发现绝大多数 PR 对审阅者非常不友好。 在 我写的这篇文章 一些 git 命令可以帮助您制作更容易审查的 PR。经过一些练习，最终会相当快地执行，您的整个团队都会感谢您。   由   提交/u/fogeyman   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o6rbo1/how_clean_commits_make_pr_reviews_easier/</guid>
      <pubDate>Tue, 14 Oct 2025 20:48:38 GMT</pubDate>
    </item>
    </channel>
</rss>