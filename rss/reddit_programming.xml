<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Tue, 26 Aug 2025 06:24:32 GMT</lastBuildDate>
    <item>
      <title>建立了一个随着时间的时间的实际工作状况的AI代理[开源]</title>
      <link>https://www.reddit.com/r/programming/comments/1n0e024/built_an_ai_agent_that_actually_gets_better_at/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;    project：无结构化  这个自我改进的AI代理会采用杂乱的文档（发票，合同，医疗报告，任何），并将它们变成干净的，结构化的数据和CSV数据。但是，这是踢脚 -  实际上它随着时间的推移而在工作中的工作变得更好   该项目是完全开源的 （仅是后端） - 随时可以：     🔧为您的特定需求进行修改 代理商  您怎么看？欢迎任何疑问，评论或反馈   &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/_coder23t8      [link]   ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n0e024/built_an_ai_agent_that_actually_gets_better_at/</guid>
      <pubDate>Tue, 26 Aug 2025 06:00:48 GMT</pubDate>
    </item>
    <item>
      <title>为什么我的“优化” o（1）空间python代码比“基本” o（n）空格版本慢？</title>
      <link>https://www.reddit.com/r/programming/comments/1n0dkqe/why_is_my_optimized_o1_space_python_code_slower/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  大家好， 我是一名学生在python中磨碎DSA，我有点困惑。 我正在解决“ palindrome链接列表” list; quot&#39;问题。我写了两个解决方案：   “基本”方式：将所有节点值转输入列表中，然后使用两个指针检查是否是回文。这使用o（n）空间，并在 9ms 中运行。  “优化”方式：经典的乌龟和刺激算法可以找到中间，倒转列表的后半部分，然后进行比较。这应该是更好的，因为它是O（1）空间，但是它采用 19ms 。   那么，什么给出了呢？为什么“更好”的解决方案是在纸面上，实际上是慢速的两倍？这只是python的一个怪癖，列表操作超级快吗？ 更重要的是，对于面试，他们期望什么？我应该编码理论上最好的编码，还是在小测试用例上实际运行更快的编码？  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32;  /u/Chemical-Menu8915   [link]  &lt;a href =“ https://www.reddit.com/r/programming/comments/1n0dkqe/why_is_mmy_my_my_my_optimized_o1_space_python_code_slower/]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n0dkqe/why_is_my_optimized_o1_space_python_code_slower/</guid>
      <pubDate>Tue, 26 Aug 2025 05:34:11 GMT</pubDate>
    </item>
    <item>
      <title>多亏了Neovim，我爱上了编程 - 这就是为什么我在Neovim编程的原因。</title>
      <link>https://www.reddit.com/r/programming/comments/1n0a9yw/thanks_to_neovim_i_fell_in_love_with_programming/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  大家好！这是我的第一篇博客文章，所以没有什么太喜欢了。我要分享一些关于我如何在Neovim进行编码的内容，尽管英语不是我最强大的西装，但我希望您喜欢阅读！  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/undappygamer10      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n0a9yw/thanks_to_neovim_i_fell_in_love_with_programming/</guid>
      <pubDate>Tue, 26 Aug 2025 02:35:14 GMT</pubDate>
    </item>
    <item>
      <title>为Web浏览器构建Ebitengine游戏（教程）</title>
      <link>https://www.reddit.com/r/programming/comments/1n08i9i/building_ebitengine_games_for_web_browsers/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/tslocum      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n08i9i/building_ebitengine_games_for_web_browsers/</guid>
      <pubDate>Tue, 26 Aug 2025 01:12:42 GMT</pubDate>
    </item>
    <item>
      <title>将小偷从C ++升级到C ++ 20的挑战和好处20 -Keith Stockdale Accu 2025</title>
      <link>https://www.reddit.com/r/programming/comments/1n07ry9/challenges_and_benefits_of_upgrading_sea_of/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/bluegoliach      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n07ry9/challenges_and_benefits_of_upgrading_sea_of/</guid>
      <pubDate>Tue, 26 Aug 2025 00:39:45 GMT</pubDate>
    </item>
    <item>
      <title>Windows的最终副本键 - > CTRL映射解决方案</title>
      <link>https://www.reddit.com/r/programming/comments/1n07ga1/the_ultimate_copilot_key_ctrl_mapping_solution/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  当我拿到新的笔记本电脑时，我没有意识到副盒钥匙会很痛苦。将其映射回CTRL需要额外的SW，并且在尝试了所有可用的选项之后，我仍然无法使用重新装订的键正确绕我的代码进行导航。问题在于，硬件会发送Win+Shift+F23信号，从而垄断了移位状态。没有一个重新映射工具能够考虑到这一点，从而使Shift-Ctrl-Arrow导航不可能。这是我在编码时经常使用的东西，因此它使我的笔记本电脑上的工作变得很痛苦。 我设法以一个小型驱动程序的形式创建了一个识别和弦的小驱动程序的解决方法。对我来说非常适合我，但我想在这里进行审查 - 也许有驾驶员开发经验的人对如何更容易访问它有一些指导。似乎确实需要这样的事情。目前，由于驾驶员，证书和安全性的明显原因，还没有二进制发布。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/boyc       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n07ga1/the_ultimate_copilot_key_ctrl_mapping_solution/</guid>
      <pubDate>Tue, 26 Aug 2025 00:25:02 GMT</pubDate>
    </item>
    <item>
      <title>当AI犯错误时：为什么开发人员仍然需要手动测试</title>
      <link>https://www.reddit.com/r/programming/comments/1n06z34/when_ai_gets_accessibility_wrong_why_developers/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/sorressean      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n06z34/when_ai_gets_accessibility_wrong_why_developers/</guid>
      <pubDate>Tue, 26 Aug 2025 00:03:24 GMT</pubDate>
    </item>
    <item>
      <title>元帅疯狂：红宝石挑剔的简短历史</title>
      <link>https://www.reddit.com/r/programming/comments/1n05ytb/marshal_madness_a_brief_history_of_ruby/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/ketralnis     [link]        [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n05ytb/marshal_madness_a_brief_history_of_ruby/</guid>
      <pubDate>Mon, 25 Aug 2025 23:19:00 GMT</pubDate>
    </item>
    <item>
      <title>算术的快速字节码VM：编译器</title>
      <link>https://www.reddit.com/r/programming/comments/1n05yrp/a_fast_bytecode_vm_for_arithmetic_the_compiler/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/ketralnis       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n05yrp/a_fast_bytecode_vm_for_arithmetic_the_compiler/</guid>
      <pubDate>Mon, 25 Aug 2025 23:18:57 GMT</pubDate>
    </item>
    <item>
      <title>Kruci：UI库的验尸</title>
      <link>https://www.reddit.com/r/programming/comments/1n05y0x/kruci_postmortem_of_a_ui_library/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/ketralnis       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n05y0x/kruci_postmortem_of_a_ui_library/</guid>
      <pubDate>Mon, 25 Aug 2025 23:18:05 GMT</pubDate>
    </item>
    <item>
      <title>生锈中的内存文件系统</title>
      <link>https://www.reddit.com/r/programming/comments/1n05x7y/inmemory_filesystems_in_rust/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/ketralnis       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n05x7y/inmemory_filesystems_in_rust/</guid>
      <pubDate>Mon, 25 Aug 2025 23:17:05 GMT</pubDate>
    </item>
    <item>
      <title>Zig中的匿名结构</title>
      <link>https://www.reddit.com/r/programming/comments/1n05wdp/anonymous_structavaganza_in_zig/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/ketralnis       [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n05wdp/anonymous_structavaganza_in_zig/</guid>
      <pubDate>Mon, 25 Aug 2025 23:16:05 GMT</pubDate>
    </item>
    <item>
      <title>终身孔的线性扫描</title>
      <link>https://www.reddit.com/r/programming/comments/1n05veu/linear_scan_with_lifetime_holes/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/ketralnis      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n05veu/linear_scan_with_lifetime_holes/</guid>
      <pubDate>Mon, 25 Aug 2025 23:14:58 GMT</pubDate>
    </item>
    <item>
      <title>正则表达匹配可以简单快速（2007年）</title>
      <link>https://www.reddit.com/r/programming/comments/1n05v7t/regular_expression_matching_can_be_simple_and/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/ketralnis       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n05v7t/regular_expression_matching_can_be_simple_and/</guid>
      <pubDate>Mon, 25 Aug 2025 23:14:45 GMT</pubDate>
    </item>
    <item>
      <title>吠叫棘轮树 -  MLS既不是皇家也不是裸体</title>
      <link>https://www.reddit.com/r/programming/comments/1n05uvg/barking_up_the_ratchet_tree_mls_is_neither_royal/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/ketralnis     [link]   ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n05uvg/barking_up_the_ratchet_tree_mls_is_neither_royal/</guid>
      <pubDate>Mon, 25 Aug 2025 23:14:21 GMT</pubDate>
    </item>
    </channel>
</rss>