<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Wed, 08 Oct 2025 15:20:16 GMT</lastBuildDate>
    <item>
      <title>介绍和动力|打字稿就像c＃</title>
      <link>https://www.reddit.com/r/programming/comments/1o1bo11/intro_and_motivation_typescript_is_like_c/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/xadartt      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o1bo11/intro_and_motivation_typescript_is_like_c/</guid>
      <pubDate>Wed, 08 Oct 2025 14:14:16 GMT</pubDate>
    </item>
    <item>
      <title>N3694：带有数据的函数 - C 中的闭包（概述块、嵌套函数和 Lambda 的综合提案）</title>
      <link>https://www.reddit.com/r/programming/comments/1o1bex5/n3694_functions_with_data_closures_in_c_a/</link>
      <description><![CDATA[ 由   提交/u/ketralnis  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o1bex5/n3694_functions_with_data_closures_in_c_a/</guid>
      <pubDate>Wed, 08 Oct 2025 14:04:44 GMT</pubDate>
    </item>
    <item>
      <title>您应该使用上限版本约束吗？</title>
      <link>https://www.reddit.com/r/programming/comments/1o1bd4c/should_you_use_upper_bound_version_constraints/</link>
      <description><![CDATA[ 由   提交 /u/ketralnis   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o1bd4c/should_you_use_upper_bound_version_constraints/</guid>
      <pubDate>Wed, 08 Oct 2025 14:02:45 GMT</pubDate>
    </item>
    <item>
      <title>我们如何在GO的ARM64编译器中找到错误</title>
      <link>https://www.reddit.com/r/programming/comments/1o1bcvl/how_we_found_a_bug_in_gos_arm64_compiler/</link>
      <description><![CDATA[ 由   提交/u/ketralnis  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o1bcvl/how_we_found_a_bug_in_gos_arm64_compiler/</guid>
      <pubDate>Wed, 08 Oct 2025 14:02:31 GMT</pubDate>
    </item>
    <item>
      <title>构建零知识密码管理器和加密驱动器</title>
      <link>https://www.reddit.com/r/programming/comments/1o1b6dr/building_a_zeroknowledge_password_manager_and/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  大家好，你能帮我得到一些星星吗？也喜欢听到反馈和贡献  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/itsmeakhil       [commiss]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o1b6dr/building_a_zeroknowledge_password_manager_and/</guid>
      <pubDate>Wed, 08 Oct 2025 13:55:41 GMT</pubDate>
    </item>
    <item>
      <title>测试编译器驱动的全栈框架</title>
      <link>https://www.reddit.com/r/programming/comments/1o1awux/testing_a_compilerdriven_fullstack_framework/</link>
      <description><![CDATA[ 由   提交/u/matijash  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o1awux/testing_a_compilerdriven_fullstack_framework/</guid>
      <pubDate>Wed, 08 Oct 2025 13:45:20 GMT</pubDate>
    </item>
    <item>
      <title>无服务器：快速上市，更快地到未来•Srushith repakula</title>
      <link>https://www.reddit.com/r/programming/comments/1o192hi/serverless_fast_to_market_faster_to_the_future/</link>
      <description><![CDATA[ 由   提交 /u/goto-con   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o192hi/serverless_fast_to_market_faster_to_the_future/</guid>
      <pubDate>Wed, 08 Oct 2025 12:27:49 GMT</pubDate>
    </item>
    <item>
      <title>上下文工程和 API</title>
      <link>https://www.reddit.com/r/programming/comments/1o18p73/context_engineering_apis/</link>
      <description><![CDATA[ 由   提交 /u/Finn55   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o18p73/context_engineering_apis/</guid>
      <pubDate>Wed, 08 Oct 2025 12:11:14 GMT</pubDate>
    </item>
    <item>
      <title>大规模解决双重预订：顶尖科技公司的系统设计模式</title>
      <link>https://www.reddit.com/r/programming/comments/1o170e7/solving_double_booking_at_scale_system_design/</link>
      <description><![CDATA[ 由   提交/u/Local_Ad_6109   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o170e7/solving_double_booking_at_scale_system_design/</guid>
      <pubDate>Wed, 08 Oct 2025 10:43:27 GMT</pubDate>
    </item>
    <item>
      <title>使用 TornadoVM 在纯现代 Java 中对 GPU 进行编程</title>
      <link>https://www.reddit.com/r/programming/comments/1o16jwu/program_gpus_in_pure_modern_java_with_tornadovm/</link>
      <description><![CDATA[ 由   提交/u/mikebmx1  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o16jwu/program_gpus_in_pure_modern_java_with_tornadovm/</guid>
      <pubDate>Wed, 08 Oct 2025 10:16:27 GMT</pubDate>
    </item>
    <item>
      <title>WebAssembly WASI编译器在Web浏览器中使用Exaequos</title>
      <link>https://www.reddit.com/r/programming/comments/1o165l5/webassembly_wasi_compilers_in_the_web_browser/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/exaequos      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o165l5/webassembly_wasi_compilers_in_the_web_browser/</guid>
      <pubDate>Wed, 08 Oct 2025 09:52:10 GMT</pubDate>
    </item>
    <item>
      <title>Spring 中的 mTLS：为什么它很重要以及如何使用 HashiCorp Vault 和内存证书实现它（BitDive 案例研究）</title>
      <link>https://www.reddit.com/r/programming/comments/1o15z4f/mtls_in_spring_why_it_matters_and_how_to/</link>
      <description><![CDATA[]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o15z4f/mtls_in_spring_why_it_matters_and_how_to/</guid>
      <pubDate>Wed, 08 Oct 2025 09:40:38 GMT</pubDate>
    </item>
    <item>
      <title>Tsoding，野牛和可能的替代品</title>
      <link>https://www.reddit.com/r/programming/comments/1o15f77/tsoding_bison_and_possible_alternatives/</link>
      <description><![CDATA[于是，编程影响者Tsoding（我时不时地看他）制作了一个关于Yacc、Bison和其他解析工具的视频。这显然是他的系列的一部分，他在其中探讨了神秘且过时的 GNU 内容。要么做出替代方案，要么取笑它，或者两者兼而有之。 事情是这样的......当我学习语言理论时，他们使用 Bison 给我们提供了“现实生活”的语言。正在使用的语法示例...它仍然是我至今使用的工具。现在我开始担心我可能正在使用过时的工具，并且我需要探索更好的替代方案。 我还有一些方法来完成视频，但从我到目前为止所看到的来看，Tsoding 没有引用任何更好或更现代的方法来解析代码。这促使我发布此内容... 您日常使用什么来编写语法/解析代码？您在 C/Cpp 中使用什么？ Python 呢？   由   提交/u/Nac_oh  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o15f77/tsoding_bison_and_possible_alternatives/</guid>
      <pubDate>Wed, 08 Oct 2025 09:04:09 GMT</pubDate>
    </item>
    <item>
      <title>CSS有42个单元</title>
      <link>https://www.reddit.com/r/programming/comments/1o12gps/css_has_42_units/</link>
      <description><![CDATA[ 由   提交 /u/harromeister   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o12gps/css_has_42_units/</guid>
      <pubDate>Wed, 08 Oct 2025 05:54:07 GMT</pubDate>
    </item>
    <item>
      <title>设计用于分支AI对话的SDK（Python + Typescript）</title>
      <link>https://www.reddit.com/r/programming/comments/1o10zkb/designing_an_sdk_for_branching_ai_conversations/</link>
      <description><![CDATA[传统的 AI 聊天 API 是线性的 - 从头到尾都是一条消息链。 当我们开始尝试分支对话（任何消息都可以分叉到新路径）时，出现了许多有趣的技术问题。 一些更具挑战性的部分：  将分支表示为图形而不是列表，同时保留它 可查询且轻量级。 高效维护上下文 - 决定分支是继承完整历史记录、部分历史记录还是重新开始（我们将这些上下文模式称为“完整”/“部分”/“无”）。 跨多个分支同时流式传输响应，而不破坏顺序保证。 确保每个分支都有一个真正的 UUID（无“主”占位符），以便合并和引用保持一致  跨不同分支处理令牌限制和使用情况跟踪。  最终结果是一个小型跨语言 SDK (Python + TypeScript)，它将这些问题抽象出来并公开简单的调用，例如conversations.create()、branches.create() 和 messages.stream()。 我写了一篇简短的技术文章 解释我们如何处理这些设计决策以及我们在构建过程中学到了什么： https://afzal.xyz/rethinking-ai-conversations-why-branching-beats-线性-thinking-85ed5cfd97f5 很想听听其他人如何建模类似的分支或树结构对话系统 - 特别是在有效维护上下文或可视化对话图方面。   由   提交 /u/sleaktrade   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o10zkb/designing_an_sdk_for_branching_ai_conversations/</guid>
      <pubDate>Wed, 08 Oct 2025 04:28:24 GMT</pubDate>
    </item>
    </channel>
</rss>