<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Fri, 10 Oct 2025 12:32:06 GMT</lastBuildDate>
    <item>
      <title>为什么我从 HTMX 切换到 Datastar</title>
      <link>https://www.reddit.com/r/programming/comments/1o2zarl/why_i_switched_from_htmx_to_datastar/</link>
      <description><![CDATA[ 由   提交/u/BrewedDoritos  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2zarl/why_i_switched_from_htmx_to_datastar/</guid>
      <pubDate>Fri, 10 Oct 2025 12:17:49 GMT</pubDate>
    </item>
    <item>
      <title>投票：纪录片</title>
      <link>https://www.reddit.com/r/programming/comments/1o2x46y/vite_the_documentary/</link>
      <description><![CDATA[ 由   提交/u/DanielleNewnham   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2x46y/vite_the_documentary/</guid>
      <pubDate>Fri, 10 Oct 2025 10:22:24 GMT</pubDate>
    </item>
    <item>
      <title>13-18岁的程序员，编程75小时，去NASA和环球影城。</title>
      <link>https://www.reddit.com/r/programming/comments/1o2wq58/programmers_aged_1318_program_75_hours_and_go_to/</link>
      <description><![CDATA[这是 Hack Club 的一项举措，如果有足够多的人注册，那么您可以编写一个跟踪时间超过 75 小时的项目。 将挑选 100 人，支付机票费用。 我不代表 Hack Club，我只是与大家分享这个机会 (:   由   提交/u/Darthvaderpopguy   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2wq58/programmers_aged_1318_program_75_hours_and_go_to/</guid>
      <pubDate>Fri, 10 Oct 2025 09:59:51 GMT</pubDate>
    </item>
    <item>
      <title>使用简单的现实世界类比来理解并记住 23 个 GoF 设计模式。</title>
      <link>https://www.reddit.com/r/programming/comments/1o2wfyi/understand_memorize_23_gof_design_patterns_using/</link>
      <description><![CDATA[使用简单、真实的类比来学习 23 个 GoF 设计模式，使复杂的概念更容易理解。这对于准备面试的开发人员和软件工程师会有帮助。对于每种模式，您将获得清晰的定义，解释其目的，并通过类比提供一个简单的概念性示例，以帮助巩固您的理解。让我们想象一下现实世界中的类比，例如“单身人士 → 一位总统”或“观察者 → YouTube 订阅者”。   由   提交/u/erdsingh24  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2wfyi/understand_memorize_23_gof_design_patterns_using/</guid>
      <pubDate>Fri, 10 Oct 2025 09:41:49 GMT</pubDate>
    </item>
    <item>
      <title>关于绕过加拿大航空机上网络限制的故事</title>
      <link>https://www.reddit.com/r/programming/comments/1o2uqqx/a_story_about_bypassing_air_canadas_inflight/</link>
      <description><![CDATA[ 由   提交 /u/SamrayLeung   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2uqqx/a_story_about_bypassing_air_canadas_inflight/</guid>
      <pubDate>Fri, 10 Oct 2025 07:50:30 GMT</pubDate>
    </item>
    <item>
      <title>2025年面试准备 - 高级工程师</title>
      <link>https://www.reddit.com/r/programming/comments/1o2rmzs/interview_prep_in_2025_senior_engineer/</link>
      <description><![CDATA[嘿伙计们，距离我上次接受采访并在职业生涯中取得重大飞跃已经过去了 3.5 年。从那时起，该行业可以说以前所未有的速度加速发展。下一章的时间到了，我来这里寻求建议。 我是 7 岁的高级软件工程师。 这是 3 个月的高级计划： - 我要购买 AlgoExpert + SystemDesignExpert + ML Expert（上次我找工作时，Algo Expert 广告已经充斥市场。它仍然值得吗？还是应该只购买 LC 和 YT？） - Ed Donner 的 2 门 Udemy 课程（已完成 20%）关于 Agentic AI 和 LLM 工程 - 我正在亲自开发一个 IOS 和 Android 应用程序（https://dailycue.app/ 7 个月内完成 65%），我想在接下来的几个月内推出该应用程序，因此希望这对面试有很大的推动作用。我还担任一款运动健身应用程序的首席技术官，该应用程序由一家软件公司开发，并有适当的营销和法律团队参与（约投资 2 万美元），预计将于 11 月发布。 - 我将吸收并记录我在当前公司从事的所有旗舰项目，包括 2 个涉及 Gen AI 和代理系统的项目。 任何建议将不胜感激！   由   提交/u/Critical_Base8754   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2rmzs/interview_prep_in_2025_senior_engineer/</guid>
      <pubDate>Fri, 10 Oct 2025 04:40:44 GMT</pubDate>
    </item>
    <item>
      <title>《渡过风暴：值类如何增强 Java 性能》作者：Remi Forax，Clément de Tast</title>
      <link>https://www.reddit.com/r/programming/comments/1o2qhwu/weather_the_storm_how_value_classes_will_enhance/</link>
      <description><![CDATA[ 由   提交/u/BlueGoliath  [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2qhwu/weather_the_storm_how_value_classes_will_enhance/</guid>
      <pubDate>Fri, 10 Oct 2025 03:40:15 GMT</pubDate>
    </item>
    <item>
      <title>代码注释应适用于注释“执行”时的系统状态</title>
      <link>https://www.reddit.com/r/programming/comments/1o2qgbu/code_comments_should_apply_to_the_state_of_the/</link>
      <description><![CDATA[ 由   提交 /u/grauenwolf   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2qgbu/code_comments_should_apply_to_the_state_of_the/</guid>
      <pubDate>Fri, 10 Oct 2025 03:37:54 GMT</pubDate>
    </item>
    <item>
      <title>开发的未来：每个项目只允许一名开发人员。</title>
      <link>https://www.reddit.com/r/programming/comments/1o2p4wq/the_future_of_development_only_one_developer/</link>
      <description><![CDATA[ 由   提交/u/grauenwolf   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2p4wq/the_future_of_development_only_one_developer/</guid>
      <pubDate>Fri, 10 Oct 2025 02:32:24 GMT</pubDate>
    </item>
    <item>
      <title>我们是在培养创新还是技术债务？</title>
      <link>https://www.reddit.com/r/programming/comments/1o2p4l6/are_we_cultivating_innovation_or_technical_debt/</link>
      <description><![CDATA[人工智能和编程工具加速了软件开发，但代码可维护性和团队协作付出了怎样的代价？分享有关人工智能生成的代码如何引入技术债务的实用见解。在这里阅读我的深入分析：https://www.linkedin.com/feed/update/urn:li:activity:7381534536892878848/ 完整文章 可在媒体上使用： https://medium.com/@techiewissen/are-we-cultivating-innovation-or-technical-debt-019b6a0e6e1d   由   提交 /u/Responsible_Lynx_712   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2p4l6/are_we_cultivating_innovation_or_technical_debt/</guid>
      <pubDate>Fri, 10 Oct 2025 02:31:57 GMT</pubDate>
    </item>
    <item>
      <title>GitHub 最佳实践：每次编辑文件时，将其提交到 main</title>
      <link>https://www.reddit.com/r/programming/comments/1o2ovoa/github_best_practice_every_time_you_edit_a_file/</link>
      <description><![CDATA[ 由   提交/u/grauenwolf   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2ovoa/github_best_practice_every_time_you_edit_a_file/</guid>
      <pubDate>Fri, 10 Oct 2025 02:19:44 GMT</pubDate>
    </item>
    <item>
      <title>编写正则表达式是纯粹的乐趣。否则你无法说服我。</title>
      <link>https://www.reddit.com/r/programming/comments/1o2o6ew/writing_regex_is_pure_joy_you_cant_convince_me/</link>
      <description><![CDATA[ 由   提交 /u/ZoneZealousideal4073   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2o6ew/writing_regex_is_pure_joy_you_cant_convince_me/</guid>
      <pubDate>Fri, 10 Oct 2025 01:46:30 GMT</pubDate>
    </item>
    <item>
      <title>用于提高 Copilot 一致性的 copilot-instructions.md 样板</title>
      <link>https://www.reddit.com/r/programming/comments/1o2nvpx/a_boilerplate_for_copilotinstructionsmd_to/</link>
      <description><![CDATA[我已经为 copilot-instructions.md 创建了一个带有样板的 Github 要点，以帮助执行编码标准并提高 Visual Studio Code 中 Copilot 输出的一致性。 请查看并告诉我您的想法： https://gist.github.com/h8rt3rmin8r/34ccd047866c98715c14ca3ab80a82e4 欢迎贡献，因为这很大程度上是一项正在进行的工作。具体来说，与 Python 环境和 Powershell 陷阱相关的额外提示会很有用。   由   提交 /u/h8rt3rmin8r   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2nvpx/a_boilerplate_for_copilotinstructionsmd_to/</guid>
      <pubDate>Fri, 10 Oct 2025 01:31:54 GMT</pubDate>
    </item>
    <item>
      <title>消费类硬件上的万亿级哥德巴赫验证 - 新的开源 C# 算法</title>
      <link>https://www.reddit.com/r/programming/comments/1o2nsin/trillionscale_goldbach_verification_on_consumer/</link>
      <description><![CDATA[我一直在研究一种高效且新颖的经验哥德巴赫验证方法，通过使用固定的“齿轮”将每个偶数的工作量减少到 O(1)。小素数作为见证人。我没有检查每个偶数 n 的许多可能的素数对，而是只测试 n-q 是否是一个小固定集合（前 300 个素数）中 q 的素数。 关键结果： - K=300 至 10^10 的 100% 覆盖率 - &gt;万亿规模的 99.99999% 覆盖率 - 在消费类硬件上运行 （24 线程工作站） - 两种执行模式：分段筛和确定性 Miller-Rabin 它非常有效，我希望看到它在更强大的硬件上运行。 论文（Zenodo）：https://zenodo.org/records/17308646 开源实现 (C#/.NET)：https://github.com/joshkartz/Fixed-Gear-Goldbach-Engine 它是免费且开源的。检查一下，随意下载、本地运行或进行改进！   由   提交/u/joshk_art   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2nsin/trillionscale_goldbach_verification_on_consumer/</guid>
      <pubDate>Fri, 10 Oct 2025 01:27:33 GMT</pubDate>
    </item>
    <item>
      <title>你们对 Java 的深度嵌套类有何看法</title>
      <link>https://www.reddit.com/r/programming/comments/1o2nib1/what_do_yall_think_about_javas_deeply_nested/</link>
      <description><![CDATA[该视频深入探讨了 Maven 和 gradle 如何以一种非常古老的方式构建项目。   由   提交/u/sunnykentz  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o2nib1/what_do_yall_think_about_javas_deeply_nested/</guid>
      <pubDate>Fri, 10 Oct 2025 01:13:40 GMT</pubDate>
    </item>
    </channel>
</rss>