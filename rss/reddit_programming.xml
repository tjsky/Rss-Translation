<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Mon, 13 Oct 2025 21:14:12 GMT</lastBuildDate>
    <item>
      <title>我构建了一个小型 C 编译器来了解编译器的工作原理</title>
      <link>https://www.reddit.com/r/programming/comments/1o5vsh7/i_built_a_small_c_compiler_to_understand_how/</link>
      <description><![CDATA[我是一名软件工程师，想要了解编译器内部到底发生了什么 - 从解析到解释。 因此，我构建了一个名为 **Mini C Compiler** 的小型教育项目，它支持 C 的子集并通过解释器运行代码。 它并不是为了快速或完整，而是为了帮助理解编译器中的核心概念。 动手的方式。  我还提供了完整的文档，为有兴趣学习的人解释每个步骤。 🔗 GitHub：https://github.com/ironrinox/mini-c-compiler   由   提交/u/ironrinox9  [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o5vsh7/i_built_a_small_c_compiler_to_understand_how/</guid>
      <pubDate>Mon, 13 Oct 2025 20:48:56 GMT</pubDate>
    </item>
    <item>
      <title>生成式人工智能与代理式人工智能：有什么区别？</title>
      <link>https://www.reddit.com/r/programming/comments/1o5s6p5/generative_ai_vs_agentic_ai_whats_the_difference/</link>
      <description><![CDATA[ 由   提交 /u/thecoode   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o5s6p5/generative_ai_vs_agentic_ai_whats_the_difference/</guid>
      <pubDate>Mon, 13 Oct 2025 18:38:12 GMT</pubDate>
    </item>
    <item>
      <title>Redis 上运行的 Lua 脚本存在严重漏洞 - CVE-2025-49844</title>
      <link>https://www.reddit.com/r/programming/comments/1o5rmrn/critical_vulnerability_in_lua_scripts_run_on/</link>
      <description><![CDATA[我想知道你们对将脚本语言引入键值存储以便您可以“高效且原子地在 Redis 中执行部分应用程序逻辑”的整个想法有何看法。   由   提交/u/matt_112358  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o5rmrn/critical_vulnerability_in_lua_scripts_run_on/</guid>
      <pubDate>Mon, 13 Oct 2025 18:18:15 GMT</pubDate>
    </item>
    <item>
      <title>测试并不能证明代码是正确的……他们只是同意它</title>
      <link>https://www.reddit.com/r/programming/comments/1o5rh32/tests_dont_prove_code_is_correct_they_just_agree/</link>
      <description><![CDATA[“测试并不能证明某件事是正确的，而是证明一段代码的行为方式与另一段代码认为它应该行为的方式相同。” 有一天，我在编写一些“完美通过”的测试时突然想到了这个想法。我意识到他们实际上并没有证明任何东西——只是确认我在两个地方的假设是匹配的。 当你的实现和测试都有相同的错误假设时，一切仍然会通过。绿色复选标记，虚假信心。 这让我重新思考测试的用途。它们并不是真正要证明真理——更多的是要锁定意图。一种说法是，“如果我改变这种行为，我想知道。” 棘手的部分是意图本身可能是错误的。 无论如何，这只是太多追求 100% 覆盖率的深夜的随机反映。很好奇你们都怎么想的——你们认为测试是验证、文档，还是只是控制混乱的护栏？   由   提交 /u/untypedfuture   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o5rh32/tests_dont_prove_code_is_correct_they_just_agree/</guid>
      <pubDate>Mon, 13 Oct 2025 18:12:44 GMT</pubDate>
    </item>
    <item>
      <title>基于行的 Lisp 编辑</title>
      <link>https://www.reddit.com/r/programming/comments/1o5res3/linebased_lisp_editing/</link>
      <description><![CDATA[ 由   提交/u/aartaka  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o5res3/linebased_lisp_editing/</guid>
      <pubDate>Mon, 13 Oct 2025 18:10:27 GMT</pubDate>
    </item>
    <item>
      <title>《星际迷航》中没有程序员</title>
      <link>https://www.reddit.com/r/programming/comments/1o5rdyg/there_are_no_programmers_in_star_trek/</link>
      <description><![CDATA[ 由   提交/u/Active-Fuel-49   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o5rdyg/there_are_no_programmers_in_star_trek/</guid>
      <pubDate>Mon, 13 Oct 2025 18:09:42 GMT</pubDate>
    </item>
    <item>
      <title>技术债务：让开发人员现在更快乐，或者以后付出更多</title>
      <link>https://www.reddit.com/r/programming/comments/1o5nnoe/technical_debt_make_developers_happier_now_or_pay/</link>
      <description><![CDATA[ 由   提交/u/nosoyjohn  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o5nnoe/technical_debt_make_developers_happier_now_or_pay/</guid>
      <pubDate>Mon, 13 Oct 2025 15:57:35 GMT</pubDate>
    </item>
    <item>
      <title>使用 Swift Subprocess 自动化所有事情</title>
      <link>https://www.reddit.com/r/programming/comments/1o5nm1t/automate_all_the_things_with_swift_subprocess/</link>
      <description><![CDATA[ 由   提交/u/jacobs-tech-tavern   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o5nm1t/automate_all_the_things_with_swift_subprocess/</guid>
      <pubDate>Mon, 13 Oct 2025 15:55:58 GMT</pubDate>
    </item>
    <item>
      <title>如何使用人工智能帮助完成软件工程任务</title>
      <link>https://www.reddit.com/r/programming/comments/1o5kmc5/how_to_use_ai_to_help_with_software_engineering/</link>
      <description><![CDATA[ 由   提交 /u/gregorojstersek   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o5kmc5/how_to_use_ai_to_help_with_software_engineering/</guid>
      <pubDate>Mon, 13 Oct 2025 14:04:53 GMT</pubDate>
    </item>
    <item>
      <title>汇编编程是残酷的，也是美丽的，甚至可能是通往更好人工智能的道路</title>
      <link>https://www.reddit.com/r/programming/comments/1o5jq1w/programming_in_assembly_is_brutal_beautiful_and/</link>
      <description><![CDATA[ 由   提交/u/wiredmagazine  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o5jq1w/programming_in_assembly_is_brutal_beautiful_and/</guid>
      <pubDate>Mon, 13 Oct 2025 13:28:29 GMT</pubDate>
    </item>
    <item>
      <title>环境变量是一个遗留的混乱：让我们深入研究它们</title>
      <link>https://www.reddit.com/r/programming/comments/1o5j78b/environment_variables_are_a_legacy_mess_lets_dive/</link>
      <description><![CDATA[ 由   提交/u/Low-Strawberry7579  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o5j78b/environment_variables_are_a_legacy_mess_lets_dive/</guid>
      <pubDate>Mon, 13 Oct 2025 13:06:30 GMT</pubDate>
    </item>
    <item>
      <title>原子幂等性：精确一次执行的实用方法</title>
      <link>https://www.reddit.com/r/programming/comments/1o5huwk/atomic_idempotency_a_practical_approach_to/</link>
      <description><![CDATA[ 由   提交 /u/ymz-ncnk   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o5huwk/atomic_idempotency_a_practical_approach_to/</guid>
      <pubDate>Mon, 13 Oct 2025 12:06:20 GMT</pubDate>
    </item>
    <item>
      <title>了解 Go 中的适配器设计模式：实用指南</title>
      <link>https://www.reddit.com/r/programming/comments/1o5hsqh/understanding_the_adapter_design_pattern_in_go_a/</link>
      <description><![CDATA[嘿伙计们， 我刚刚写完一篇关于 Go 中的适配器设计模式的深入博客 - 这种模式乍一看很简单，但实际上在集成遗留系统或第三方系统时可以节省您的理智。 这篇文章涵盖了从基础知识到实际代码示例的所有内容：  如何制作 不兼容的接口可以在不接触旧代码的情况下协同工作 何时实际使用适配器（何时不使用） 类适配器与对象适配器之间的区别 真实世界的示例，例如包装 JSON 记录器或支付 API 常见的反模式（例如“适配器地狱”😅） Go 特定的习惯用法： 轻量级、界面驱动且干净  如果您曾经发现自己编写丑陋的粘合代码只是为了让两个系统进行对话 - 这就是为您准备的。 🔗 阅读此处： https://medium.com/design-bootcamp/understanding-the-adapter-design-pattern-in-go-a-practical-guide-a595b256a08b 很想听听您如何处理 Go 中的遗留集成或 SDK 不匹配问题 - 您使用适配器还是进行完全重写？   由   提交/u/priyankchheda15   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o5hsqh/understanding_the_adapter_design_pattern_in_go_a/</guid>
      <pubDate>Mon, 13 Oct 2025 12:03:19 GMT</pubDate>
    </item>
    <item>
      <title>OpenAI 消灭了廉价的 ChatGPT 包装器……真的吗？</title>
      <link>https://www.reddit.com/r/programming/comments/1o5h5sv/openai_killed_off_cheap_chatgpt_wrappers_or_did_it/</link>
      <description><![CDATA[在上周的开发日会议上发布的一项重大公告中，OpenAI 推出了 AgentKit，这是一套新的工具，旨在更轻松地构建代理工作流程。 这对于任何在 OpenAI 平台上构建产品的人来说意味着什么？ OpenAI 正在与我们竞争吗？ 我们应该感到兴奋、担心还是忽略炒作？ 让我们深入探讨。   由   提交/u/shift_devs  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o5h5sv/openai_killed_off_cheap_chatgpt_wrappers_or_did_it/</guid>
      <pubDate>Mon, 13 Oct 2025 11:30:57 GMT</pubDate>
    </item>
    <item>
      <title>I 代表意图</title>
      <link>https://www.reddit.com/r/programming/comments/1o5ei8e/i_is_for_intent/</link>
      <description><![CDATA[ 由   提交/u/roman01la  [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o5ei8e/i_is_for_intent/</guid>
      <pubDate>Mon, 13 Oct 2025 08:53:05 GMT</pubDate>
    </item>
    </channel>
</rss>