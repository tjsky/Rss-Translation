<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Wed, 17 Sep 2025 09:20:42 GMT</lastBuildDate>
    <item>
      <title>我从高级工程师那里学到的清洁代码提示</title>
      <link>https://www.reddit.com/r/programming/comments/1nj7hb3/clean_code_tips_i_learned_from_senior_engineers/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/rag1987      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nj7hb3/clean_code_tips_i_learned_from_senior_engineers/</guid>
      <pubDate>Wed, 17 Sep 2025 08:27:07 GMT</pubDate>
    </item>
    <item>
      <title>第一次认真处理我自己的引擎仓库 - 欢迎反馈或合作者！</title>
      <link>https://www.reddit.com/r/programming/comments/1nj795p/first_time_seriously_working_on_my_own_engine/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  嘿， 我最近正在开发自己的引擎仓库。这是我第一次对结构进行更深入的思考，并真正付出努力来构建坚实的东西。 我很想听听您可能拥有的任何反馈，或者如果有人有兴趣尝试使用此引擎制作游戏，那真是太神奇了！ href =“ https://github.com/nero-thethrill/snake_engine”&gt; https://github.com/nero-thethrill/snake_engine      &lt;！ -  sc_on-&gt; 32;提交由＆＃32; /u/u/eulb--       [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nj795p/first_time_seriously_working_on_my_own_engine/</guid>
      <pubDate>Wed, 17 Sep 2025 08:12:03 GMT</pubDate>
    </item>
    <item>
      <title>您可以使用Java来解析具有10亿行天气数据的文件？ •罗伊·范·里恩（Roy van Rijn）</title>
      <link>https://www.reddit.com/r/programming/comments/1nj6z9d/how_fast_can_you_parse_a_file_with_1_billion_rows/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/goto-con      &lt;a href =“ https://www.reddit.com/r/programming/comments/1nj6z9d/how_fast_fast_can_you_parse_a_a_a_file_with_1_billion_billion_rows/]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nj6z9d/how_fast_can_you_parse_a_file_with_1_billion_rows/</guid>
      <pubDate>Wed, 17 Sep 2025 07:53:06 GMT</pubDate>
    </item>
    <item>
      <title>斯威夫特有多快？重金属版（壮举Nardi）</title>
      <link>https://www.reddit.com/r/programming/comments/1nj4ogb/how_fast_is_swift_heavy_metal_edition_feat_nardi/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  一位朋友说swift现在很快，所以我着手在粒子模拟中给它旋转。我认为你们都会从中受到踢球。  tldr; Swift比Rust慢，但比我的M1 Air上的JS V8快，它具有惊人的SIMD指令支持。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/utageous-guffin      ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nj4ogb/how_fast_is_swift_heavy_metal_edition_feat_nardi/</guid>
      <pubDate>Wed, 17 Sep 2025 05:30:44 GMT</pubDate>
    </item>
    <item>
      <title>负载平衡：“僵尸服务器”问题</title>
      <link>https://www.reddit.com/r/programming/comments/1nj3sgn/load_balancing_the_zombie_server_problem/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;     僵尸服务器解剖学：了解对其健康依据的服务器     健康检查的进化：从基本的pings到智能的应用程序级别   Real-World Patterns: How Netflix, Uber, and Amazon solve this problem Hands-On Implementation: Build a complete zombie detection system  The Zombie Server Phenomenon A zombie server looks alive to your load balancer but cannot serve real user requests.与健康检查失败的完全死亡的服务器不同，僵尸通过基本连接测试，同时默默地损坏用户体验。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/fefres_ear_10      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nj3sgn/load_balancing_the_zombie_server_problem/</guid>
      <pubDate>Wed, 17 Sep 2025 04:40:14 GMT</pubDate>
    </item>
    <item>
      <title>LLVM中的机器调度程序 - 第一部分</title>
      <link>https://www.reddit.com/r/programming/comments/1nj2z06/machine_scheduler_in_llvm_part_i/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/mariuz      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nj2z06/machine_scheduler_in_llvm_part_i/</guid>
      <pubDate>Wed, 17 Sep 2025 03:56:49 GMT</pubDate>
    </item>
    <item>
      <title>自2021年以来，华硕游戏笔记本电脑已经被打破了：深入潜水</title>
      <link>https://www.reddit.com/r/programming/comments/1niy72f/asus_gaming_laptops_have_been_broken_since_2021_a/</link>
      <description><![CDATA[＆＃32;提交由＆＃32;  /u/BlueGoliath   [link]   [注释]    ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1niy72f/asus_gaming_laptops_have_been_broken_since_2021_a/</guid>
      <pubDate>Wed, 17 Sep 2025 00:08:51 GMT</pubDate>
    </item>
    <item>
      <title>DDAO-动态数据访问对象v0.01版本</title>
      <link>https://www.reddit.com/r/programming/comments/1nixfy3/ddao_dynamic_data_access_object_v001_release/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/abbreviationsany706       [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nixfy3/ddao_dynamic_data_access_object_v001_release/</guid>
      <pubDate>Tue, 16 Sep 2025 23:35:04 GMT</pubDate>
    </item>
    <item>
      <title>SevendB：一个反应性和可扩展数据库</title>
      <link>https://www.reddit.com/r/programming/comments/1nixdww/sevendb_a_reactive_and_scalable_database/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  嘿， 我一直在研究我称之为 sevendb 的东西，我想在这里分享它是为了获得反馈，批评，甚至只是狂野的问题。  sevendb是我的实验性使用数据库。动机来自与现有系统和好奇心的挫败感：传统数据库在存储和查询方面表现出色，但它们将反应性视为事后的想法。触发器，更改饲料或酒吧/子层上的系统螺栓通常是以正确性，可伸缩性或痛苦的种族条件为代价。  sevendb采取不同的路径：反应性是核心。我们扩展了订阅和更新与插入和更新一样基本的新原始词的出色工作。  已包含在存储库中，确定性和正确性的数学证据正在进行中，很快就会添加它们。 它尚未实现，我刚刚做出了基本的确定性线束并进行了基本订阅，但是分布式部分是在进行的，但是我已经进入了这个全职，所以我期望快速开发和迭代   /u/u/shashanksati      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nixdww/sevendb_a_reactive_and_scalable_database/</guid>
      <pubDate>Tue, 16 Sep 2025 23:32:40 GMT</pubDate>
    </item>
    <item>
      <title>Swift 6.2有意义地推进语言</title>
      <link>https://www.reddit.com/r/programming/comments/1nivpxn/swift_62_advances_the_language_meaningfully/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/victor_wynne      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nivpxn/swift_62_advances_the_language_meaningfully/</guid>
      <pubDate>Tue, 16 Sep 2025 22:22:03 GMT</pubDate>
    </item>
    <item>
      <title>一个新的实验：在C ++中使Protobuf减少疼痛（灵感来自旧的“为什么Protobuf如此笨拙？”线程）</title>
      <link>https://www.reddit.com/r/programming/comments/1niuy6j/a_new_experiment_making_protobuf_in_c_less/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  大家好， 几个小时前，这里有一个生动的讨论： api如此笨拙？  我也在那个线程中，围绕这样的想法扔掉，“如果我们可以做  user [＆quod&gt; user [＆quot&#39;id; id; id; id&#39;&#39;] = 123;  ，如果您尝试过             &#39; ＆quot“ oops”;  ” 。我在那里得到的反馈非常有帮助 - 一些人指出，我基本上是在强迫JSON风格的动态进入一个静态的Protobuf世界，这并不适合。  从那时起，我就被一个称为 sugar-proto 的小型库/插件入侵。 It’s a protoc plugin that generates wrappers around your .proto messages, giving you something closer to a nlohmann/json feel, but still 100% type-safe and zero runtime reflection. Example: User user;用户包装U（用户）;联合国=“爱丽丝”； U.ID = 42; u.posts.push_back（{{{{; title; hello} hello}，{commend＆quimes＆quort＆quort;，; {{{;   在引擎盖下，这只是普通的Protobuf字段，没有隐藏的运行时映射查找。这个想法是：使API越来越笨拙，而又不假装它是JSON。  现在还早，尚未准备就绪，但我很乐意让人们踢轮胎，并告诉我感觉是对/错。 好奇地听到其他人试图在更既有的odgotobuf in a prothobuf in of Ergobobuf中都更属于既定的c++ c++++ c+++++ c。您是否认为这个方向有腿，或者Protobuf注定要始终在C ++？  &lt;！ -  sc_on-&gt;＆＃32中感觉有些java-ish。提交由＆＃32; /u/u/ushib-plastic-5285       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1niuy6j/a_new_experiment_making_protobuf_in_c_less/</guid>
      <pubDate>Tue, 16 Sep 2025 21:51:04 GMT</pubDate>
    </item>
    <item>
      <title>为初学者的87个编程想法列表</title>
      <link>https://www.reddit.com/r/programming/comments/1nitzj9/list_of_87_programming_ideas_for_beginners/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/alsweigart      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nitzj9/list_of_87_programming_ideas_for_beginners/</guid>
      <pubDate>Tue, 16 Sep 2025 21:13:25 GMT</pubDate>
    </item>
    <item>
      <title>mplicit ode求解器并不比显式ode求解器普遍强大，或者为什么没有ode求解器是最好的</title>
      <link>https://www.reddit.com/r/programming/comments/1nirweo/mplicit_ode_solvers_are_not_universally_more/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/johndoe_john      [commist]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nirweo/mplicit_ode_solvers_are_not_universally_more/</guid>
      <pubDate>Tue, 16 Sep 2025 19:54:24 GMT</pubDate>
    </item>
    <item>
      <title>分配竞技场时要小心</title>
      <link>https://www.reddit.com/r/programming/comments/1nirphn/be_careful_when_assigning_arenaallocators/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/ketralnis       [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nirphn/be_careful_when_assigning_arenaallocators/</guid>
      <pubDate>Tue, 16 Sep 2025 19:47:01 GMT</pubDate>
    </item>
    <item>
      <title>为C ++辩护</title>
      <link>https://www.reddit.com/r/programming/comments/1nirpfx/in_defense_of_c/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/ketralnis      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nirpfx/in_defense_of_c/</guid>
      <pubDate>Tue, 16 Sep 2025 19:46:59 GMT</pubDate>
    </item>
    </channel>
</rss>