<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Wed, 17 Sep 2025 12:31:45 GMT</lastBuildDate>
    <item>
      <title>信任AI编码工具正在下降</title>
      <link>https://www.reddit.com/r/programming/comments/1njbjhm/trust_in_ai_coding_tools_is_plummeting/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  堆栈溢出的2025调查〜50k devs：  对准确性的信任从43％→33％→33％→33％ 受益度从72％→60％→60％→60％       您呢？您是否相信这些工具与去年更少，更少或大致相同？  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/hdev-      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1njbjhm/trust_in_ai_coding_tools_is_plummeting/</guid>
      <pubDate>Wed, 17 Sep 2025 12:18:13 GMT</pubDate>
    </item>
    <item>
      <title>最终的SRE可靠性清单</title>
      <link>https://www.reddit.com/r/programming/comments/1njbhx3/the_ultimate_sre_reliability_checklist/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/oupeanut      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1njbhx3/the_ultimate_sre_reliability_checklist/</guid>
      <pubDate>Wed, 17 Sep 2025 12:16:08 GMT</pubDate>
    </item>
    <item>
      <title>为什么事件驱动的系统并不难</title>
      <link>https://www.reddit.com/r/programming/comments/1njauz5/why_event_driven_systems_are_not_that_hard/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/bizzehdee      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1njauz5/why_event_driven_systems_are_not_that_hard/</guid>
      <pubDate>Wed, 17 Sep 2025 11:45:39 GMT</pubDate>
    </item>
    <item>
      <title>设计国家经理以进行绩效：深入研究层次反应性</title>
      <link>https://www.reddit.com/r/programming/comments/1nja7lz/designing_a_state_manager_for_performance_a_deep/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;   hee /r/r/编程， 我想在复杂的，事件驱动的应用程序中  在复杂的架构上分享一个 ，请在复杂的架构上获得 链接的文章深入研究了一种旨在通过以特定方式组合两个众所周知的编程概念来解决此问题的体系结构：    1。并发：整个状态模型及其所有相关的计算都从主UI线程中移动到单独的工作线程中。 UI线程被视为简单的“视图层”。其唯一的工作是根据最小的批处理消息从工人那里收到的批量批处理。该架构将UI与应用程序的计算负载分离。   2。自动反应性的元编程：，而不是要求开发人员手动声明状态的哪些部分A UI组件取决于（例如，通过依赖阵列或手动订阅），该系统使用元编程（具体而言，特别是JavaScript Proxies）在运行时拦截了属性属性。这允许系统自动构建精确的依赖关系图。当一段状态发生变化时，只有精确的计算和取决于它的UI组件被通知。 本文探索这两个想法如何使用现实世界的实现作为案例研究。 我很好奇地听到您在模式上的想法，超出了任何特定的语言或框架：同时使用的UI架构？ （例如，内存开销，调试复杂性）。 “自动依赖性跟踪”如何通过代理与您合作过的其他反应性系统（例如RXJS或其他语言中的模式）？ 在UI之外还有其他域，在其中这种并发性和自动反应性的组合可能特别强大？    期待讨论。提交由＆＃32; /u/u/tobiasuhlig     [link]    ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nja7lz/designing_a_state_manager_for_performance_a_deep/</guid>
      <pubDate>Wed, 17 Sep 2025 11:12:41 GMT</pubDate>
    </item>
    <item>
      <title>Chatgpt是堆栈溢出的两倍。这可能是一个问题。</title>
      <link>https://www.reddit.com/r/programming/comments/1nj9zi2/chatgpt_is_twice_as_chatty_as_stack_overflow_that/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  皇后大学的研究人员分析了82,845个chatgpt日志， wildchat corpus ：与典型的典型&lt;336 a相比，平均型号响应： href =“ https://leaddev.com/technical-direction/how-stack-overflow-innovating-keep-ai-disruption”&gt;堆栈溢出答案。  不仅仅是代币的用法含义，编码助手是否太冗长？  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32;  /u/scarey102   [link]   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nj9zi2/chatgpt_is_twice_as_chatty_as_stack_overflow_that/</guid>
      <pubDate>Wed, 17 Sep 2025 11:00:49 GMT</pubDate>
    </item>
    <item>
      <title>高级DevOps工程师在Uber举行的采访。</title>
      <link>https://www.reddit.com/r/programming/comments/1nj9urv/senior_devops_engineer_interview_at_uber/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/ajit_45288      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nj9urv/senior_devops_engineer_interview_at_uber/</guid>
      <pubDate>Wed, 17 Sep 2025 10:53:35 GMT</pubDate>
    </item>
    <item>
      <title>在线寻找唯一目的的软件开发小组是交换知识</title>
      <link>https://www.reddit.com/r/programming/comments/1nj9pmn/looking_for_software_development_groups_online/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/sevardon     [link]   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nj9pmn/looking_for_software_development_groups_online/</guid>
      <pubDate>Wed, 17 Sep 2025 10:45:43 GMT</pubDate>
    </item>
    <item>
      <title>编码渠道</title>
      <link>https://www.reddit.com/r/programming/comments/1nj9bm1/coding_channel/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  ，所以我启动了youtube频道，发布了leetcode问题解释，以提高我的沟通，演示和解释技能。 @ThedeathCode lil支持和反馈将帮助我在我的rowherjourneyhtps：//youtube.com/@thedeathcode？si = 6-dv6aopsjesxjvv    &lt;！ -  sc_on-&gt; sc_on-&gt;＆＃32;提交由＆＃32; /u/u/death125x      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nj9bm1/coding_channel/</guid>
      <pubDate>Wed, 17 Sep 2025 10:23:22 GMT</pubDate>
    </item>
    <item>
      <title>Roshi AI聊天机器人大师 - 与海龟隐士一起火车</title>
      <link>https://www.reddit.com/r/programming/comments/1nj8mcq/master_roshi_ai_chatbot_train_with_the_turtle/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/no-base-1700       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nj8mcq/master_roshi_ai_chatbot_train_with_the_turtle/</guid>
      <pubDate>Wed, 17 Sep 2025 09:41:08 GMT</pubDate>
    </item>
    <item>
      <title>我如何建立一个帮助我快速，便宜地制造新产品的环境。它对其他任何人都有用吗？</title>
      <link>https://www.reddit.com/r/programming/comments/1nj8bjs/how_i_set_up_an_environment_that_helped_me_to/</link>
      <description><![CDATA[]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nj8bjs/how_i_set_up_an_environment_that_helped_me_to/</guid>
      <pubDate>Wed, 17 Sep 2025 09:22:13 GMT</pubDate>
    </item>
    <item>
      <title>我从高级工程师那里学到的清洁代码提示</title>
      <link>https://www.reddit.com/r/programming/comments/1nj7hb3/clean_code_tips_i_learned_from_senior_engineers/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/rag1987      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nj7hb3/clean_code_tips_i_learned_from_senior_engineers/</guid>
      <pubDate>Wed, 17 Sep 2025 08:27:07 GMT</pubDate>
    </item>
    <item>
      <title>第一次认真处理我自己的引擎仓库 - 欢迎反馈或合作者！</title>
      <link>https://www.reddit.com/r/programming/comments/1nj795p/first_time_seriously_working_on_my_own_engine/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  嘿， 我最近正在开发自己的引擎仓库。这是我第一次对结构进行更深入的思考，并真正付出努力来构建坚实的东西。 我很想听听您可能拥有的任何反馈，或者如果有人有兴趣尝试使用此引擎制作游戏，那真是太神奇了！ href =“ https://github.com/nero-thethrill/snake_engine”&gt; https://github.com/nero-thethrill/snake_engine      &lt;！ -  sc_on-&gt; 32;提交由＆＃32; /u/u/eulb--       [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nj795p/first_time_seriously_working_on_my_own_engine/</guid>
      <pubDate>Wed, 17 Sep 2025 08:12:03 GMT</pubDate>
    </item>
    <item>
      <title>您可以使用Java来解析具有10亿行天气数据的文件？ •罗伊·范·里恩（Roy van Rijn）</title>
      <link>https://www.reddit.com/r/programming/comments/1nj6z9d/how_fast_can_you_parse_a_file_with_1_billion_rows/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/goto-con      &lt;a href =“ https://www.reddit.com/r/programming/comments/1nj6z9d/how_fast_fast_can_you_parse_a_a_a_file_with_1_billion_billion_rows/]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nj6z9d/how_fast_can_you_parse_a_file_with_1_billion_rows/</guid>
      <pubDate>Wed, 17 Sep 2025 07:53:06 GMT</pubDate>
    </item>
    <item>
      <title>斯威夫特有多快？重金属版（壮举Nardi）</title>
      <link>https://www.reddit.com/r/programming/comments/1nj4ogb/how_fast_is_swift_heavy_metal_edition_feat_nardi/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  一位朋友说swift现在很快，所以我着手在粒子模拟中给它旋转。我认为你们都会从中受到踢球。  tldr; Swift比Rust慢，但比我的M1 Air上的JS V8快，它具有惊人的SIMD指令支持。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/utageous-guffin      ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nj4ogb/how_fast_is_swift_heavy_metal_edition_feat_nardi/</guid>
      <pubDate>Wed, 17 Sep 2025 05:30:44 GMT</pubDate>
    </item>
    <item>
      <title>负载平衡：“僵尸服务器”问题</title>
      <link>https://www.reddit.com/r/programming/comments/1nj3sgn/load_balancing_the_zombie_server_problem/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;     僵尸服务器解剖学：了解对其健康依据的服务器     健康检查的进化：从基本的pings到智能的应用程序级别   Real-World Patterns: How Netflix, Uber, and Amazon solve this problem Hands-On Implementation: Build a complete zombie detection system  The Zombie Server Phenomenon A zombie server looks alive to your load balancer but cannot serve real user requests.与健康检查失败的完全死亡的服务器不同，僵尸通过基本连接测试，同时默默地损坏用户体验。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/fefres_ear_10      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nj3sgn/load_balancing_the_zombie_server_problem/</guid>
      <pubDate>Wed, 17 Sep 2025 04:40:14 GMT</pubDate>
    </item>
    </channel>
</rss>