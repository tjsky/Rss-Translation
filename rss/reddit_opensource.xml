<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：Opensource</title>
    <link>https://www.reddit.com/r/opensource/new</link>
    <description>所有与开源相关的所有内容的子reddit（在此上下文中，我们在此处删除开源的定义http://en.wikipedia.org/wiki/open_source）</description>
    <lastBuildDate>Mon, 12 May 2025 06:26:18 GMT</lastBuildDate>
    <item>
      <title>构建了一个镀铬扩展名，可在16倍上跳过YT广告</title>
      <link>https://www.reddit.com/r/opensource/comments/1kkl8zv/built_a_chrome_extension_that_skips_yt_ads_on_16x/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  大家好， 所以我是一名大学生，我以2.5倍的速度观看YT讲座，有时还会使用其他Chrome扩展名来提高视频速度。但是我注意到，当广告降临时，它的速度也提高了，我很早就得到了跳过按钮。  这单击了我，我想为什么不构建一个扩展程序，该扩展名可以检测其广告并在16倍中自动播放它，然后您可以轻松地跳过它并再次回到视频。 我的意思是，我的意思是，有广告阻滞剂，但对我而言，它并不总是有效。是的，我构建了它，尚未发布它，而是添加了我的GitHub存储库，以便您可以下载并在浏览器中使用它。 https://github.com/anshaneja5/yt-ads-skipper If you have any review, please write in the comments Thanks   提交由＆＃32; /u/u/u/clear_reserve_8089     &lt;a href =“ https://www.reddit.com/r/opensource/comments/1kkl8zv/built_a_a_chrome_extension_that_skips_skips_yt_yt_ads_ads_onds_on_on_16x/]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1kkl8zv/built_a_chrome_extension_that_skips_yt_ads_on_16x/</guid>
      <pubDate>Mon, 12 May 2025 05:57:05 GMT</pubDate>
    </item>
    <item>
      <title>MixClick：cookie clicker样式游戏。</title>
      <link>https://www.reddit.com/r/opensource/comments/1kkkd18/mixclick_a_cookie_clicker_style_game/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  大家好！我一直在制作一个简单而令人上瘾的游戏，可以在名为MixClick的浏览器中玩。 这个项目是一年前创建的，但是我从未真正更新它。我很想有一些贡献者，或者只是人们喜欢游戏并给我反馈。该项目的某些内容是：  - 以不同的升级购物 - 要转换的不同样式点  - 赌博 *（是的，赌博大声笑） *  - 以及更多。 href =“ https://github.com/mixtapejaxson/mixclick/”&gt; https://github.com/mixtapejaxson/mixclick/  href =“ https://mixtapejaxson.github.io/mixclick/”&gt; https://mixtapejaxson.github.io/mixclick/ 提交由＆＃32; /u/u/low_television_4498       [link]       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1kkkd18/mixclick_a_cookie_clicker_style_game/</guid>
      <pubDate>Mon, 12 May 2025 04:59:01 GMT</pubDate>
    </item>
    <item>
      <title>我只是打开PeerSuite，这是一种分散的松弛/不和谐替代品</title>
      <link>https://www.reddit.com/r/opensource/comments/1kkftut/i_just_opensourced_peersuite_a_decentralized/</link>
      <description><![CDATA[       &lt;！ -  sc_off- sc_off-&gt;  它也可以从网络上使用 组之间的所有流量均已加密WEBRTC，没有服务器，只有P2P通信。 该工具集包括与文件发送，视频通话，屏幕共享，共享白板，斜线，斜线，斜线，斜线和协作文档界面的聊天。提交由＆＃32;  /u/thebadslime   [link]   [注释]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1kkftut/i_just_opensourced_peersuite_a_decentralized/</guid>
      <pubDate>Mon, 12 May 2025 00:43:53 GMT</pubDate>
    </item>
    <item>
      <title>生锈工具：port.pub</title>
      <link>https://www.reddit.com/r/opensource/comments/1kke82b/rust_tool_portpub/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我已经构建了一个生锈的CLI工具，将您的本地http服务器发布到Internet。    &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/theahya      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1kke82b/rust_tool_portpub/</guid>
      <pubDate>Sun, 11 May 2025 23:20:34 GMT</pubDate>
    </item>
    <item>
      <title>DJANGO REST API密钥软件包</title>
      <link>https://www.reddit.com/r/opensource/comments/1kkacwf/a_django_rest_api_key_package/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  嘿， 我已经在使用Django的一些项目工作了大约五年了。但是，当我发现DRF时，我决定专注于构建后端API应用程序，而无需与前端打交道。但是大约一两年前，我开始为某些SaaS项目构建API，我意识到我需要一个强大的API密钥管理系统。 我最初使用 https://github.com/florimondmanca/florimondmanca/djangorestframework-pramework-api-key       非常出色，并且拥有API密钥系统，包括API密钥系统，包括per in prectife in prectife in prectife perfiely perdiation perdiation per  ，但是，当我想进一步推动包装时，我会遇到一些限制。我需要诸如密钥旋转，监视和用法分析之类的功能来帮助按请求和权限计费，并在包装​​使用密码使用Hashing Algorithms创建API键的情况下进行计费。 因此，我决定创建自己的软件包。我已经在研究大约九个月到一年了，这已经走了很长一段路。 Here are some of the key features:  Quick Authentication and Permission System: You can easily implement authentication and permissions, for example, for organizations or businesses. Monitoring and Analytics: There&#39;s a built-in application to track the usage of API keys per endpoint and the number of requests made, which is great for billing or security措施。   API键旋转：此功能花了一些时间才能完美。因为包装使用 fernet 用于加密和解密API键，您可以平稳旋转API键。如果您有泄漏，则可以开始使用新的Fernet键，同时逐步淘汰旧键而不会中断。您可以在自动旋转和手动旋转之间进行选择。旧的Fernet键将用于解密API键，而新的Fernet键将用于加密新的API键。这使您有时间向用户发送有关正在进行的密钥迁移的消息。  https：////cryptography.io/en/latest/latest/latest/fernet/#cryptography.fernet.fernet.multifernet.multifernet.multifernet.multifernet  at at at at at at at at at at at at at at at at at at at at at at at at at at at at at at at at at at at at at at at at at at at at at at at at&gt;最初，我在一开始就以1.0的价格发布了版本，但是很快就意识到我应该从较低的版本编号开始。我不断地致力于改进，主要是在版本上进行。例如，键入尚未完全实现，我正在努力在接下来的几周内使用Nextra来增强文档。 我正在寻找反馈以使该软件包变得更好。无论是关于安全措施，缺失功能还是任何其他建议，我都希望收到您的来信。 您可以找到包装您可以提供的任何反馈！  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/mapdue7360     [link]   ＆＃32;   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1kkacwf/a_django_rest_api_key_package/</guid>
      <pubDate>Sun, 11 May 2025 20:21:18 GMT</pubDate>
    </item>
    <item>
      <title>Starguard  - 发现伪造GitHub星星，危险依赖和许可陷阱的CLI</title>
      <link>https://www.reddit.com/r/opensource/comments/1kk9gf5/starguard_cli_that_spots_fake_github_stars_risky/</link>
      <description><![CDATA[      ＆＃32;提交由＆＃32; /u/u/welecomemysterious122      &lt;a href =“ https://www.reddit.com/r/opensource/comments/1kk9gf5/starguard_cli_that_that_that_spots_fake_github_stars_risky/]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1kk9gf5/starguard_cli_that_spots_fake_github_stars_risky/</guid>
      <pubDate>Sun, 11 May 2025 19:42:21 GMT</pubDate>
    </item>
    <item>
      <title>构建开源JavaScript数字标牌播放器</title>
      <link>https://www.reddit.com/r/opensource/comments/1kk9g45/building_an_opensource_javascript_digital_signage/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  大家好！ 当今的数字标牌软件市场由专有的解决方案占主导项目。 而不是从完整的CMS开始，我决定首先创建一个独立的播放器应用程序，该应用程序可以使用预定义的时间表和布局独立运行。 当前WIP。对于学习目的而言，但尚未准备好生产使用。 它支持多区域屏幕布局和平稳的过渡，并用JavaScript编写，以实现最大的灵活性，在浏览器中或通过电子或Tauri作为桌面应用程序。这也为轻松适应WebOS和Tizen的基础奠定了基础，该Webos和Tizen支持JS（由LG和Samsung标牌显示）。 我还在探索React Native以构建本机Android版本。我希望它能在Android电视和Android盒子上运行良好，因为它们不像PC。 href =“ https://github.com/screenlite/web-player”&gt; https://github.com/screenlite/web-player    首先运行可能会有点张开，可能是由于实时缓存而导致的，但是在第一次循环后平稳。  如果您对开放源代码数字标牌感兴趣，我很想反馈，在低端设备上进行测试，甚至是合作者！   &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32;态href =“ https://www.reddit.com/r/opensource/comments/1kk9g45/building_an_opensource_javascript_digital_signage/”&gt; [link]   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1kk9g45/building_an_opensource_javascript_digital_signage/</guid>
      <pubDate>Sun, 11 May 2025 19:41:58 GMT</pubDate>
    </item>
    <item>
      <title>我构建了一个简单的cron作业调度程序，可使用环境变量[免费和开源源]配置</title>
      <link>https://www.reddit.com/r/opensource/comments/1kk8bzl/i_built_a_simple_cron_jobs_scheduler_configurable/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我已经构建了一个轻巧的节点。 href=&quot;https://railway.com/template/oIgT0x?referralCode=tsykin&quot;&gt;Railway Template to deploy it in literal seconds. Here&#39;s a brief features summary:  🌍 Configure HTTP cron jobs via environment variables. 🌐 Supports all HTTP request方法。 🔒使用URL参数或请求正文确保作业。 🕔时区支持：确保您的任务在正确的时间内运行，无论您的服务器的位置如何。   ⚙️内置验证以捕获配置。简单地使用Docker或Node.js Runtime   我已经将其用于我的许多项目。查看博客文章和YouTube视频，以了解如何将其与您的应用集成在一起。  我很想在github上获得您的反馈！ href =“ https://tsykin.com/blog/blog/cron-job-scheduler-with-nodejs-typescript？utm_source = rce = reddit＆amp;utm_medium = referral＆utm_camp； href =“ https://www.youtube.com/watch?v=fqauyubkbsu”&gt; youtube视频教程   &lt;！&lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/tsykinsasha     [link]  &lt;a href =“ https://www.reddit.com/r/opensource/comments/1kk8bzl/i_built_a_a_simple_jobs_jobs_scheduler_configurable/]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1kk8bzl/i_built_a_simple_cron_jobs_scheduler_configurable/</guid>
      <pubDate>Sun, 11 May 2025 18:53:51 GMT</pubDate>
    </item>
    <item>
      <title>FIXBROWSER/FIXPROXY 0.3-浏览网络隐私</title>
      <link>https://www.reddit.com/r/opensource/comments/1kk5q31/fixbrowserfixproxy_03_browse_the_web_with_privacy/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/jezek_2     link&gt; link&gt; link&gt; link/link  &lt;a href =“ https://www.reddit.com/r/opensource/comments/1kk5q31/fixbrowserfixproxproxy_03_browse_the_web_web_with_with_with_with_privacy/]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1kk5q31/fixbrowserfixproxy_03_browse_the_web_with_privacy/</guid>
      <pubDate>Sun, 11 May 2025 17:01:10 GMT</pubDate>
    </item>
    <item>
      <title>我构建了一个3D射线跟踪器，以可视化光线如何通过光学系统</title>
      <link>https://www.reddit.com/r/opensource/comments/1kk4w2d/i_built_a_3d_raytracer_to_visualize_how_light/</link>
      <description><![CDATA[      ＆＃32;提交由＆＃32; /u/kostard     [link]  &lt;a href =“ https://www.reddit.com/r/opensource/comments/1kk4w2d/i_built_a_a_3d_3d_rayracer_to_visalize_how_how_how_how_how_how_light/]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1kk4w2d/i_built_a_3d_raytracer_to_visualize_how_light/</guid>
      <pubDate>Sun, 11 May 2025 16:24:23 GMT</pubDate>
    </item>
    <item>
      <title>构建了我的第一个没有正式编码的开源应用程序 -  iSpeakEreteAtct：练习英语发音，说话和聆听</title>
      <link>https://www.reddit.com/r/opensource/comments/1kk4p7x/built_my_first_opensource_app_without_formal/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  大家好，我做了一个英语发音，说话和听力练习应用程序，称为ispeakEreteAkct。这是我第一次构建应用程序而无需正式编码培训。 它专注于帮助学习者：  练习IPA声音，用教学视频和录制练习 发音通用牛津3000/5000单词，带压力突出显示和可触发的触发      doctive   使用记录工具学习对话表达式和考试策略  该应用程序是100％免费和开源的，您可以 https://yllst-testing-labs.githubs.github.io/ispeakeReact/     我很想听听您的反馈或建议！如果您发现任何错误或改进的想法，请随时打开一个GitHub问题。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32;态href =“ https://www.reddit.com/r/opensource/comments/1kk4p7x/built_my_first_opensource_app_without_formal/”&gt; [link]    [注释]  ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1kk4p7x/built_my_first_opensource_app_without_formal/</guid>
      <pubDate>Sun, 11 May 2025 16:15:54 GMT</pubDate>
    </item>
    <item>
      <title>FCAT：蛋白质与FZF和Zoxide Smarts的猫！ 🚀</title>
      <link>https://www.reddit.com/r/opensource/comments/1kk462n/fcat_cat_on_protein_with_fzf_zoxide_smarts/</link>
      <description><![CDATA[        &lt;！ -  sc_off-&gt;  如果您住在终端中，您知道痛苦。 FCAT是我的解决方案：结合目录智能（Zoxide），模糊发现（FZF）和漂亮打印（BAT）的外壳功能，使查看文件变得轻而易举。欢迎反馈！ 有关更多详细信息，请查看我的github repo：   https：//github.com/samunders.com/samundersingh12/samundersingh12/fcat.git  /u/u/u/nisternal-pagal      &lt;a href =“ https://www.reddit.com/r/opensource/comments/1kk462n/fcat_cat_cat_cat_cat_on_protein_with_with_fzf_zoxide_smarts/]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1kk462n/fcat_cat_on_protein_with_fzf_zoxide_smarts/</guid>
      <pubDate>Sun, 11 May 2025 15:52:19 GMT</pubDate>
    </item>
    <item>
      <title>MIDA：对于那些勇敢的灵魂仍在2025年仍在写C</title>
      <link>https://www.reddit.com/r/opensource/comments/1kk4244/mida_for_those_brave_souls_still_writing_c_in/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  对于那些仍在记忆安全的语言时代（我和您同在）的人，我想分享一个我制作的小图书馆，这些库有助于C解决C最令人讨厌的怪癖之一 - 完全缺乏阵列元数据。 Augmentation）是一个仅小型标头的C库，它将元数据附加到您的阵列和结构上，因此您实际上可以知道它们的大小而无需手动跟踪此信息。我知道革命性的概念。 为什么有人会这样做？ ，因为有时您卡住了维护旧版C代码。或在嵌入式系统上工作。或者，您只是喜欢偶尔的Segfault，以使您保持谦虚。 Whatever your reasons for using C in 2024, MIDA tries to make one specific aspect less painful. If you&#39;ve ever written code like this: c void process_data(int *data, size_t data_length) { // pray that the caller remembered the right length for (size_t i = 0; i &lt; data_length; i++) { // do stuff } }  并希望您可以做： c void process_data（int *data）{size_t data_length = mida_length（data）; // ✨ magic ✨ for (size_t i = 0; i &lt; data_length; i++) { // do stuff without 27 redundant size parameters } }  Then this might be for you! How it works In true C fashion, it&#39;s all just pointer arithmetic and memory trickery. MIDA attaches a small metadata header before your actual data, so your pointers work exactly like normal C arrays: ```c // For the brave C99 users int *numbers = mida_array(int, { 1, 2, 3, 4, 5 }); // For C89 holdouts (respect for maintaining 35-year-old code) int data[] = {1, 2, 3、4、5}; MIDA_BYTEMAP（bytemap，sizeof（data））; int *包装= mida_wrap（数据，bytemap）; ```` 但是，等等，还有更多！ 您甚至可以添加自己的自定义元数据字段： ``c // c //定义自己的元数据结构packet_metadata {uint16_t packet_id; //您自己的字段uint32_t crc; uint8_t标志; MIDA_EXT_METADATA; //标准元数据字段是最后一个};   //现在每个阵列都可以随身携带您的自定义信息uint8_t *packet = mida_ext_malloc（struct packet_metadata，sizeof（uint8_t），128），128），     // packet_metadata，数据包）; meta-＆gt; packet_id = 0x1234; meta-＆gt; flags = flag_urgent | flag_encrypted; ```` &#39;但是我在一个嵌入式平台上，不能使用malloc！＆quot&#39; 没问题！ MIDA可与堆栈分配的内存（或任何预先分配的缓冲区）： ```````c //带有元数据Uint8_t uint8_t Raw_buffer [64]; MIDA_BYTEMAP（bytemap，sizeof（raw_buffer））; uint8_t *buffer = mida_wrap（raw_buffer，bytemap）;    //现在您可以假装像C具有适当的阵列printf（“缓冲长度：％zu” zu \ n＆quort&#39;＆quort&#39;＆quid&#39;mida_length（buffer（buffer））; ```` 这是个玩笑吗？ 仅部分！虽然我认识到C更优雅地解决这些问题的现代替代方案，但有时您只需要与C一起工作。   整个事情都在单个标头文件（〜600行）中，已获得MIT许可，并且可用： https://github.com/lcsmuller/mida     ，如果像我一样，您会发现自己喃喃自语“我希望C知道它的阵列有多大，第1000次，也许尝试一下。 ，或者您知道，使用Rust/Go/任何现代语言，并从内存安全的高度嘲笑我们C程序员。那也很好。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/lucasmull     [link]   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1kk4244/mida_for_those_brave_souls_still_writing_c_in/</guid>
      <pubDate>Sun, 11 May 2025 15:47:30 GMT</pubDate>
    </item>
    <item>
      <title>我建立了顾问 - 由AI驱动的学生辅导员您可以在自己的机器上私下运行！</title>
      <link>https://www.reddit.com/r/opensource/comments/1kk3pp7/i_built_counseltron_an_aipowered_student/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  大家好！ 我最近完成了一个名为 Counseltron 的项目 - 一位专门为学生设计的轻便，本地第一的AI辅导员。它的目的是帮助学术压力，情绪激动，或者只是在您希望某人背靠背的时候。  是什么： 是由 phi语言模型驱动的虚拟辅导员（通过  为什么我建造它： 作为学生，我知道事情会变得多么艰难，与真正的顾问交谈并不总是那么容易，负担得起或立即。咨询顾问本来应该成为同伴 - 无判断，随时可用，并且完全私密。   功能：    明智，善解人意的对话，由ai  启动由AI  没有数据     li&gt; li&gt; li&gt; li ful/li ful/li  li&gt; li&gt; li&gt; li&gt; li&gt; li&gt;   尝试/star it  这是回购：👉想法！也可以为协作开放，如果有人想通过日记，情绪跟踪或语音功能扩展它。 😊  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/rylenletfthechat      [link]        [注释]  ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1kk3pp7/i_built_counseltron_an_aipowered_student/</guid>
      <pubDate>Sun, 11 May 2025 15:31:54 GMT</pubDate>
    </item>
    <item>
      <title>反应？朝约如何？</title>
      <link>https://www.reddit.com/r/opensource/comments/1kk2tqt/reacttoastify_how_about_untoastify/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我构建了一个更简单，更轻，更快的react-tostify版本。您可以使用＆quot＆quot＆quort＆quot＆quot＆quot＆quot selport install distall untotatify＆quot＆quort＆quot＆quot＆quot; href =“ https://github.com/clouds440/untoastify”&gt; utoastify    &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32;态href =“ https://www.reddit.com/r/opensource/comments/1kk2tqt/reacttoastify_how_how_about_untoastify/”&gt; [link]   ＆＃32;   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1kk2tqt/reacttoastify_how_about_untoastify/</guid>
      <pubDate>Sun, 11 May 2025 14:52:25 GMT</pubDate>
    </item>
    </channel>
</rss>