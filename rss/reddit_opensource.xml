<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：开源</title>
    <link>https://www.reddit.com/r/opensource/new</link>
    <description>与开源相关的所有内容的 Reddit 子版块（对于此上下文，我们在此不再定义开源的定义 http://en.wikipedia.org/wiki/Open_source）</description>
    <lastBuildDate>Thu, 16 Oct 2025 03:36:51 GMT</lastBuildDate>
    <item>
      <title>找到了一个带有 NextJS 堆栈的 Open WebUI 克隆</title>
      <link>https://www.reddit.com/r/opensource/comments/1o7vog6/found_an_open_webui_clone_with_a_nextjs_stack/</link>
      <description><![CDATA[https://github.com/openchatui/openchat 我已经使用 Open WebUI 一段时间了，想要开发一项功能，但发现它非常烦人。我对堆栈不熟悉，当我询问有关技术堆栈的问题时，社区也表现得居高临下。我个人使用 NextJS，Open WebUI 使用 svelte。所以我遇到了这个开源 NextJS Open Web UI 克隆，我喜欢它。它仍然是新的，所以它只有大约 20%（如果有的话）的功能，但我想我应该对它大加赞扬。它只有一名开发人员在研究它，我认为它应该得到更多关注。   由   提交/u/blexotti   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o7vog6/found_an_open_webui_clone_with_a_nextjs_stack/</guid>
      <pubDate>Thu, 16 Oct 2025 03:24:11 GMT</pubDate>
    </item>
    <item>
      <title>荒谬的SQL</title>
      <link>https://www.reddit.com/r/opensource/comments/1o7tepx/absurdersql/</link>
      <description><![CDATA[AbsurderSQL：让 Web 上的 SQLite 更进一步 如果 Web 上的 SQLite 更加荒谬怎么办？ 不久前，James Long absurd-sql 令人大吃一惊——这是一种疯狂的黑客行为，它使用 IndexedDB 作为虚拟文件系统，使 SQLite 在浏览器中持久存在。它证明您实际上可以在网络上运行真实数据库。 但它有一个巨大的缺陷：您的数据被卡住了。一旦进入 IndexedDB，就没有导出、导入、备份——没有出路。 所以我构建了 AbsurderSQL - 一个彻底的 Rust + WebAssembly 重新实现，可以完全解决这个问题。它是荒谬的 SQL，但更荒谬。 它用 Rust 编写，使用自定义 VFS，将 IndexedDB 视为具有 4KB 块、智能缓存和可选可观察性的磁盘。它在浏览器内和本机运行。你的数据呢？ 100% 可移植。 为什么构建它 我将旧版 VBA 应用程序现代化为 Next.js SPA，但有一个限制：没有服务器端持久性。它必须完全离线。 IndexedDB 是唯一的选择，但它绝不是关系型的。 然后我发现了absurd-sql。它让我完成了 80%，但最后 20% 涉及痛苦的锁定和可移植性问题。这种挫败感导致了这次重写。 您的数据，无处不在。 AbsurderSQL 允许您从标准 SQLite 文件导出和导入，而不是专有的 blob。 从 &#39;@npiesco/absurder-sql&#39; 导入 init, { Database };等待初始化（）； const db = 等待 Database.newDatabase(&#39;myapp.db&#39;); wait db.execute(&quot;创建表用户(id INTEGER PRIMARY KEY, name TEXT)&quot;); wait db.execute(“INSERT INTO users VALUES (1, &#39;Alice&#39;)”); // 导出真实的 SQLite 文件 const bytes = wait db.exportToFile();  该文件适用于任何地方 - CLI、Python、Rust、DB 浏览器等。 您可以在任何浏览器中备份、提交、共享或重新导入它。 双模式架构 一个代码库，两种模式。  浏览器 (WASM)： IndexedDB 支持的 SQLite 数据库，具有缓存、选项卡协调和导出/导入功能。 本机 (Rust)： 相同的 API，但使用文件系统，方便服务器或 CLI 实用程序。  非常适合偶尔同步到后端的离线优先应用程序。 有效的多选项卡协调 AbsurderSQL 附带内置的领导者选举和写入协调：  一个领导者选项卡处理写入 追随者队列写入领导者 BroadcastChannel 通知所有选项卡数据更改，无数据争用，无损坏。  性能 IndexedDB 确实很慢，但是缓存、批处理和异步 Rust I/O 会产生巨大的差异：   操作 absurd-sql AbsurderSQL    100k 行读取 ~2.5s ~0.8s（冷）/~0.05s（热）   10k 行写入 ~3.2s ~0.6s   从头开始生锈 absurd-sql 修补了 C++/JS 内部； AbsurderSQL 是惯用的 Rust：  安全快速的异步 I/O（无 Asyncify 膨胀） 完整的 ACID 事务 块级 CRC 校验和 可选的 Prometheus/OpenTelemetry 支持（约 660 KB 压缩的 WASM 构建）  下一步是什么  移动支持（为 iOS/Android 编译的相同 Rust 核心） WASM 组件模型集成 用于未来浏览器 API 的可插拔存储后端  GitHub： npiesco/absurder-sql 许可证： AGPL-3.0 James Long 展示了浏览器中的 SQLite 是可能的。 AbsurderSQL 展示了它可以是生产级。   由   提交/u/Standard-Ad9181   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o7tepx/absurdersql/</guid>
      <pubDate>Thu, 16 Oct 2025 01:32:40 GMT</pubDate>
    </item>
    <item>
      <title>Keycloak 中的多租户架构（领域、客户端、新组织）</title>
      <link>https://www.reddit.com/r/opensource/comments/1o7mpn4/multitenant_architectures_in_keycloak_realms_vs/</link>
      <description><![CDATA[我一直在探索在 Keycloak 中处理多租户的不同方法，因为这是一个经常出现的主题（领域、客户端与多个部署）。以下是主要模型的快速细分，它们擅长什么，以及它们容易崩溃的地方。 单租户（每个客户/应用一个 Keycloak） 在此设置中，每个客户都有一个完全隔离的 Keycloak 实例。  主要优点是完全分离：一个租户中的错误或配置错误不会影响另一个租户。 由于每个堆栈都是独立的，因此故障排除更加简单。 但规模较大时，这将成为运营的噩梦。每个 Keycloak 版本都必须单独应用于每个租户。一年内有 3 个租户和 18 个版本，需要处理 54 次升级。  多领域（一个 Keycloak，多个领域） 这里，单个 Keycloak 实例托管多个领域，每个领域专用于一个租户。  这使您可以池化基础设施并降低成本，同时保持各个领域之间的逻辑分离。  但是，身份很快就会变得混乱：跨多个领域的同一用户意味着多个帐户和密码。 性能还会降低到超过约 100 个领域：启动缓慢、管理控制台滞后和实体创建问题。 团队通常需要构建同步覆盖来解决这些限制。  多客户端（一个） 领域，多个客户端） 在此模型中，所有租户都生活在同一个领域，每个租户都代表一个客户端。  它比多领域更具可扩展性：您可以在一个领域中托管数千个客户。 成本和精力集中，维护也得到简化。 权衡是访问控制转移到应用程序。必须仔细解释角色和标签，以强制实施租户边界。 这需要更多的自定义，如果处理不当，还会带来跨租户暴露的风险。  组织（在 v25 中引入，在 v26 中改进） 组织在领域内提供一个新的抽象层来对租户及其用户进行分组。 自 v26，Keycloak 正式支持组织，早期用户报告许多核心操作（CRUD、成员管理等）都可以正常运行。然而，一些边缘情况，例如通过 API 将现有领域用户链接到组织，仍然存在摩擦。 此功能可以降低多领域设置的复杂性，并在可扩展性和分离之间提供中间立场，但我们还没有足够的生产案例来了解它如何在规模上保持不变。 结论 没有通用的答案。每个模型都会在隔离性、可扩展性、用户体验和运营痛苦之间进行权衡。 “正确”的选择实际上取决于您的环境：SaaS 增长、企业合规性或严格隔离。 TL;DR  首先需要隔离 → 单租户。 需要通过一些权衡降低成本 → 多领域。 需要规模和数千个客户 → 多客户端。 对 未来 → v26 中的组织得到了官方支持并且看起来很有前途，但大规模生产反馈仍然有限。  如果您已经扩展了多领域或多客户端设置，什么对您有效（或失败）？对于那些已经在 v26 中测试过组织的人来说，它是否改变了您的多租户方法？ （我还编写了一个较长的版本，并在我的公司网站上发布了图表。如果您认为我错过了任何内容，很高兴听到：https://www.cloud-iam.com/post/keycloak-multi-tenancy/)   由   提交/u/Will-from-CloudIAM   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o7mpn4/multitenant_architectures_in_keycloak_realms_vs/</guid>
      <pubDate>Wed, 15 Oct 2025 20:46:48 GMT</pubDate>
    </item>
    <item>
      <title>开源互联网</title>
      <link>https://www.reddit.com/r/opensource/comments/1o7eyug/open_source_internet/</link>
      <description><![CDATA[我对这个有趣的标题表示歉意，但我真的对此感到好奇。 似乎几乎所有事情都有一个开源解决方案，只要付出足够的努力，任何人都可以通过开放的开源软件或自托管来收回自己的数字主权。除了一件事：访问互联网。 我们仍然依赖 ISP 和电信公司，这使我们局限于现有的基础设施和实践。是否有关于创建更加自由的互联网的持续讨论或理论探索？ 我知道互联网接入依赖于需要维护、扩展和管理的基础设施。但就像道路或高速公路一样，它们由税收资助并被视为公共产品，我相信互联网也可以走类似的道路？ 在哪里可以找到有关此主题的讨论？我知道这与开源理念有关，但我觉得这种情绪超越了这个领域。任何见解或指导将不胜感激！   由   提交 /u/Euclois   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o7eyug/open_source_internet/</guid>
      <pubDate>Wed, 15 Oct 2025 15:58:35 GMT</pubDate>
    </item>
    <item>
      <title>我一直在开发 Go SSR 库</title>
      <link>https://www.reddit.com/r/opensource/comments/1o7dsum/ive_been_developing_a_go_ssr_library/</link>
      <description><![CDATA[ 由   提交/u/can_pacis  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o7dsum/ive_been_developing_a_go_ssr_library/</guid>
      <pubDate>Wed, 15 Oct 2025 15:15:36 GMT</pubDate>
    </item>
    <item>
      <title>Rachoon — 自托管发票变得简单</title>
      <link>https://www.reddit.com/r/opensource/comments/1o7bywg/rachoon_selfhosted_invoicing_made_simple/</link>
      <description><![CDATA[大家好，我一直在开发一个名为 Rachoon 的自托管发票应用程序（该名称来自波斯尼亚语单词 račun，意思是发票）。我构建它是因为我想要一些轻量级的东西，完全在我的控制之下。 这一切都始于 2016 年，当时我成为个体经营者，我需要一些东西来创建发票。起初，我使用了专有的 SaaS 产品，它本身是一个很好的产品，但至少可以说，他们的支持很糟糕。我研究了自托管的替代方案，当时这些方案看起来基本能满足我的需求。因此，我把事情掌握在自己手中，并开始研究 Rachoon。 我已经让它很好地满足了我的需求，并继续私下使用它，托管在我的 HomeLab 上。现在我有更多时间，我决定将其投入生产，供其他人使用。 它的作用如下：  创建和管理发票和报价 跟踪客户和付款 使用 nunjucks 高度可定制的发票模板，并带有您的品牌 生成 PDF 和预览 支持多种货币和税收  它是开源的，因此我能够调整内容以适应我的工作流程，并且我可以看到它对于希望将所有内容保留在本地的自由职业者或小型团队有何用处。 如果您喜欢自托管并希望避免订阅 发票工具，可能值得一看：https://github.com/ad-on-is/rachoon 我很乐意回答有关设置或如何在自己的工作流程中使用它的问题。   由   提交/u/ad-on-is   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o7bywg/rachoon_selfhosted_invoicing_made_simple/</guid>
      <pubDate>Wed, 15 Oct 2025 14:06:50 GMT</pubDate>
    </item>
    <item>
      <title>对于那些想要为回购做出贡献但从未这样做过的人</title>
      <link>https://www.reddit.com/r/opensource/comments/1o79k5g/for_those_who_want_to_contribute_to_a_repo_but/</link>
      <description><![CDATA[      大家好，你们当中有谁想要做出贡献，但没有能力或不知道如何做？这是很多刚接触编程并想参与开源社区的人都会遇到的问题。 hacktoberfest 将于本月举行，这是一个专注于开源的活动，您可以在其中找到许多新项目，这是以简单的方式开始贡献的好方法！为了这次活动，我创建了一个完全用 Python 开发的开源项目，专注于人工智能和金融，专为那些初学者但想要忙于实际项目的人而设计。您会发现各种类型的问题，有些是专门为简单而设计的，有些是为更有经验的人设计的更具挑战性。 Hacktoberfest 规则：https://hacktoberfest.com/ 我希望它对您有用！快乐编码和 Hacktoberfest！   由   提交/u/Warm_Interaction_375   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o79k5g/for_those_who_want_to_contribute_to_a_repo_but/</guid>
      <pubDate>Wed, 15 Oct 2025 12:25:44 GMT</pubDate>
    </item>
    <item>
      <title>问：Micro G 和 Aurora Store 的安全性如何？</title>
      <link>https://www.reddit.com/r/opensource/comments/1o78sco/question_how_safe_is_micro_g_and_aurora_store/</link>
      <description><![CDATA[我已在华为手机上安装了 Micro G 并使用 Aurora Store 下载/安装应用程序。我想了解 Micro G 和 Aurora Store 的隐私政策。我不敢下载银行应用程序。   由   提交 /u/SilveryGaming   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o78sco/question_how_safe_is_micro_g_and_aurora_store/</guid>
      <pubDate>Wed, 15 Oct 2025 11:48:29 GMT</pubDate>
    </item>
    <item>
      <title>我的网站上的诚实评论</title>
      <link>https://www.reddit.com/r/opensource/comments/1o76tv3/honest_review_on_my_website/</link>
      <description><![CDATA[ 由   提交/u/markomoev  [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o76tv3/honest_review_on_my_website/</guid>
      <pubDate>Wed, 15 Oct 2025 09:59:00 GMT</pubDate>
    </item>
    <item>
      <title>我的网站上的诚实评论</title>
      <link>https://www.reddit.com/r/opensource/comments/1o76tdz/honest_review_on_my_website/</link>
      <description><![CDATA[ 由   提交/u/markomoev  [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o76tdz/honest_review_on_my_website/</guid>
      <pubDate>Wed, 15 Oct 2025 09:58:15 GMT</pubDate>
    </item>
    <item>
      <title>Imago Studio：为创作者提供的自托管图像库和实时编辑 Web 应用程序</title>
      <link>https://www.reddit.com/r/opensource/comments/1o74hkj/imagor_studio_selfhosted_image_gallery_and_live/</link>
      <description><![CDATA[       由   提交/u/cshum  [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o74hkj/imagor_studio_selfhosted_image_gallery_and_live/</guid>
      <pubDate>Wed, 15 Oct 2025 07:25:10 GMT</pubDate>
    </item>
    <item>
      <title>【工具】Noir：JunOS安全检查器</title>
      <link>https://www.reddit.com/r/opensource/comments/1o73wdz/tool_noir_junos_security_inspector/</link>
      <description><![CDATA[       由   提交/u/caster0x00  [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o73wdz/tool_noir_junos_security_inspector/</guid>
      <pubDate>Wed, 15 Oct 2025 06:47:50 GMT</pubDate>
    </item>
    <item>
      <title>需要团队和轮班管理软件的建议</title>
      <link>https://www.reddit.com/r/opensource/comments/1o72swf/need_suggestions_for_team_and_shift_management/</link>
      <description><![CDATA[我正在寻找开源/自托管软件或免费/接近免费的网络/桌面应用程序，我可以对其进行自定义以供我使用。  我帮助一小群自由职业者 (&lt;10) 从事小型办公室搬迁项目。我从客户那里得到一份工作并分配给这些自由职业者。目前，我使用 WhatsApp 进行交流，使用 Google Sheets 来跟踪工作情况。但工作流程非常笨重，我想让它变得顺利。  以下是我必须实现的目标。  1- 创建角色列表 - 每个角色都有固定的每小时/每日费率。 2 - 创建我拥有的自由职业者列表，其中包含姓名、电话号码、电子邮件、地址等基本详细信息。 3- 创建和跟踪工作 - 使用日期、客户名称、地址、即将到来或已完成的状态以及工作时间等详细信息。 3-a 一项工作可能只持续一天，也可能持续多天，因此最好在工作下轮班。 3-b 每个班次需要不同数量的人员。 3-c 分配到轮班的每个人都有一个角色列表中的角色，这也决定了他们将获得多少报酬。例如，我可以分配工头 x1、司机 x 1、装载机 x 3。 4- 能够生成摘要报告以与工人共享，以便他们可以看到他们所做的工作以及他们将收到多少钱 5- 能够为我的客户生成摘要报告，以便我可以使用它来生成发票。  我很久以前曾经开发过 C# 桌面应用程序，可以尝试一下，但想看看已经存在的东西可以用于我的用例。我使用过 SQLite 等数据库，如果需要自定义一些东西，我也了解一点 Python。   由   提交/u/t4ure4n   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o72swf/need_suggestions_for_team_and_shift_management/</guid>
      <pubDate>Wed, 15 Oct 2025 05:40:18 GMT</pubDate>
    </item>
    <item>
      <title>上次反应很好！根据您的反馈，我已将 Docker 一键部署添加到 PrivyDrop</title>
      <link>https://www.reddit.com/r/opensource/comments/1o71jb9/great_response_last_time_ive_added_docker/</link>
      <description><![CDATA[大家好！一个月前，我分享了开源 WebRTC 文件传输工具 PrivyDrop，并收到了惊人的反馈。你们中的许多人提到想要一个更简单的部署解决方案。 现在我在这里兑现这一承诺！  基于社区需求的新功能： Docker一键部署 - 5分钟部署，支持局域网/公网IP/域名 自动HTTPS - Let&#39;s Encrypt自动发行和续订 内置TURN服务器 - 解决复杂网络环境下的连接问题 当然，如果你不会 想要自行托管，可以使用我的托管版本： 核心项目优势： - 无限文件传输 - 通过 Chrome 的直接到磁盘流式传输支持任何大小的文件（使用 100GB 以上的文件进行测试） - 端到端加密 - 文件永远不会接触服务器，绝对隐私保护 - 多种内容类型 - 共享文件、文件夹和丰富内容 text - 恢复传输 - 从中断中恢复（退出房间并再次加入） - 完全开源 - MIT 许可的透明代码 此更新解决了“部署复杂性”和“部署复杂性”问题。和“文件大小限制”社区提到的痛点。现在，您可以轻松安全地传输从小敏感文档到 100GB 以上大文件的所有内容。 非常感谢所有提供建议的人！欢迎试用并不断提供反馈！   由   提交/u/ForwardRope6029   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o71jb9/great_response_last_time_ive_added_docker/</guid>
      <pubDate>Wed, 15 Oct 2025 04:27:51 GMT</pubDate>
    </item>
    <item>
      <title>GitHub - Barddoo: 在 Zig 中 Redized</title>
      <link>https://www.reddit.com/r/opensource/comments/1o6zoy8/github_barddoozedis_redis_in_zig/</link>
      <description><![CDATA[      嘿伙计们，我正在 Zig 中重写 Redis，请查看！谢谢！   由   提交/u/pseudocharleskk   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o6zoy8/github_barddoozedis_redis_in_zig/</guid>
      <pubDate>Wed, 15 Oct 2025 02:53:15 GMT</pubDate>
    </item>
    </channel>
</rss>