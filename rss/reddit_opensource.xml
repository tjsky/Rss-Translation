<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：开源</title>
    <link>https://www.reddit.com/r/opensource/new</link>
    <description>与开源相关的所有内容的 Reddit 子版块（对于此上下文，我们在此不再定义开源的定义 http://en.wikipedia.org/wiki/Open_source）</description>
    <lastBuildDate>Sat, 11 Oct 2025 21:14:22 GMT</lastBuildDate>
    <item>
      <title>Cronboard,用于管理 cron 作业的基于终端的仪表板,下载Cronboard的源码_GitHub_帮酷</title>
      <link>https://www.reddit.com/r/opensource/comments/1o3vkhd/github_antoniorodrcronboard_a_terminalbased/</link>
      <description><![CDATA[      大家好！ 我再次在这里发帖，这次我很高兴介绍我的新项目：Cronboard。 Cronboard 是一个终端应用程序，允许您在本地和远程服务器上管理和调度 cronjobs。使用 Cronboard，您可以轻松添加、编辑和删除 cronjobs，以及查看其状态。 功能  检查 cron 作业 创建带有验证和人类可读反馈的 cron 作业 暂停和恢复 cron 作业 编辑现有 cron 作业 删除 cron 作业 查看格式化的上次和下次运行时间 使用 SSH 连接到服务器  该项目仍处于开发早期，因此您可能会遇到错误和需要改进的地方。 存储库：https://github.com/antoniorodr/Cronboard 您的反馈非常重要！ 谢谢！   由   提交/u/NorskJesus   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o3vkhd/github_antoniorodrcronboard_a_terminalbased/</guid>
      <pubDate>Sat, 11 Oct 2025 13:24:18 GMT</pubDate>
    </item>
    <item>
      <title>花更少的时间搜索，更多的时间贡献 — 面向开源初学者的 GitHub 问题警报</title>
      <link>https://www.reddit.com/r/opensource/comments/1o3vhth/spend_less_time_searching_more_time_contributing/</link>
      <description><![CDATA[大家好， 我最近构建了一个小项目，旨在解决初学者在尝试进入开源领域时面临的最大问题之一：在采取相关问题之前找到相关问题。 问题：初学者经常花费数小时在 GitHub 上搜索合适的问题。当他们找到一个时，它要么太高级，要么已经分配，​​要么缺乏适合初学者的标签。这会造成不必要的摩擦，并阻止许多人做出贡献。 我尝试的解决方案：我创建了一个简单的工具，可以监视您选择的任何公共存储库，并在出现与您选择的标签匹配的新问题时通过电子邮件或 Telegram 通知您。例如，您可以跟踪“第一期良好”等标签。或“前端”跨多个存储库。设置非常简单，几分钟内即可完成。 为什么我认为这很重要：它可以帮助初学者避免在无休止的搜索中浪费时间，让他们尽早发现问题，并使整个贡献过程变得不那么令人生畏。它被设计得最小化且直观，不需要用户管理复杂的基础设施或付费服务。 现在这是一个 MVP。它有效，但我想进一步完善它。我正在寻找：  关于这是否能解决您真正的痛点的反馈。 改进建议或使其更有价值的附加功能。 关于如何更好地为贡献者和维护者服务的想法。  如果您能抽出几分钟时间，我将非常感谢您的见解。谢谢。 Github 存储库   由   提交 /u/Crafty_Ask5382   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o3vhth/spend_less_time_searching_more_time_contributing/</guid>
      <pubDate>Sat, 11 Oct 2025 13:21:00 GMT</pubDate>
    </item>
    <item>
      <title>anki 但用于主题而不是抽认卡？</title>
      <link>https://www.reddit.com/r/opensource/comments/1o3vgyk/anki_but_for_topics_instead_of_flashcards/</link>
      <description><![CDATA[       由   提交/u/Educational_Lynx286   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o3vgyk/anki_but_for_topics_instead_of_flashcards/</guid>
      <pubDate>Sat, 11 Oct 2025 13:19:59 GMT</pubDate>
    </item>
    <item>
      <title>Markon • 最小干扰的 Markdown 编辑器</title>
      <link>https://www.reddit.com/r/opensource/comments/1o3thxj/markon_minimal_distractionfree_markdown_editor/</link>
      <description><![CDATA[      公开预览 https://metaory.github.io/markon/ 最小干扰的 Markdown 编辑器 功能  GFM：GitHub 风格的 Markdown 剪贴板：复制， 粘贴 文件：保存、加载 预览：可调整大小的分割 突出显示：250+ 语言、500+ 别名 主题：浅色/深色 拼写检查：切换拼写检查 仅限本地    由   提交/u/Last_Establishment_1   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o3thxj/markon_minimal_distractionfree_markdown_editor/</guid>
      <pubDate>Sat, 11 Oct 2025 11:43:50 GMT</pubDate>
    </item>
    <item>
      <title>我们如何测试编译器驱动的全栈 Web 框架</title>
      <link>https://www.reddit.com/r/opensource/comments/1o3svvu/how_we_test_a_compilerdriven_fullstack_web/</link>
      <description><![CDATA[       由   提交/u/matijash  [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o3svvu/how_we_test_a_compilerdriven_fullstack_web/</guid>
      <pubDate>Sat, 11 Oct 2025 11:09:32 GMT</pubDate>
    </item>
    <item>
      <title>[展示和讲述] GroundCrew — 周末构建：多代理事实检查器 (LangGraph + GPT-4o) 在 FEVER 切片上达到 72%</title>
      <link>https://www.reddit.com/r/opensource/comments/1o3sqan/show_tell_groundcrew_weekend_build_a_multiagent/</link>
      <description><![CDATA[TL;DR: 我花了周末构建了 GroundCrew，一个自动事实检查管道。它需要任何文本→提取声明→搜索网络/维基百科→充满信心+证据地验证和报告。在 100 个样本的 FEVER 切片上，它的总体得分为71-72%，具有很强的支持/驳斥，但在信息不足方面表现不佳。下面的回购+评估——希望得到有关 NEI 检测和评估的反馈 为什么这可能会很有趣  这是一个干净的类型化 LangGraph 管道（带有 Pydantic I/O 的代理），您可以一口气读完。 包括一个迷你评估工具（FEVER 子集）和一个简单的消融（网络与网络）。 仅限维基百科）。 显示法学硕士仍然过度声明的地方，以及护栏+结构如何帮助（但没有完全修复）NEI。  它的作用（端到端）  声明提取→从输入文本中提取事实陈述 证据 搜索→Tavily（网络）或维基百科模式验证→比较主张↔证据，分配支持/拒绝/NEI+置信度报告→带有每个主张理由和证据片段的Markdown/JSON报告全部 代理使用结构化输出（Pydantic），因此您可以在整个图中获得一致的类型。  架构（LangGraph）  顺序 4 阶段图（提取→搜索→验证→报告） 类型安全节点 模式（更少的提示粘合，更少的“字符串类型”错误） 质量预设（模型/临时/工具），您可以在每次运行时切换 批处理模式，使用并行工作器进行快速评估  结果（FEVER，100 个样本；GPT-4o）   配置 总体 支持 拒绝 NEI    Web 搜索 71% 88% 82% 42%   仅限维基百科 72% 91%88%36%背景：专用 FEVER 系统约为 85–90%+。对于周末以 LLM 为中心的管道，~72% 感觉像是一个不错的基线 - 但NEI 显然是弱点。 它在哪里中断（以及原因）  NEI（信息不足）： 该模型从部分证据中推断，而不是放弃。教它说“我还不知道（还）”比支持/反驳更难。 证据特异性：例如，声明说“由两个人创立”，证据列出了两个名字，但从未指出“两个”。验证者计算姓名并声明支持——根据 FEVER 准则，技术上是错误的。 矛盾边缘：微妙的时间限定符（“截至 2019 年……”）或实体消歧（相同名称，不同实体）仍然会出错。  Repo 和文档  代码： https://github.com/tsensei/GroundCrew 评估： evals/ 有脚本 + 注释（FEVER 切片 + 配置） 切换） Wiki：入门/使用/架构/API 参考/示例/故障排除 许可证： MIT  我正在寻找的具体反馈  NEI 处理：您用于弃权的最佳实践 坚持（提示、路由、NLI 过滤器、阈值）？ 矛盾检测：轻量级方法，无需庞大的重新排序器堆栈即可捕获“接近但不必然”的证据。 评估设计：您希望看到信任这种类型的系统的附加功能（更多切片？更难的子集？人机交互） 检查？）。    由   提交 /u/tsenseiii   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o3sqan/show_tell_groundcrew_weekend_build_a_multiagent/</guid>
      <pubDate>Sat, 11 Oct 2025 11:00:47 GMT</pubDate>
    </item>
    <item>
      <title>探索矢量数据库 - 为什么开源 Cosdata OSS 对我有用！</title>
      <link>https://www.reddit.com/r/opensource/comments/1o3nkn8/exploring_vector_databases_why_opensource_cosdata/</link>
      <description><![CDATA[最近我一直在为我的一个项目探索不同的矢量数据库 - 寻找一种快速、高效且设置成本低廉的数据库。 在深入研究 Cosdata、Qdrant、Weaviate 和 Elasticsearch 等平台后，我发现了这一性能比较。  业界领先的 1758+ 具有 1536 维向量的 100 万条记录数据集上的 QPS 比 Qdrant 快 42% 比 Weaviate 快 54% 比 Elastic Search 快 146% 在具有挑战性的搜索任务中始终保持 97% 的精度  在保持卓越查询的同时，索引速度明显快于 Elastic Search 性能。 Cosdata 确实引起了我的注意 - 特别是因为他们提供了一个开源版本 (Cosdata OSS)，很容易在个人或生产项目中进行试验。 最近，我加入了他们的社区，与正在构建和试验检索和 AI 原生系统的其他开发人员建立了良好的联系。 如果您正在从事涉及语义搜索、RAG 或 检索系统，绝对值得一试。如果您想加入，请告诉我。   由   提交/u/karanveer04  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o3nkn8/exploring_vector_databases_why_opensource_cosdata/</guid>
      <pubDate>Sat, 11 Oct 2025 05:39:38 GMT</pubDate>
    </item>
    <item>
      <title>使用 qwe 将文件视为单独的存储库</title>
      <link>https://www.reddit.com/r/opensource/comments/1o3lgwv/treat_files_as_individual_repositories_with_qwe/</link>
      <description><![CDATA[大家好！ 我很高兴终于发布了 Qwe，这是我过去几周一直在研究的一个副项目。 Qwe 解决的问题我们都喜欢 Git，但有时它的项目级跟踪可能有点过头了。您是否曾经尝试过在不影响项目其余部分的情况下恢复单个独立配置文件或单个 Python 脚本？当然，您可以这样做，但通常，它需要您使用复杂的命令，例如 git checkout $COMMIT_HASH -- $FILE_PATH 并且可能不必要地麻烦。我创建了 Qwe，通过将文件作为版本控制的主要单元来使这变得更容易。 Qwe 是什么？ Qwe 是一个版本控制系统 (VCS)，您可以在其中轻松地单独提交、监控和恢复文件。 它非常适合： * 使用许多独立实用程序脚本、配置脚本或构建脚本的软件开发人员。 * 作家/文档团队对 Markdown 或其他文本文件进行版本控制，其中每个文件都是独立的整体。 * 任何喜欢更直接、面向文件的方法来保存历史记录的人。 主要功能和功能工作原理 * 单独跟踪：每个文件都被视为一个独立的小存储库。你不提交“项目”；您提交“文件”。 * 简单恢复：如果您破坏了一个脚本，您只能将该脚本恢复到之前的状态，而不会产生冲突，也不会影响目录中的任何其他文件。 * 为速度而生：Qwe 完全由 Golang (GO) 编写，这使得底层操作保持高效和快速。它被编译为一个静态二进制文件。 尝试一下！我是一名程序员，而不是设计师，所以它目前是一个 CLI 工具，但它完全可以工作！如果社区愿意尝试一下，并让我对工作流程、命令布局和您发现的任何错误提供一些反馈，我将不胜感激。 存储库/下载链接：https://github.com/mainak55512/qwe   由   提交/u/Mainak1224x   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o3lgwv/treat_files_as_individual_repositories_with_qwe/</guid>
      <pubDate>Sat, 11 Oct 2025 03:40:54 GMT</pubDate>
    </item>
    <item>
      <title>slop - 简约的显示管理器（替代登录）</title>
      <link>https://www.reddit.com/r/opensource/comments/1o3f9uw/slop_minimalistic_display_manager_replacement_for/</link>
      <description><![CDATA[大家好， 最近，我决定放弃 GUI 显示管理器，转而使用 TTY 登录。但是，我无法按照自己想要的方式配置登录程序，因此我决定构建自己的登录程序。 介绍 slop - 简单登录程序。 它是 getty 的替代品，并且设计得简约而简单。 与登录不同，它会打印 一堆额外信息（日期、问题、主机名、motd 等），它只显示身份验证所需的内容（即来自 PAM 模块的提示）。 另外，它不会在提示前打印空行，如 agetty 可以。 功能：  聚焦 TTY 设置命令在成功登录时运行，例如startx，或 wayland 合成器。 尝试失败后清除屏幕 在提示上方设置标题 预定义用户名  希望这可以帮助那些想要简单 TTY 登录的人。   由   提交/u/NaiveProcedure755   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o3f9uw/slop_minimalistic_display_manager_replacement_for/</guid>
      <pubDate>Fri, 10 Oct 2025 22:37:54 GMT</pubDate>
    </item>
    <item>
      <title>JS/TS 获取实用程序（以及一些 Go）</title>
      <link>https://www.reddit.com/r/opensource/comments/1o3eyur/jsts_fetch_utilities_and_a_bit_of_go/</link>
      <description><![CDATA[       由   提交/u/OtherwisePush6424   [link] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o3eyur/jsts_fetch_utilities_and_a_bit_of_go/</guid>
      <pubDate>Fri, 10 Oct 2025 22:24:37 GMT</pubDate>
    </item>
    <item>
      <title>Gooey - Go WebAssembly UI 框架</title>
      <link>https://www.reddit.com/r/opensource/comments/1o3dil7/gooey_go_webassembly_ui_framework/</link>
      <description><![CDATA[       由   提交 /u/cookiengineer   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o3dil7/gooey_go_webassembly_ui_framework/</guid>
      <pubDate>Fri, 10 Oct 2025 21:25:01 GMT</pubDate>
    </item>
    <item>
      <title>GenosDB 简介：具有内置零信任安全性的 P2P 图数据库</title>
      <link>https://www.reddit.com/r/opensource/comments/1o3bz3q/introducing_genosdb_a_p2p_graph_database_with/</link>
      <description><![CDATA[]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o3bz3q/introducing_genosdb_a_p2p_graph_database_with/</guid>
      <pubDate>Fri, 10 Oct 2025 20:25:13 GMT</pubDate>
    </item>
    <item>
      <title>Symiosis：一款键盘驱动的笔记应用程序，灵感来自 Notational Velocity。具有即时搜索、就地 Markdown 渲染和内置编辑器（vim/emacs 模式）。</title>
      <link>https://www.reddit.com/r/opensource/comments/1o3au3d/symiosis_a_keyboarddriven_notes_app_inspired_by/</link>
      <description><![CDATA[大家好， Symiosis 是一款桌面笔记应用程序，其灵感源自Notational Velocity。它是使用 Rust + Tauri（后端） 和 Svelte（前端） 构建的。 GitHub： https://github.com/dathinaios/symiosis 主要功能：  通过模糊匹配进行即时搜索 Markdown 就地呈现 键盘驱动（支持 Vim/Emacs 模式） 自定义主题和 TOML 配置 具有语法突出显示功能的内置代码编辑器  当前已测试 主要在 macOS 上 - 快速测试表明它可以在 Windows 和 Linux 上运行，但我很乐意帮助测试和改进跨平台打包。 欢迎所有反馈！   由   提交 /u/fasmatwist   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o3au3d/symiosis_a_keyboarddriven_notes_app_inspired_by/</guid>
      <pubDate>Fri, 10 Oct 2025 19:42:04 GMT</pubDate>
    </item>
    <item>
      <title>TrustMesh - AI 代理的开源信誉层（FastAPI + Python）</title>
      <link>https://www.reddit.com/r/opensource/comments/1o37mk5/trustmesh_opensource_reputation_layer_for_ai/</link>
      <description><![CDATA[嗨r/opensource！ 只是开源的TrustMesh - 使用贝叶斯统计数据的AI代理信誉系统。 它的作用：提供可移植的信任 自主人工智能代理的分数。认为“代理商的 GitHub 明星” - 有助于在交互之前评估可靠性。 为什么重要：Google 的 A2A 协议支持代理间通信，但没有标准的信任层。这填补了这一空白。 技术：  FastAPI 后端 贝叶斯信任引擎（Beta-二项式建模） Python SDK SQLite（规划 PostgreSQL） MIT 许可  寻找：  贡献者（尤其是 TypeScript SDK、Web 仪表板） 对信任算法的反馈 集成想法  GitHub： https://github.com/ashishjsharda/trustmesh 今天刚推出 - 早期阶段但功能齐全！本地运行后，请查看 /docs 中的 API 文档。 欢迎提问！   由   提交 /u/Melodic_Resolve2613   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o37mk5/trustmesh_opensource_reputation_layer_for_ai/</guid>
      <pubDate>Fri, 10 Oct 2025 17:40:34 GMT</pubDate>
    </item>
    <item>
      <title>RankLens Entity Evaluator：用于评估 LLM 实体建议的开源框架和数据集</title>
      <link>https://www.reddit.com/r/opensource/comments/1o37bd1/ranklens_entity_evaluator_opensource_framework/</link>
      <description><![CDATA[我们发布了 RankLens Entity Evaluator，这是一个 Apache-2.0 开源研究项目 - 和完整数据集 - 用于评估大型语言模型如何在结构化提示下“推荐”品牌、网站或实体。 源代码和示例数据信息： • 源代码（评估 + 聚合框架） • 数据源：15,600 个 GPT-5 样本，涵盖 52 个类别和区域 • 包含出现频率和 Plackett–Luce 分数的聚合 CSV • 示例图表和排名范围可视化 核心方法 是： • 实体名称的别名安全规范化 • 自举重采样（每次测试约 300 个样本） • 双聚合（频率 + Plackett-Luce） • 排名范围置信区间估计 许可证： Apache-2.0（代码）· CC BY-4.0（数据） （为了透明度而公开的正在申请专利的系统；没有商业意图。） Github 存储库： https://github.com/jim-seovendor/entity-probe/ 请随意发送有关数据组织、CI 实施或扩展区域设置/实体列表的反馈。谢谢。   由   提交 /u/Decent_Bug3349   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o37bd1/ranklens_entity_evaluator_opensource_framework/</guid>
      <pubDate>Fri, 10 Oct 2025 17:28:47 GMT</pubDate>
    </item>
    </channel>
</rss>