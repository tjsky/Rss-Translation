<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：开源</title>
    <link>https://www.reddit.com/r/opensource/new</link>
    <description>与开源相关的所有内容的 Reddit 子版块（对于此上下文，我们在此不再定义开源的定义 http://en.wikipedia.org/wiki/Open_source）</description>
    <lastBuildDate>Sun, 12 Oct 2025 15:16:51 GMT</lastBuildDate>
    <item>
      <title>jws-server：🧪 使用 json 模拟 websocket 服务器</title>
      <link>https://www.reddit.com/r/opensource/comments/1o4ps6m/jwsserver_mock_websocket_servers_using_json/</link>
      <description><![CDATA[      jws-server，JSON WebSocket 服务器的缩写 该项目是一个轻量级 Node.js CLI 工具，用于使用简单的 JSON 配置文件来模拟 WebSocket 服务器。 灵感来自 json-server，它允许开发者模拟实时 WebSocket 交互，而无需运行完整的后端服务器   由   提交 /u/Sea_Yogurtcloset4567   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o4ps6m/jwsserver_mock_websocket_servers_using_json/</guid>
      <pubDate>Sun, 12 Oct 2025 13:58:55 GMT</pubDate>
    </item>
    <item>
      <title>Invio - 自托管发票，没有臃肿。 | V1.0.0发布</title>
      <link>https://www.reddit.com/r/opensource/comments/1o4m6w9/invio_selfhosted_invoicing_without_the_bloat_v100/</link>
      <description><![CDATA[嘿 r/opensource ，今天我很高兴与大家分享 Invio 的 v1 🎉  Invio 是一款发票软件，其设计目的只有一件事——制作发票。我制作 Invio 是因为我想制作一些发票，但我个人发现的所有开源自托管解决方案对于我的用例来说都太重了，所以我自己制作了。 为什么 Invio 可能适合您：  您不喜欢替代方案的功能膨胀 您希望快速获得发票 您更喜欢现代技术堆栈  这就是为什么 Invio 可能不适合您：  您需要更高级的功能，如 CRM、项目管理 您有很多员工  这是自我发表上一篇文章以来最大的机会：  切换到 puppeteer 进行 PDF 渲染，而不是 wkhtmltopdf 正确 税务处理 XML 导出 PDF 中的 XML 嵌入 深色模式 自定义发票编号模式 改进的自定义模板  关于 AI 的使用，我想比上次更好地澄清这一点。在此应用程序的开发过程中使用了人工智能，主要是为了加快开发过程，但该应用程序未进行 Vivi 编码。功能是我有意规划的，代码是充分优化的（就我而言）。我愿意就人工智能在编码中的使用进行讨论。 仓库：https://github.com/kittendevv/Invio 站点：https://invio.dev/ 文档：https://github.com/kittendevv/Invio/wiki   由   提交 /u/CodingKittenYT   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o4m6w9/invio_selfhosted_invoicing_without_the_bloat_v100/</guid>
      <pubDate>Sun, 12 Oct 2025 11:02:35 GMT</pubDate>
    </item>
    <item>
      <title>嘿，vibe 工程师，也许是一个好的视频编辑器？</title>
      <link>https://www.reddit.com/r/opensource/comments/1o4kg91/hey_vibe_engineers_a_good_video_editor_maybe/</link>
      <description><![CDATA[既然 Capcut 不是免费的，而且 davinci 需要 16gb 内存，我可以用什么来进行带有 capcut 功能的编辑。 一名 Vibe 工程师可以开源一个吗？   由   提交/u/AspenKE   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o4kg91/hey_vibe_engineers_a_good_video_editor_maybe/</guid>
      <pubDate>Sun, 12 Oct 2025 09:13:33 GMT</pubDate>
    </item>
    <item>
      <title>肌肉记忆或我的身体作为用户</title>
      <link>https://www.reddit.com/r/opensource/comments/1o4hmbt/muscle_memory_or_my_body_as_a_user/</link>
      <description><![CDATA[我使用了很多热键。其中之一就是快速翻译。我选择任意荷兰语或西班牙语文本，按下键盘上的热键，然后在谷歌翻译网页上阅读英文翻译。 我的大脑和身体都熟悉这种模式，所以我不会去想它——我的手通过肌肉记忆来使用这种流程。 昨天，我的手自动选择了没有段落的长英文文本并按下了热键。然后我被困了几秒钟。文本已经是英文了，发生了什么？ 看起来我大脑的动物部分以不同的方式使用这些热键。这不是翻译。这是一种“使文本易于理解”的方法。没有段落分隔符的长英文文本太复杂，我的大脑需要“翻译”从这个格式。  我们应该通过人工智能/法学硕士来创建一个基于此的产品吗？极少数人根本使用热键。以这种方式使用它们的人就更少了。几乎所有使用这些模式的人都可以编码，并且期望有一个开源版本，这是很难赚钱的。 但有趣的是我的模式“翻译文本”是如何实现的。实际上是“让文本变得简单”一直以来。   由   提交/u/Kirmark   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o4hmbt/muscle_memory_or_my_body_as_a_user/</guid>
      <pubDate>Sun, 12 Oct 2025 06:13:00 GMT</pubDate>
    </item>
    <item>
      <title>寻求灵感：您希望看到哪些缺失的开源工具被构建？</title>
      <link>https://www.reddit.com/r/opensource/comments/1o4gqcx/seeking_inspiration_whats_a_missing_opensource/</link>
      <description><![CDATA[我是一名开发人员，有一些空闲时间，并且强烈渴望回馈开源世界。我不想仅仅根据自己的需求来启动一个项目，而是希望构建一些能够满足他人真正需求的东西。 因此，我向你们求助——那些以开源为生和呼吸的人。 您认为开源生态系统中缺少什么软件？ 我正在广泛撒网。这个想法可以与任何领域相关： · 开发人员工具：更好的 CLI、VS Code 扩展、测试实用程序、针对常见问题的新库。 · 桌面应用程序：一个简单的跨平台笔记应用程序、个人财务管理器、专用媒体播放器。 · 网络应用程序和实用程序：流行 SaaS 工具的注重隐私的替代方案、自托管服务仪表板、专门的内容管理系统。 · System/DevOps：配置管理工具、备份解决方案、网络实用程序。 关键是它应该具有针对性和可操作性。我不会构建下一个 Linux 内核，但我愿意构建一个强大的、维护良好的工具来很好地解决特定问题。 请尽可能详细地描述您的想法。如果我选择构建您的想法，我将从第一天起将其开源，并很高兴地感谢您的灵感。 我很高兴看到您想要解决哪些问题。感谢您的创造力！   由   提交/u/IOT-guy82   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o4gqcx/seeking_inspiration_whats_a_missing_opensource/</guid>
      <pubDate>Sun, 12 Oct 2025 05:19:19 GMT</pubDate>
    </item>
    <item>
      <title>我厌倦了“前 20 个 DM”的混乱，因此我在 Cloudflare 的免费套餐上构建并开源了一个无服务器赠品工具。</title>
      <link>https://www.reddit.com/r/opensource/comments/1o4gm7c/i_was_tired_of_the_first_20_dms_chaos_so_i_built/</link>
      <description><![CDATA[      作为一名独立开发者，我最不喜欢的任务之一是在 Reddit 和 Twitter 上运行促销代码赠品。他们可以为您的应用程序带来极大的关注和下载。但我发现，试图追踪谁是第一个、手动发送代码和处理投诉总是一团混乱。只是收到大量评论“请给我发送代码”对任何人都没有用！ 因此，我为自己构建了一个工具来解决此问题，今天我将其作为开源项目进行分享。 它称为促销代码队列。 想法很简单：  您添加产品并粘贴到一次性促销代码列表中。 您将获得一个、 赠品的可共享链接。 该应用程序采用先到先得的分配方式。  目标是构建一个可以免费运行的极其精简的东西。整个东西不是一个全栈框架，而是一个简单的静态站点，调用单个 Cloudflare Worker 端点。 Worker 使用 Cloudflare KV 来存储代码列表。关键是它使用原子操作从列表中弹出代码，这保证了没有两个人能够获得相同的代码，即使他们在完全相同的时间单击链接。 技术堆栈：  前端：静态 HTML、CSS 和普通 JavaScript 后端：Cloudflare Worker 数据库：Cloudflare KV 它被设计为完全在 Cloudflare 的免费层上自行托管。  自述文件提供了有关如何使用 Wrangler CLI 进行部署的完整分步指南。 谢谢！   由   提交 /u/CAzkKoqarJFg6SzH   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o4gm7c/i_was_tired_of_the_first_20_dms_chaos_so_i_built/</guid>
      <pubDate>Sun, 12 Oct 2025 05:12:32 GMT</pubDate>
    </item>
    <item>
      <title>我们使用 llm 代理大规模构建自主计算机的开源基础设施</title>
      <link>https://www.reddit.com/r/opensource/comments/1o4fdax/we_built_opensource_infrastructure_for_autonomous/</link>
      <description><![CDATA[      我们着手构建配置基础设施。在这种情况下，你可以启动 100 个虚拟机，让人工智能代理完成他们的任务，然后将其全部拆除。无聊的基础设施，只是工作。 最终构建了更多的东西。 这是一个完整的系统，现在是完整的堆栈。代理可以自主控制计算机、配置自己的虚拟机、跨分布式环境进行协调以及水平扩展。整个堆栈是开源编排、运行时、配置、监控等一切。 我们想要这个，因为我们在生产中尝试运行计算机使用代理时遇到了困难。单机演示很可爱，但它们不能解决实际问题。我们需要隔离、规模和可靠性。 这就是我们所构建的。适用于任何 LLM（我们主要使用 GPT-5-mini，但它也支持本地模型）。部署到任何云或在本地运行。为您提供实时监控，以便您实际看到代理正在做什么。 它已获得 Apache 许可。没有陷阱，没有高级版本，没有“开放核心”废话。我们构建了我们想要存在的基础设施，并且正在共享它。 代码位于 GitHub 上：https://github.com/LLmHub-dev/open-computer-use 如果您考虑过在以下位置部署自主代理： 规模，这可能会减轻您的痛苦。   由   提交/u/Independent-Laugh701   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o4fdax/we_built_opensource_infrastructure_for_autonomous/</guid>
      <pubDate>Sun, 12 Oct 2025 04:01:01 GMT</pubDate>
    </item>
    <item>
      <title>Cronboard,用于管理 cron 作业的基于终端的仪表板,下载Cronboard的源码_GitHub_帮酷</title>
      <link>https://www.reddit.com/r/opensource/comments/1o3vkhd/github_antoniorodrcronboard_a_terminalbased/</link>
      <description><![CDATA[      大家好！ 我再次在这里发帖，这次我很高兴介绍我的新项目：Cronboard。 Cronboard 是一个终端应用程序，允许您在本地和远程服务器上管理和调度 cronjobs。使用 Cronboard，您可以轻松添加、编辑和删除 cronjobs，以及查看其状态。 功能  检查 cron 作业 创建带有验证和人类可读反馈的 cron 作业 暂停和恢复 cron 作业 编辑现有 cron 作业 删除 cron 作业 查看格式化的上次和下次运行时间 使用 SSH 连接到服务器  该项目仍处于开发早期，因此您可能会遇到错误和需要改进的地方。 存储库：https://github.com/antoniorodr/Cronboard 您的反馈非常重要！ 谢谢！   由   提交/u/NorskJesus   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o3vkhd/github_antoniorodrcronboard_a_terminalbased/</guid>
      <pubDate>Sat, 11 Oct 2025 13:24:18 GMT</pubDate>
    </item>
    <item>
      <title>花更少的时间搜索，更多的时间贡献 — 面向开源初学者的 GitHub 问题警报</title>
      <link>https://www.reddit.com/r/opensource/comments/1o3vhth/spend_less_time_searching_more_time_contributing/</link>
      <description><![CDATA[大家好， 我最近构建了一个小项目，旨在解决初学者在尝试进入开源领域时面临的最大问题之一：在采取相关问题之前找到相关问题。 问题：初学者经常花费数小时在 GitHub 上搜索合适的问题。当他们找到一个时，它要么太高级，要么已经分配，​​要么缺乏适合初学者的标签。这会造成不必要的摩擦，并阻止许多人做出贡献。 我尝试的解决方案：我创建了一个简单的工具，可以监视您选择的任何公共存储库，并在出现与您选择的标签匹配的新问题时通过电子邮件或 Telegram 通知您。例如，您可以跟踪“第一期良好”等标签。或“前端”跨多个存储库。设置非常简单，几分钟内即可完成。 为什么我认为这很重要：它可以帮助初学者避免在无休止的搜索中浪费时间，让他们尽早发现问题，并使整个贡献过程变得不那么令人生畏。它被设计得最小化且直观，不需要用户管理复杂的基础设施或付费服务。 现在这是一个 MVP。它有效，但我想进一步完善它。我正在寻找：  关于这是否能解决您真正的痛点的反馈。 改进建议或使其更有价值的附加功能。 关于如何更好地为贡献者和维护者服务的想法。  如果您能抽出几分钟时间，我将非常感谢您的见解。谢谢。 Github 存储库   由   提交 /u/Crafty_Ask5382   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o3vhth/spend_less_time_searching_more_time_contributing/</guid>
      <pubDate>Sat, 11 Oct 2025 13:21:00 GMT</pubDate>
    </item>
    <item>
      <title>anki 但用于主题而不是抽认卡？</title>
      <link>https://www.reddit.com/r/opensource/comments/1o3vgyk/anki_but_for_topics_instead_of_flashcards/</link>
      <description><![CDATA[       由   提交/u/Educational_Lynx286   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o3vgyk/anki_but_for_topics_instead_of_flashcards/</guid>
      <pubDate>Sat, 11 Oct 2025 13:19:59 GMT</pubDate>
    </item>
    <item>
      <title>Markon • 最小干扰的 Markdown 编辑器</title>
      <link>https://www.reddit.com/r/opensource/comments/1o3thxj/markon_minimal_distractionfree_markdown_editor/</link>
      <description><![CDATA[      公开预览 https://metaory.github.io/markon/ 最小干扰的 Markdown 编辑器 功能  GFM：GitHub 风格的 Markdown 剪贴板：复制， 粘贴 文件：保存、加载 预览：可调整大小的分割 突出显示：250+ 语言、500+ 别名 主题：浅色/深色 拼写检查：切换拼写检查 仅限本地    由   提交/u/Last_Establishment_1   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o3thxj/markon_minimal_distractionfree_markdown_editor/</guid>
      <pubDate>Sat, 11 Oct 2025 11:43:50 GMT</pubDate>
    </item>
    <item>
      <title>我们如何测试编译器驱动的全栈 Web 框架</title>
      <link>https://www.reddit.com/r/opensource/comments/1o3svvu/how_we_test_a_compilerdriven_fullstack_web/</link>
      <description><![CDATA[       由   提交/u/matijash  [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o3svvu/how_we_test_a_compilerdriven_fullstack_web/</guid>
      <pubDate>Sat, 11 Oct 2025 11:09:32 GMT</pubDate>
    </item>
    <item>
      <title>[展示和讲述] GroundCrew — 周末构建：多代理事实检查器 (LangGraph + GPT-4o) 在 FEVER 切片上达到 72%</title>
      <link>https://www.reddit.com/r/opensource/comments/1o3sqan/show_tell_groundcrew_weekend_build_a_multiagent/</link>
      <description><![CDATA[TL;DR: 我花了周末构建了 GroundCrew，一个自动事实检查管道。它需要任何文本→提取声明→搜索网络/维基百科→充满信心+证据地验证和报告。在 100 个样本的 FEVER 切片上，它的总体得分为71-72%，具有很强的支持/驳斥，但在信息不足方面表现不佳。下面的回购+评估——希望得到有关 NEI 检测和评估的反馈 为什么这可能会很有趣  这是一个干净的类型化 LangGraph 管道（带有 Pydantic I/O 的代理），您可以一口气读完。 包括一个迷你评估工具（FEVER 子集）和一个简单的消融（网络与网络）。 仅限维基百科）。 显示法学硕士仍然过度声明的地方，以及护栏+结构如何帮助（但没有完全修复）NEI。  它的作用（端到端）  声明提取→从输入文本中提取事实陈述 证据 搜索→Tavily（网络）或维基百科模式验证→比较主张↔证据，分配支持/拒绝/NEI+置信度报告→带有每个主张理由和证据片段的Markdown/JSON报告全部 代理使用结构化输出（Pydantic），因此您可以在整个图中获得一致的类型。  架构（LangGraph）  顺序 4 阶段图（提取→搜索→验证→报告） 类型安全节点 模式（更少的提示粘合，更少的“字符串类型”错误） 质量预设（模型/临时/工具），您可以在每次运行时切换 批处理模式，使用并行工作器进行快速评估  结果（FEVER，100 个样本；GPT-4o）   配置 总体 支持 拒绝 NEI    Web 搜索 71% 88% 82% 42%   仅限维基百科 72% 91%88%36%背景：专用 FEVER 系统约为 85–90%+。对于周末以 LLM 为中心的管道，~72% 感觉像是一个不错的基线 - 但NEI 显然是弱点。 它在哪里中断（以及原因）  NEI（信息不足）： 该模型从部分证据中推断，而不是放弃。教它说“我还不知道（还）”比支持/反驳更难。 证据特异性：例如，声明说“由两个人创立”，证据列出了两个名字，但从未指出“两个”。验证者计算姓名并声明支持——根据 FEVER 准则，技术上是错误的。 矛盾边缘：微妙的时间限定符（“截至 2019 年……”）或实体消歧（相同名称，不同实体）仍然会出错。  Repo 和文档  代码： https://github.com/tsensei/GroundCrew 评估： evals/ 有脚本 + 注释（FEVER 切片 + 配置） 切换） Wiki：入门/使用/架构/API 参考/示例/故障排除 许可证： MIT  我正在寻找的具体反馈  NEI 处理：您用于弃权的最佳实践 坚持（提示、路由、NLI 过滤器、阈值）？ 矛盾检测：轻量级方法，无需庞大的重新排序器堆栈即可捕获“接近但不必然”的证据。 评估设计：您希望看到信任这种类型的系统的附加功能（更多切片？更难的子集？人机交互） 检查？）。    由   提交 /u/tsenseiii   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o3sqan/show_tell_groundcrew_weekend_build_a_multiagent/</guid>
      <pubDate>Sat, 11 Oct 2025 11:00:47 GMT</pubDate>
    </item>
    <item>
      <title>使用 qwe 将文件视为单独的存储库</title>
      <link>https://www.reddit.com/r/opensource/comments/1o3lgwv/treat_files_as_individual_repositories_with_qwe/</link>
      <description><![CDATA[大家好！ 我很高兴终于发布了 Qwe，这是我过去几周一直在研究的一个副项目。 Qwe 解决的问题我们都喜欢 Git，但有时它的项目级跟踪可能有点过头了。您是否曾经尝试过在不影响项目其余部分的情况下恢复单个独立配置文件或单个 Python 脚本？当然，您可以这样做，但通常，它需要您使用复杂的命令，例如 git checkout $COMMIT_HASH -- $FILE_PATH 并且可能不必要地麻烦。我创建了 Qwe，通过将文件作为版本控制的主要单元来使这变得更容易。 Qwe 是什么？ Qwe 是一个版本控制系统 (VCS)，您可以在其中轻松地单独提交、监控和恢复文件。 它非常适合： * 使用许多独立实用程序脚本、配置脚本或构建脚本的软件开发人员。 * 作家/文档团队对 Markdown 或其他文本文件进行版本控制，其中每个文件都是独立的整体。 * 任何喜欢更直接、面向文件的方法来保存历史记录的人。 主要功能和功能工作原理 * 单独跟踪：每个文件都被视为一个独立的小存储库。你不提交“项目”；您提交“文件”。 * 简单恢复：如果您破坏了一个脚本，您只能将该脚本恢复到之前的状态，而不会产生冲突，也不会影响目录中的任何其他文件。 * 为速度而生：Qwe 完全由 Golang (GO) 编写，这使得底层操作保持高效和快速。它被编译为一个静态二进制文件。 尝试一下！我是一名程序员，而不是设计师，所以它目前是一个 CLI 工具，但它完全可以工作！如果社区愿意尝试一下，并让我对工作流程、命令布局和您发现的任何错误提供一些反馈，我将不胜感激。 存储库/下载链接：https://github.com/mainak55512/qwe   由   提交/u/Mainak1224x   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o3lgwv/treat_files_as_individual_repositories_with_qwe/</guid>
      <pubDate>Sat, 11 Oct 2025 03:40:54 GMT</pubDate>
    </item>
    <item>
      <title>slop - 简约的显示管理器（替代登录）</title>
      <link>https://www.reddit.com/r/opensource/comments/1o3f9uw/slop_minimalistic_display_manager_replacement_for/</link>
      <description><![CDATA[大家好， 最近，我决定放弃 GUI 显示管理器，转而使用 TTY 登录。但是，我无法按照自己想要的方式配置登录程序，因此我决定构建自己的登录程序。 介绍 slop - 简单登录程序。 它是 getty 的替代品，并且设计得简约而简单。 与登录不同，它会打印 一堆额外信息（日期、问题、主机名、motd 等），它只显示身份验证所需的内容（即来自 PAM 模块的提示）。 另外，它不会在提示前打印空行，如 agetty 可以。 功能：  聚焦 TTY 设置命令在成功登录时运行，例如startx，或 wayland 合成器。 尝试失败后清除屏幕 在提示上方设置标题 预定义用户名  希望这可以帮助那些想要简单 TTY 登录的人。   由   提交/u/NaiveProcedure755   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1o3f9uw/slop_minimalistic_display_manager_replacement_for/</guid>
      <pubDate>Fri, 10 Oct 2025 22:37:54 GMT</pubDate>
    </item>
    </channel>
</rss>