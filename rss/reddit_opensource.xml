<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：Opensource</title>
    <link>https://www.reddit.com/r/opensource/new</link>
    <description>所有与开源相关的所有内容的子reddit（在此上下文中，我们在此处删除开源的定义http://en.wikipedia.org/wiki/open_source）</description>
    <lastBuildDate>Fri, 25 Jul 2025 01:21:48 GMT</lastBuildDate>
    <item>
      <title>Pro Code Playground  - 带有内置AI助手的开源多语言代码编辑器（Python，Java，C ++，JS，更多）</title>
      <link>https://www.reddit.com/r/opensource/comments/1m8ievd/pro_code_playground_open_source_multilanguage/</link>
      <description><![CDATA[         &lt;！ -  sc_off- sc_off-&gt;  大家好！ 👋 I’d love to share an open-source tool I’ve been working on called Pro Code Playground — a web-based code editor that supports multiple languages, lets you run code in-browser, and even includes a built-in AI coding assistant powered by Groq&#39;s LLaMA 3. 💡 What it does: 🧠 Write, run, and debug code in: Python, C, C++, Java, JavaScript, C# 📤 Upload .py, .java, .cpp, etc. files ✨ Supports syntax highlighting and ACE editor 🔁 Toggle light/dark mode 💬 Built-in AI Assistant (LLaMA 3.3 via Groq) to: 分析您的代码 解释错误 回答编码问题 甚至使用边缘tts！     python，python，python，langchain，langchain，gro q llama 3.3，groq llama 3.3，edec p&gt; JS，C＃后端执行 🔓开源＆amp;免费使用 所有内容都是模块化和开源的。我喜欢反馈，想法或协作！ 📦源代码：通过拥抱face的文件树浏览或通过Space Clone浏览  🙏反馈欢迎！ 我真的很感谢您的想法，建议或特征想法。我构建了这个项目作为学习旅程，很想知道我可以改进或添加什么使其对他人有用。 感谢您检查它❤️  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/i_am_vsj      [注释]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1m8ievd/pro_code_playground_open_source_multilanguage/</guid>
      <pubDate>Thu, 24 Jul 2025 22:32:53 GMT</pubDate>
    </item>
    <item>
      <title>EZ-一个免费的Mac CLI工具，可以帮助在命令行中运行命令</title>
      <link>https://www.reddit.com/r/opensource/comments/1m8hmyv/ez_a_free_mac_cli_tool_to_help_run_commands_in/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  嘿，这是我打开采购的第一个应用程序，我真的不知道我在做什么。我们的AI霸主之一建议此子雷迪特可能是一个不错的选择。希望这是对的，如果不是，请提前抱歉。  无论如何，我是一个开发人员，我在多个技术堆栈中工作。在某个时候，对于构建，测试等的键入和记住冗长的命令而感到无聊。因此，我编写了一个小命令行工具，使我可以编写EZ Build或ez build of ez build or test或类似的命令工具，无论存储库是基于（不是神奇的，而是通过存储一次））。我添加了一个奖励功能，其中EZ输出也是运行子过程所需的时间，这对于关注构建时间和单元测试运行时间而无需考虑。它还支持在单独的子过程中并行运行命令。  如果您想尝试一下，则可以使用Homebrew安装该工具： brew tap urtti/ez  brew brew install e ez   Homebrew Repo： https://github.com/urtti/homebrew-ez  源代码repo： https://github.com/urtti/ez    到目前为止，我已经亲自使用过它，所以这里可能有粗糙的边缘。提交由＆＃32; /u/ittrut     &lt;a href =“ https://www.reddit.com/r/opensource/comments/1m8hmyv/ez_a_a_free_mac_mac_cli_to_to_to_help_help_run_commands_in/]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1m8hmyv/ez_a_free_mac_cli_tool_to_help_run_commands_in/</guid>
      <pubDate>Thu, 24 Jul 2025 21:59:55 GMT</pubDate>
    </item>
    <item>
      <title>我如何重新实现专有软件？</title>
      <link>https://www.reddit.com/r/opensource/comments/1m8f4m1/how_closely_can_i_reimplement_proprietary_software/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我目前正在重新实现我非常喜欢的软件。主要原因是我有隐私问题，并希望能够自我托管。 现在，我想知道我的重新实施有多近。 我肯定我肯定只会实现非常基本的功能，这不是原来的，但我仍然有点担心，但是我可能会担心任何危险的领域。 ＆＃32;提交由＆＃32; /u/u/calter_tea_1337     [link]   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1m8f4m1/how_closely_can_i_reimplement_proprietary_software/</guid>
      <pubDate>Thu, 24 Jul 2025 20:19:09 GMT</pubDate>
    </item>
    <item>
      <title>我构建了JSON Flow，一个免费的开源与代码扩展名，可视化和转换JSON/YAML/XML作为图</title>
      <link>https://www.reddit.com/r/opensource/comments/1m8e1gg/i_built_json_flow_a_free_opensource_vs_code/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  大家 r/opensource ！ 我们都去过那里：凝视着大量的json回应，希望我们能做到的json回应，希望我们可以...这就是为什么我构建了 JSON Flow ，这是一种开源与代码扩展名，完全可以做到这一点。它很简单，快速，并且可以安全地将所有东西都牢固地放在您的机器上。  没有数据离开您的计算机。启动是轻而易举的：   上下文菜单菜单功率：  右键单击数据文件→ json flow→显示JSON Preview 。完成。    侧边栏访问：  单击侧边栏中的JSON流量图标→选择您的文件→ show preview                    priview：在命令中，调色板对此无效。您需要先选择一个文件。  它带给表的内容：    互动图：呈现JSON，YAML，TOML，TOML，XML，CSV作为可探索的节点图形。可视化数据变得更加容易。  一键转换：立即在格式之间交换。认真地说，这就是快速。  类型的生成：自动s脚TS，GO，RUST，RUST，使用QuickType类型。专注于编码，而不是输入定义。  为什么它突出：      100％本地：您的数据保持私密。周期。  完全开放源：固体驱动的代码库，jsdoc到处都是jsdoc，并且总是欢迎使用PR！   零外部依赖性：仅VS代码（及其叉子）。轻巧且可靠。  按数字：      31k+安装， 85K+下载      1.5k+上个月上个月安装       href =“ https://res.cloudinary.com/dhwxnbnaj/video/upload/json%20flow/json-flow_envzol.mp4”&gt; https://res.cloudinary.com/dhwxnbnaj/video/upload/json%20flow/json-flow_envzol.mp4   准备尝试吗？    github repo＆amp; docs    &lt;安装JSON FLOW          您是您探索和转换数据的使用方法是什么？让我们交换提示！  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/igildev     [link]   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1m8e1gg/i_built_json_flow_a_free_opensource_vs_code/</guid>
      <pubDate>Thu, 24 Jul 2025 19:36:53 GMT</pubDate>
    </item>
    <item>
      <title>介绍：Swift的现代有限状态机器</title>
      <link>https://www.reddit.com/r/opensource/comments/1m8c4nz/introducing_modern_finite_state_machines_for_swift/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;      oak：一种用于迅速的现代有限状态机器  构建具有信心的可预测的，可预测的，可预测的快速应用。  oak是什么？它将复杂的应用逻辑转换为清晰，可测试的状态过渡，同时与SwiftUI无缝集成以进行反应性用户界面。 为什么选择oak？ 解决复杂性问题：停止与纠结的异步代码，不可预测的状态突变以及难以预测的状态突变以及难度。 Oak brings structure and predictability to your app&#39;s core logic through pure functions and immutable state transitions. Key Benefits:  Predictable State Management: Pure update functions eliminate side effects and make behaviour deterministic. Robust Async Handling: Managed effects with automatic cancellation prevent resource leaks. SwiftUI Native: Purpose-built integration for reactive UI development. Swift 6 Ready: Full actor isolation and Sendable compliance for modern concurrency. Test-Friendly: Comprehensive testing infrastructure with deterministic async expectations.  Performance Built-In Oak delivers exceptional performance where it counts:  Sub-Microsecond事件处理：内部事件处理在1 µsec以下完成。 快速效应协调：创建任务和结果处理仅为20 µsec。   Perfect For:  iOS/macOS Developers building complex user flows and data synchronisation. SwiftUI Teams needing predictable state management across view hierarchies. Apps with Heavy Async Operations requiring reliable task lifecycle management. Quality-Focused Projects that demand testable, maintainable架构。  为什么橡木脱颖而出： 橡木将有限状态机的数学严谨与Swift的类型系统和现代并发功能相结合。这是一个完整的框架，可帮助构建可靠，可扩展的快速应用程序。  橡木仍在开发中，但现在可以使用。 href =“ https://github.com/couchdeveloper/oak”&gt;  https://github.com/couchdeveloper/oak       &lt;！ -  sc_on-&gt; 32;提交由＆＃32; /u/u/dy_hotel1100     [link]   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1m8c4nz/introducing_modern_finite_state_machines_for_swift/</guid>
      <pubDate>Thu, 24 Jul 2025 18:23:30 GMT</pubDate>
    </item>
    <item>
      <title>有人在使用露天吗？我找到了不需要API或代码的替代方案。</title>
      <link>https://www.reddit.com/r/opensource/comments/1m8948n/is_anyone_using_openmeteo_i_found_an_alternative/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我以前使用过open-meteo apis，但最近曾尝试过Soranoai的Kumo。它使您可以查询天气 +获得没有任何代码的见解。只需输入您想要的东西，就像您向助手联系即可。想知道其他人如何管理天气数据API或AI？  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/shawon770     [link]    [注释]  ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1m8948n/is_anyone_using_openmeteo_i_found_an_alternative/</guid>
      <pubDate>Thu, 24 Jul 2025 16:30:51 GMT</pubDate>
    </item>
    <item>
      <title>Tududi V0.80-现在开源 - 麻省理工学院（加上子任务和其他更新）！</title>
      <link>https://www.reddit.com/r/opensource/comments/1m86aqc/tududi_v080_now_open_source_mit_plus_subtasks_and/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  嘿， 对于那些第一次阅读  此版本中有什么新功能（v0.80）      -   mit许可  - 完全开放源！   -   UI Tweaks ：新项目详细信息页面，新笔记页面和许多各种微调添加  -    -  性能修复   -    -    -   rich smarkdown editor  in Notes    我为什么要使用tududi？最小值  - 没有膨胀，没有广告，没有深色模式  -  灵活的层次结构  - 区域＆gt;项目＆GT;任务＆gt;子任务  -  本地化  - 以24多种语言可用（您可能已经包括在内 - 或请求它！）  -    -   telegram 集成 - 通过简单的CHAT   - 添加任务  -  获得工作方法 nouncology  nocy in n in NOND -IN -IN -IN -IN -IN -IN noctoration               todoist/intion/ticktick/microsoft todo（或其他） - 减去复杂性。 非常感谢所有支持 tududi 的社区。 href =“ https://tududi.com”&gt; https://tududi.com     href =“ https://www.reddit.com/r/tududi/”&gt; https://www.reddit.com/r/tududi/     屏幕截图和repo中的完整功能。欢迎反馈！ 🚀  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/cvicpp     &lt;a href =“ https://www.reddit.com/r/opensource/comments/1M86AQC/TUDUDI_V080_NOW_NOW_OPEN_SOURCE_MIT_MIT_MIT_PLUS_MIT_PLUS_SSUBTASKSS_AND/]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1m86aqc/tududi_v080_now_open_source_mit_plus_subtasks_and/</guid>
      <pubDate>Thu, 24 Jul 2025 14:44:17 GMT</pubDate>
    </item>
    <item>
      <title>我们需要欧洲主权技术基金</title>
      <link>https://www.reddit.com/r/opensource/comments/1m8671g/we_need_a_european_sovereign_tech_fund/</link>
      <description><![CDATA[      ＆＃32;提交由＆＃32; /u/pimterry      [注释]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1m8671g/we_need_a_european_sovereign_tech_fund/</guid>
      <pubDate>Thu, 24 Jul 2025 14:40:16 GMT</pubDate>
    </item>
    <item>
      <title>建立了临时邮件服务以练习Next.js和开源。</title>
      <link>https://www.reddit.com/r/opensource/comments/1m83cel/built_a_temp_mail_service_to_practice_nextjs_and/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  这个项目是出于好奇心，当时我正在使用临时邮件API，并认为自己建立一个项目是一个有趣的挑战。我将其用作个人学习场所，以使用Modern Next.js功能进行操作，例如应用程序路由器和服务器组件，使代码简单易于遵循任何人。结果是您可以托管的全堆栈，开源额度邮件服务，以便完整隐私，并且可以通过一键式部署到Vercel进行运行。您可以在此处查看项目： https://github.com/juheapi-com/tem/temp-mail     让我知道您的想法！提交由＆＃32; /u/u/catgpt42     [link]  &lt;a href =“ https://www.reddit.com/r/opensource/comments/1m83cel/built_a_a_temp_mail_service_service_to_to_to_to_to_to_practice_nextjs_and/”]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1m83cel/built_a_temp_mail_service_to_practice_nextjs_and/</guid>
      <pubDate>Thu, 24 Jul 2025 12:41:36 GMT</pubDate>
    </item>
    <item>
      <title>将您的简历视为REST API</title>
      <link>https://www.reddit.com/r/opensource/comments/1m7xh3p/expose_your_cv_as_a_rest_api/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  刚刚发布了一个超级简单的Python模块，该模块将您的简历视为FastApi Web服务  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32;态href =“ https://www.reddit.com/r/opensource/comments/1m7xh3p/expose_your_cv_as_a_a_rest_api/”&gt; [link]    [注释]  ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1m7xh3p/expose_your_cv_as_a_rest_api/</guid>
      <pubDate>Thu, 24 Jul 2025 07:00:24 GMT</pubDate>
    </item>
    <item>
      <title>需要维护者的项目</title>
      <link>https://www.reddit.com/r/opensource/comments/1m7sdra/project_in_need_of_a_maintainer/</link>
      <description><![CDATA[        &lt;！ -  sc_off-&gt;  这是针对Hypatia的，最初由Divestos开发的软件，现在由VarateAnteam维护。开发人员一直在尽力而为，但需要维护人员，以便该项目可以保持最新状态。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/mikeboucher21       [注释]    ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1m7sdra/project_in_need_of_a_maintainer/</guid>
      <pubDate>Thu, 24 Jul 2025 02:20:26 GMT</pubDate>
    </item>
    <item>
      <title>我发现作为管理员和DevOps有用的开源项目</title>
      <link>https://www.reddit.com/r/opensource/comments/1m7qkoh/open_source_projects_ive_found_useful_as_an_admin/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;   wttr.in：ascii天气 https：//github.com/github.com/chubin/wttr.in  href =“ https://github.com/herrbischoff/country-ip-blocks”&gt; https://github.com/herrbischoff/country-ip-blocks       在您的...命令行！  https://gitlab.com/noumenia/aetolos  href =“ https://github.com/chubin/cheat.sh”&gt; https://github.com/chubin/cheat.sh      open-source live-chat，电子邮件support，电子邮件支持，omni-channel desk  https://github.com/chatwook/chatwook/chatwook     href =“ https://github.com/phpseclib/phpseclib”&gt; https://github.com/phpseclib/phpseclib/phpsececlib     matomo是领先的开放式开放式服务，是Google Analytics的替代方案href =“ https://github.com/matomo-org/matomo/”&gt; https://github.com/matomo-org/matomo/     提交由＆＃32; /u/u/maria_thesus_40     [link]   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1m7qkoh/open_source_projects_ive_found_useful_as_an_admin/</guid>
      <pubDate>Thu, 24 Jul 2025 00:54:32 GMT</pubDate>
    </item>
    <item>
      <title>构建了一个微小的Python工具，用于扫描estibot的“今天结束”列表，并通过TLDX（MIT许可证）找到可用的域</title>
      <link>https://www.reddit.com/r/opensource/comments/1m7n6no/built_a_tiny_python_tool_to_scan_estibot_ending/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我最近一直在进行一些领域的研究，并希望通过评估的价值过滤estibot“今天结束” CSV文件，并使用 tldx  （cli tool）（一个cli tool）。使用 tldx   将可用的打印到stdout，没有db，no fluff    github：它是〜50行，仅使用stdlib，如果您进入过期的域或像构建小自动化一样，可能会很有用。欢迎反馈。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/fredwhifflepeg     [link]   [注释]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1m7n6no/built_a_tiny_python_tool_to_scan_estibot_ending/</guid>
      <pubDate>Wed, 23 Jul 2025 22:23:03 GMT</pubDate>
    </item>
    <item>
      <title>traytemps：我简单，可自定义的CPU/GPU温度监控C＃应用</title>
      <link>https://www.reddit.com/r/opensource/comments/1m7mehl/traytemps_my_simple_customizable_cpugpu/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/far-guide7959     [link]   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1m7mehl/traytemps_my_simple_customizable_cpugpu/</guid>
      <pubDate>Wed, 23 Jul 2025 21:51:49 GMT</pubDate>
    </item>
    <item>
      <title>MS-DOS的微小脑力翻译</title>
      <link>https://www.reddit.com/r/opensource/comments/1m7m8zf/a_tiny_brainfuck_interpreter_for_msdos/</link>
      <description><![CDATA[    src =“ https://external-preview.redd.it/bhxtrm0dv7gxbj9ktqaqccccccccvlrpzlrpzl4rx08x1mdfgvu8c.png？宽度= 640＆amp; crop = smart＆amp; auto = Webp＆amp; s = 51C5F8FD982634883758AEAE16A0A1DFBD8DF6B171 title =“ MS-DOS的微小脑力解释”/&gt;   ＆＃32;提交由＆＃32; /u/u/backgket_shift5408       [注释]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1m7m8zf/a_tiny_brainfuck_interpreter_for_msdos/</guid>
      <pubDate>Wed, 23 Jul 2025 21:45:42 GMT</pubDate>
    </item>
    </channel>
</rss>