<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：Opensource</title>
    <link>https://www.reddit.com/r/opensource/new</link>
    <description>所有与开源相关的所有内容的子reddit（在此上下文中，我们在此处删除开源的定义http://en.wikipedia.org/wiki/open_source）</description>
    <lastBuildDate>Thu, 14 Aug 2025 03:52:57 GMT</lastBuildDate>
    <item>
      <title>查看开源创建者的面孔</title>
      <link>https://www.reddit.com/r/opensource/comments/1mpox77/see_the_faces_of_open_source_creators/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/samontab       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1mpox77/see_the_faces_of_open_source_creators/</guid>
      <pubDate>Thu, 14 Aug 2025 03:00:34 GMT</pubDate>
    </item>
    <item>
      <title>维修权：硬件自由的开源方法</title>
      <link>https://www.reddit.com/r/opensource/comments/1mplkmp/right_to_repair_an_open_source_approach_to/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  在一个以专有生态系统为主导的时代和计划的过时，我们的最新职位深入探讨了维修权的关键道德战。我们探讨了主要的科技制造商如何越来越限制消费者修理自己设备的能力，从而有效地将所有权变成了永久许可协议。这种做法不仅破坏了消费者的自主权和经济公平性，而且对不断增长的全球电子废物危机做出了重大贡献。  文章认为，维修权是对开源运动至关重要的自由和透明原则的基本扩展。就像开源软件能够自由地进行检查，修改和共享代码的自由一样，在物理硬件领域中修复倡导者的权利。呼吁对我们购买的产品进行更大的控制，从而通过延长设备寿命并促进更具竞争力，更具创新性的维修市场来促进可持续性。加入我们，我们讨论为什么要求维修权的权利不仅是为了节省资金，而且还涉及回收真正的所有权并促进更具道德和可持续的技术未来。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/vudueprajacu       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1mplkmp/right_to_repair_an_open_source_approach_to/</guid>
      <pubDate>Thu, 14 Aug 2025 00:25:50 GMT</pubDate>
    </item>
    <item>
      <title>开源ATS友好的简历构建器专注于隐私</title>
      <link>https://www.reddit.com/r/opensource/comments/1mpke1a/opensource_atsfriendly_resume_builder_focused_on/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我已经建立了一个开源的简历构建器，旨在创建ATS兼容和隐私友好的简历。所有处理都在本地发生在浏览器中，不涉及服务器或外部跟踪。 该应用程序支持六个专业模板，实时预览，即时PDF生成和多种语言（葡萄牙语，英语，西班牙语）。数据仅存储在用户的浏览器中，并且可以通过XML导出或导入。 使用Next.js 15，Typescript和tailwind CSS构建，它具有完全响应的且在台式机和移动设备上工作。在MIT中获得许可。  github： https://github.com/goncalojbsousa/goncalojbsousa/easypeasycv  href =“ https://www.easypeasycv.com”&gt; https://www.easypeasycv.com     欢迎反馈和贡献。   &lt;！ -  sc_on-- sc_on--&gt; 32;提交由＆＃32; /u/u/zouker_zkg      [link]        [注释]  ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1mpke1a/opensource_atsfriendly_resume_builder_focused_on/</guid>
      <pubDate>Wed, 13 Aug 2025 23:34:20 GMT</pubDate>
    </item>
    <item>
      <title>批量电子邮件验证者</title>
      <link>https://www.reddit.com/r/opensource/comments/1mpg3xw/bulk_email_verifier/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  找到了这2个，如果您对其进行了测试，或者您还有其他选择：     https://github.com/ReachERHQ/check-if-if-email-email-email-exists 提交由＆＃32; /u/u/free_care_2006     [link]   ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1mpg3xw/bulk_email_verifier/</guid>
      <pubDate>Wed, 13 Aug 2025 20:45:04 GMT</pubDate>
    </item>
    <item>
      <title>任何开发人员都想和我一起建造一个Opensource Lindy AI吗？</title>
      <link>https://www.reddit.com/r/opensource/comments/1mpcp6a/any_dev_want_to_build_an_opensource_lindy_ai_with/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/sensivitive-fruit-7789     [link] [comments]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1mpcp6a/any_dev_want_to_build_an_opensource_lindy_ai_with/</guid>
      <pubDate>Wed, 13 Aug 2025 18:37:37 GMT</pubDate>
    </item>
    <item>
      <title>友善：开源AI命令应用程序。键入3倍，不需要键盘。</title>
      <link>https://www.reddit.com/r/opensource/comments/1mpclv6/amical_open_source_ai_dictation_app_type_3x/</link>
      <description><![CDATA[        &lt;！ -  sc_off-&gt;  在过去的几个月中，我们一直在修改语音到文本AI…最终建立了所有人可能会觉得有用的东西。       href =“ https://github.com/amicalhq/amical”&gt;  Amical    - 我们的宠物项目变成了全速度的AI Dastation应用程序。开源，准确，快速，免费！第秒的转录跟上您的想法  理解上下文  - 知道您是否在Gmail，Instagram，Slack等，并相应地及时用文本   自定义词汇&gt;  for name，aregon of argon，are care of are&gt;     forn/form forn/form form form &lt;&gt; &lt;&gt; readme）  💡路线图   Windows App  语音注释 会议注释和转录 可编程语音命令（MCP Integration等） href =“ https://github.com/amicalhq/amical”&gt; https://github.com/amicalhq/amical    很高兴听到社区的任何想法，批评或建议。       &lt;！ -  sc_on-&gt;＆＃32222;提交由＆＃32; /u/u/drjdjd       [注释]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1mpclv6/amical_open_source_ai_dictation_app_type_3x/</guid>
      <pubDate>Wed, 13 Aug 2025 18:34:13 GMT</pubDate>
    </item>
    <item>
      <title>我重建了现代用途的艾森豪威尔矩阵，这就是为什么</title>
      <link>https://www.reddit.com/r/opensource/comments/1mpc25k/i_rebuilt_the_eisenhower_matrix_for_modern_use/</link>
      <description><![CDATA[A few months ago, I was looking for a simple, focused Eisenhower Matrix app. I wanted something clean, distraction-free, and fast, but everything I found was either outdated, bloated with features I didn’t need, or just… ugly. So, I decided to build my own. This week, I released version 2.0，完全由一小部分早期用户的反馈形状。该界面充分重新设计了更平静，更加专注的外观，我终于添加了适当的时间和智能通知，因此任务不会在裂缝中滑落。 我最自豪的是它仍然是极简主义者。没有无尽的菜单，没有复杂的设置。只需四个象限即可整理您的任务，并进行了一些深思熟虑的触摸。 如果您很好奇，则该项目的开源是：🔗 github&gt; github&gt; github&gt; 我很好奇，对于那些尝试使用Eisenhower矩阵（或类似系统）的人来说，您希望更多的生产力应用具有什么？  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32;态href =“ https://www.reddit.com/r/opensource/comments/1mpc25k/i_rebuilt_the_eisenhower_eisenhower_matrix_for_modern_modern_use/”&gt; [link]   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1mpc25k/i_rebuilt_the_eisenhower_matrix_for_modern_use/</guid>
      <pubDate>Wed, 13 Aug 2025 18:13:57 GMT</pubDate>
    </item>
    <item>
      <title>我正在尝试为我的开源项目做黑客马拉松</title>
      <link>https://www.reddit.com/r/opensource/comments/1mpbs3r/i_am_trying_to_do_a_hackathon_for_my_open_source/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  嗨！我希望提供一些指导。  我以为我将为开源项目提供的捐赠资金很好地利用了它，通过组织远程迷你黑客马拉松。不幸的是，我关于我的帖子似乎立即被投降。我知道人们不喜欢广告，也不喜欢广告，但是如果我不谈论这个，我就不会与任何人联系。我也认为这是一个很好的原因，因为它可能会以轻巧和有趣的方式为开源做出贡献（至少，这就是我希望获得的成就）。 我将感谢您以更好的方式做到这一点的任何建议，这并不是让人们如此生气。您将如何解决这个问题？ 这是我发表的原始帖子（在项目社区中，幸运的是那里没有下跌投票;））： https://www.reddit.com/r/superproductivition/comments/1m8dppz/check_out_the_super_productivity_remote_mini/    &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/johannesjo     [link]  &lt;a href =“ https://www.reddit.com/r/opensource/comments/1mpbs3r/i_am_am_trying_to_do_do_do_a_hackathon_for_my_open_source/”]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1mpbs3r/i_am_trying_to_do_a_hackathon_for_my_open_source/</guid>
      <pubDate>Wed, 13 Aug 2025 18:03:44 GMT</pubDate>
    </item>
    <item>
      <title>构建开源P2P密码管理器：寻找合作者</title>
      <link>https://www.reddit.com/r/opensource/comments/1mpb2et/building_an_open_source_p2p_password_manager/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  您好所有阅读的人， 我正在寻找合作者，从头开始构建一个真正的P2P密码管理器，从头开始，可扩展并且完全安全，并且完全安全。 大多数当前密码管理器在集中式的云服务器中存储攻击者的目标，为攻击者提供了有吸引力的目标。 P2P方法使用户完全控制了他们的数据 - 阐明了Honeypot问题，同时改变了对单个用户的安全责任。 Such an approach, I believe, would lead to a higher ceiling of security, which may be of interest to many users--particularly those who value privacy and examine app architecture to determine their security. Right now, Rust with the libp2p library is the stack I am thinking of, primarily for performance and cross-platform support, but I am open to discussion on the stack. The key goals of this project include: - True P2P sync (no servers) - Strong conflict resolution - Cross-platform (desktop/mobile) - Usable UX and CLI option for power users I am looking for developers interested in P2P networking, cryptography, systems programming, or just people passionate about privacy tech. I have a decent amount具有生锈的经验，尤其是在较低的图形和网络上，以及LIBP2P的一些经验。我也有JS，TS，GO，Python，C，CPP和其他语言的经验，但是我的大多数网络经验都在于生锈和Go。这是我的github，如果有人想看看： https://github.com/gituser.com/gituser12981u2 。。 href =“ https://github.com/gituser12981u2/p2p_password_manager”&gt; https://github.com/gituser12981u2/p2p_passwordword_manager                                我有一个CI管道设置并计划为任何决定做出ADR。提交由＆＃32; /u/u/celect_resident_645     [link]    [注释]  ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1mpb2et/building_an_open_source_p2p_password_manager/</guid>
      <pubDate>Wed, 13 Aug 2025 17:38:02 GMT</pubDate>
    </item>
    <item>
      <title>Freshmarker 2.1.0发布</title>
      <link>https://www.reddit.com/r/opensource/comments/1mpac2h/freshmarker_210_released/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/schegge42     [link]   ＆＃32;   [commist]  ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1mpac2h/freshmarker_210_released/</guid>
      <pubDate>Wed, 13 Aug 2025 17:11:07 GMT</pubDate>
    </item>
    <item>
      <title>一种技术深度潜水，可用于安全性 - 持续记忆CLI工具无用的工具</title>
      <link>https://www.reddit.com/r/opensource/comments/1mp6w6k/a_technical_deepdive_for_the_securityconscious/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  由于透明度和可验证性是项目的核心，因此在技术实施方面进行了更深入的研究。 整个安全姿势都建立在零信任的本地，前面的基础上。该工具假设其在潜在的不受信任的环境中运行，并赋予您能够验证其行为并锁定其功能的能力。  可验证的零egress    我们声称该工具是空气的，但是您不必为此而掌握我们的话。 HTTPS模块。任何出站请求都被拦截。如果目标不在明确的允许列表上（例如，本地向量服务器的本地主机），则该请求被阻止，并且该过程以非零状态代码退出。 如何验证：运行AGM Prove-offline。该命令试图向公共解析器进行DNS查找。它将失败并打印一个确认网络保护措施处于活动状态的确认。这使您可以随时确认没有数据离开您的机器。  共享上下文的供应链完整性：.AGMCTX捆绑包  当您与同事共享上下文时，您需要确保它没有篡改。 .AGMCTX束格式是为此设计的。 当您运行AGM导出时 -  sign-sign-zip：  checksums首先：创建一个checksums.json文件，其中包含Export中每个文件的SHA-256 HASH（示例9） （在钥匙中生成和存储）用于签名串联校验和的SHA-256哈希。此签名存储在签名中。bin。 导入的验证：agm导入 - 端内文本运行时，它以相反的顺序执行检查： 首先验证每个文件的校验和checksums.json中每个文件的校验和符合该值。如果已更改任何文件，则会立即使用退出代码4（校验和不匹配）失败。这样可以防止在被篡改的软件包上浪费CPU周期。 如果校验和匹配，则可以验证针对公共密钥的签名。如果签名是无效的，则在退出代码3（无效签名）中失败。 这种分层方法可确保完整性和真实性。  策略驱动的操作   该工具由您的Promict.json文件在您的Project的.ant.antigigoldfishfishmode cormectory中控制了该工具。此文件是您的控制面板的工具行为。 命令白列表：您可以限制允许哪些AGM命令运行。 For example, you could disable export-context entirely in a highly sensitive project. File Path Globs: Restrict the tool to only read from specific directories (e.g., src and docs, but not dist or node_modules). Enforced Signing Policies: &quot;requireSignedContext&quot;: true: The tool will refuse to import any .AGMCTX捆绑包，该捆绑包没有有效签名。这是针对团队的关键安全控制。 &#39;forcesignedexports＆quot&#39;：true：这使得签名是非当地的。即使用户试图用-no-sign导出，该策略也会覆盖它并签署导出。  通过收据和日记帐进行透明的审核  您永远不必怀疑该工具所做的。 收据。 收据：每个重要的命令（Export，Export，Index Code，Index Code，Index Code，Index Code等）生成一个生成。该收据包含输入和输出，计时数据的加密哈希，以及操作的摘要。 日记：journal.jsonl文件提供了按时间顺序排列的，每次执行的每个命令及其相应的收据ID的仅附加log。这为您提供了该工具执行的所有操作的完整，可验证的审核。 这种功能的组合旨在提供一种工具，不仅可以强大，而且还可以透明，可验证和足够的安全性。 我愿意查看您的反馈。 href =“ https://github.com/jahboukie/antigoldfish”&gt; https://github.com/jahboukie/jahboukie/antigoldfish    如果您觉得有用，请考虑赞助该项目： https://github.com/sponsors/jahboukie     &lt;！ -  sc_on-&gt; sc_on-&gt;＆＃32;提交由＆＃32; /u/u/jahboukie     [link]    [注释]  ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1mp6w6k/a_technical_deepdive_for_the_securityconscious/</guid>
      <pubDate>Wed, 13 Aug 2025 15:02:40 GMT</pubDate>
    </item>
    <item>
      <title>GPT-soss与Gemma 3N体系结构相比如何？</title>
      <link>https://www.reddit.com/r/opensource/comments/1mp6gy4/how_does_gptoss_compare_to_gemma_3n_architecture/</link>
      <description><![CDATA[    src =“ https://external-preview.redd.it/x3dtaffmcthdvzszsztd9ffm4dms1m4dms1uv3yncayceqawmom.png？宽度= 640＆amp; crop = smart＆amp; auto = webp＆amp; s = 326BFEBC0F999087020E5FB263B263B9BD754FD654BA9“ title =“ GPT-soss与Gemma 3N体系结构相比如何？” /&gt;   ＆＃32;提交由＆＃32; /u/u/partion-towre-5475       [注释]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1mp6gy4/how_does_gptoss_compare_to_gemma_3n_architecture/</guid>
      <pubDate>Wed, 13 Aug 2025 14:46:25 GMT</pubDate>
    </item>
    <item>
      <title>Markdown-UI：在运行时渲染UI Inside Markdown</title>
      <link>https://www.reddit.com/r/opensource/comments/1mp5f5c/markdownui_render_ui_inside_markdown_at_runtime/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  当前降价在文档，博客和AI输出之间广泛使用，以简单性和内容优先。但是他们不允许用户与内容进行交互。 现有的尝试（如MDX，Web组件）以及直接在Markdown中嵌入HTML/JSS的尝试仅是编译时间，不可携带和安全风险。 这就是为什么我在Markdown In Markdown In Markdown UI中创建了一个开放的MIT MARKDOWN UI，这就是为什么我创建了Markderding UI的开放式MARKDOWN UI。 UI小部件只是标记内部的简单JSON对象，并将其解析为Web组件XML标签。然后，任何渲染器（react/svelte/vue/swift等）都可以将组件渲染到平台上的实际UI中，并将标准化的标准化{id，value}事件发射到用于捕获和处理的应用程序中。 该标准设计为最小，可扩展和安全。 href =“ http://markdown-ui.com”&gt; markdown-ui.com   这是github： https://github.com/blueprintdesignlab/markdown-down-ui/ 提交由＆＃32; /u/u/u/culence_love_3213     [link]       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1mp5f5c/markdownui_render_ui_inside_markdown_at_runtime/</guid>
      <pubDate>Wed, 13 Aug 2025 14:05:26 GMT</pubDate>
    </item>
    <item>
      <title>wrkflw v0.7.0带有安全的沙箱，用于在本地运行github操作</title>
      <link>https://www.reddit.com/r/opensource/comments/1mp56rd/wrkflw_v070_with_secure_sandboxing_for_running/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  大家好， 我很高兴与一些重大的工作流程执行改进分享 wrkflw v0.7.0.7.0 ！  wrkflw是什么？ V0.7.0中的安全仿真模式。 资源限制（CPU，内存，执行时间） 文件系统访问控件和过程监视 建议用于本地开发 - 无容器开销    可重复使用的工作流程支持  （作业。＆lt; id＆gt;。目录 自动检测github/gitlab格式每个文件 非常适合CI/CD管道和大量验证     ＆＃8203;               ＃＃每个文件wrkflw自动检测github/gitlab验证路径/to/github-workflow.yml .gitlab-ci.yml＃force gitlab用于所有文件wrkflw wrkflw veration-gitlab *.yml          user experience  Runtime Modes # Secure sandboxed execution (recommended for local dev) wrkflw run --runtime secure-emulation .github/workflows/ci.yml # Container-based execution wrkflw run --runtime podman .github/workflows/ci.yml wrkflw run --runtime docker 。在本地，虽然可重复使用的工作流支持可以启用测试复杂的多工作流设置，然后再推向github！  链接：     href=&quot;https://crates.io/crates/wrkflw&quot;&gt;Crates.io Full Changelog  Always appreciate feedback from the community!  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/new-blacksmith8524      [link]   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1mp56rd/wrkflw_v070_with_secure_sandboxing_for_running/</guid>
      <pubDate>Wed, 13 Aug 2025 13:56:38 GMT</pubDate>
    </item>
    <item>
      <title>[Apache 2.0] 900+神经TTS声音100％本地浏览器没有下载（小猫TTS，Piper，Kokoro）</title>
      <link>https://www.reddit.com/r/opensource/comments/1mp3sk4/apache_20_900_neural_tts_voices_100_local/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  嘿！上周，我发布 href =“ https://www.reddit.com/r/localllama”&gt; r/localllama 许多人喜欢，所以我决定将其更进一步，然后将Piper和Kokoro添加到该项目中！该项目使您可以将小猫TTS，Piper Voices或Kokoro完全加载到本地100％的浏览器中。它在语音选择下拉列表中还具有快速预览功能。   在线demo   （github页面（github页面）（github页面） href =“ https://github.com/clowerweb/tts-studio”&gt; https://github.com/clower.com/clowerweb/tts-studio   One-Liner Docker installer： code&gt; docker&gt; docker docker ghcr.io/clower pull ghcr webower pull ghcrawerweb/clowerweb/clowerweb/ttts-sts-stes-stes-stestest e.latestepte 小猫tts startalone 也已更新以包括许多反馈，包括错误修复和请求的功能！还有一个 piper standalone 可用。    lemme知道您的想法，如果您有任何反馈或建议或建议！ href =“ https://github.com/sponsors/clowerweb”&gt;抓住我咖啡！☕  &lt;！&lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/u/communitytough1     [link]   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1mp3sk4/apache_20_900_neural_tts_voices_100_local/</guid>
      <pubDate>Wed, 13 Aug 2025 13:00:47 GMT</pubDate>
    </item>
    </channel>
</rss>