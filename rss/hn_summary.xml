<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>HN 摘要</title>
    <link>https://tg.i-c-a.su</link>
    <description>由大型语言模型编写的热门 Hacker News 故事的自动摘要。</description>
    <lastBuildDate>Fri, 05 Jul 2024 05:44:23 GMT</lastBuildDate>
    <item>
      <title>[媒体] PowerToys Run 是一款专为高级用户设计的开源快速启动器，提供扩展 [...]</title>
      <link>https://t.me/hn_summary/98140</link>
      <description><![CDATA[PowerToys Run：面向高级用户的可扩展快速启动器
PowerToys Run 是一款开源快速启动器，专为高级用户设计，提供广泛的功能而不会影响性能。默认情况下，使用 Alt + Space 激活，它允许用户搜索应用程序、文件、正在运行的进程等。它支持各种任务的插件，如计算、系统命令、单位转换和网络搜索。用户可以自定义设置，包括激活快捷方式、结果顺序和插件行为。值得注意的是，插件管理器允许直接激活命令和微调插件选项。该实用程序必须在后台运行才能运行，并且某些设置可能与全局查询冲突。（基于 56% 的故事文本的摘要。）]]></description>
      <guid>https://t.me/hn_summary/98140</guid>
      <pubDate>Fri, 05 Jul 2024 05:44:23 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 标题：编码机器（小说）</title>
      <link>https://t.me/hn_summary/98139</link>
      <description><![CDATA[编码机器（小说）
标题：编码机器（小说）

网站：podcasts.apple.com

故事：Jeffrey Snover 和 PowerShell 的诞生

如果您必须与公司文化作斗争才能将革命性的工具变为现实，会怎么样？认识一下 Jeffrey Snover，他是 PowerShell 背后的 Microsoft 架构师，PowerShell 是一种改变 Windows 系统管理的命令工具。Snover 的想法最初遭到了质疑，后来遭到了偏爱图形界面的公司的抵制。 Snover 的旅程始于一个简单的使命：让 Windows 像 UNIX 系统一样可以通过命令行进行管理。尽管面临阻力并经历了公司重组，但他的坚持得到了回报。本集探讨了 Snover 如何凭借不懈的动力和清晰的愿景克服了众多障碍，最终打造出如今现代企业环境中不可或缺的工具。听听一个人的决心如何挑战现状。

争议：Snover 面临的阻力来自微软，这家公司传统上更喜欢图形界面而不是命令行工具。

独特/聪明：Snover 的使命是让 Windows 像 UNIX 系统一样可以通过命令行进行管理，这是微软方法上的重大转变。]]></description>
      <guid>https://t.me/hn_summary/98139</guid>
      <pubDate>Fri, 05 Jul 2024 05:37:18 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 在本文中，作者对硅谷常见的标签做法提出了质疑[...]</title>
      <link>https://t.me/hn_summary/98138</link>
      <description><![CDATA[“技术”技能

在本文中，作者挑战了硅谷将人们标记为“技术”或“非技术”的普遍做法，这种区别长期以来一直是令人沮丧的根源。通过各种例子——从电影《徒手攀岩》中的攀岩到斯蒂芬·库里的篮球实力——作者认为“技术”技能存在于每个领域，但经常被忽视或低估。本文强调了认识这些技能如何丰富我们对从营销到缝纫等不同职业的理解和欣赏。作者呼吁重新评估“技术技能”一词，以更好地反映各个领域所需的多样化专业知识。 

争议点：对“创客运动”的批评是“手工艺，但只针对男孩”，这可能会引发争论。

独特见解：攀岩、篮球和缝纫等看似不相关的领域之间的技术技能比较既令人惊讶又令人大开眼界。]]></description>
      <guid>https://t.me/hn_summary/98138</guid>
      <pubDate>Fri, 05 Jul 2024 05:36:13 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] “Show HN：一个打败所有人的 Vim9 配置” GitHub 项目提供了完整的 [...]</title>
      <link>https://t.me/hn_summary/98137</link>
      <description><![CDATA[Show HN：一种超越一切的 Vim9 配置
“Show HN：一种超越一切的 Vim9 配置”GitHub 项目提供了全面的 Vim 配置，旨在创造类似 IDE 的体验。它包括自动安装插件，用于各种功能，如 LSP、完成、片段和 Git 集成。独特功能包括自定义 Startify 仪表板、Catppuccin Mocha 主题、持久撤消历史记录和广泛的自定义键映射。该项目强调安装和更新的简易性，提供无缝设置的脚本。它旨在轻量级、快速且高度可定制，同时作为一种教育资源来帮助用户理解和扩展他们的 Vim 设置，从而脱颖而出。（基于 46% 的故事文本的摘要。）]]></description>
      <guid>https://t.me/hn_summary/98137</guid>
      <pubDate>Fri, 05 Jul 2024 05:27:05 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 我一直在研究各种微控制器项目，主要使用 Raspberry Pi Pi [...]</title>
      <link>https://t.me/hn_summary/98136</link>
      <description><![CDATA[在 RP2040 上迁移到 RTOS
我一直在从事各种微控制器项目，主要使用 Raspberry Pi Pico 板，因为它们具有出色的 SDK、价格合理的硬件和无缝的调试器集成。我目前的项目涉及为视频设备创建复杂的硬件控制器，包括 PTZ 摄像机和 ATEM 视频切换器。现有的控制器质量不佳，促使我设计了一个带有 9 个按钮、一个操纵杆和一个显示器的自定义面板。

最初，我使用带有 pico-sdk 的 cmake 项目，将一个核心专用于 Wiznet 模块，另一个核心专用于用户界面。然而，管理多个任务的复杂性促使我探索 RTOS 选项。 

FreeRTOS：虽然简单且与 pico-sdk 捆绑在一起，但它会导致 printf 出现问题，并且缺乏硬件抽象，使得调试变得困难。

Apache NuttX：这个类 Unix 的 RTOS 看起来很有前途，但存在构建问题和不起作用的 I2C 支持，使硬件集成变得复杂。

Zephyr：虽然功能全面，但它需要大量设置，并且不原生支持 Raspberry Pi Pico，导致进一步的复杂化。

总之，每个 RTOS 都有其挑战，对理想解决方案的搜索仍在继续。（基于 93% 的故事文本的总结。）]]></description>
      <guid>https://t.me/hn_summary/98136</guid>
      <pubDate>Fri, 05 Jul 2024 04:54:53 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] Nim 团队很高兴地宣布发布 Nim 版本 2.0.8，这是我们的第四个补丁 [...]</title>
      <link>https://t.me/hn_summary/98135</link>
      <description><![CDATA[Nim 2.0.8 版发布
Nim 团队很高兴地宣布发布 Nim 2.0.8 版，这是我们为 Nim 2.0 发布的第四个补丁。这个小而重要的更新包括 20 次提交，并为最近发布的 2.0.6 版带来了关键的改进。关键增强功能包括使用 --threads:on 的更稳定的分配器、对 GCC 14 的更好支持以及针对未初始化字符串和序列的优化函数。这次快速发布对我们的合作伙伴 Status 至关重要，突显了我们对他们持续支持的感激之情。现有用户可以通过 choosenim 轻松更新，但 OSX ARM 用户需要其他方法。我们鼓励通过对关键错误修复和功能的赏金捐款来进一步增强 Nim。欲了解更多详情，请访问我们的网站。]]></description>
      <guid>https://t.me/hn_summary/98135</guid>
      <pubDate>Fri, 05 Jul 2024 04:11:35 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 网站：www.telegraph.co.uk</title>
      <link>https://t.me/hn_summary/98134</link>
      <description><![CDATA[法国“王者之剑”在岩石中嵌入 1,300 年后神秘消失
标题：法国“王者之剑”在岩石中嵌入 1,300 年后神秘消失
网站：www.telegraph.co.uk

11 世纪史诗《罗兰之歌》中赞颂的传奇宝剑杜伦达尔，在法国罗卡马杜尔的一处悬崖壁中嵌入 1,300 年后神秘消失。这首诗是法国文学中最古老的主要作品，保存在牛津博德利图书馆的一份手稿中。根据当地民间传说，查理曼从一位天使那里得到了杜伦达尔，后来把它传给了罗兰，罗兰在隆塞瓦耶斯山口战役中阵亡前，曾试图毁掉杜伦达尔，以防止敌人俘虏他。结果，这把剑奇迹般地飞了起来，嵌在罗卡马杜尔的岩壁上，几个世纪以来，这里一直吸引着包括皇室在内的朝圣者。这件历史文物的消失让许多人感到困惑和好奇。]]></description>
      <guid>https://t.me/hn_summary/98134</guid>
      <pubDate>Fri, 05 Jul 2024 04:09:30 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] “飞行钢琴”能否助力航空货运转型？</title>
      <link>https://t.me/hn_summary/98133</link>
      <description><![CDATA[“飞行钢琴”能否帮助改变空运？
标题：“飞行钢琴”能否帮助改变空运？
网站：www.bbc.com

美国初创公司 Aerolane 正在探索“空中冲浪”彻底改变空运的潜力。Aerolane 的测试飞机被称为“飞行钢琴”，灵感来自 V 字形飞行的大雁，旨在利用领头飞机产生的气流滑行。这种方法可以让无人驾驶货机以最小的燃料消耗长途飞行。 Aerolane 项目由飞行员 Todd Graetz 和亚马逊无人机送货老手 Gur Kimchi 共同创立，该项目引起了人们的兴趣，但由于安全问题和监管障碍，也招致了质疑。尽管最初存在疑虑，但 Fred Lopez 等行业专家认为这项创新可以节省大量燃料。然而，公众接受度和严格的 FAA 法规仍然是重大挑战。]]></description>
      <guid>https://t.me/hn_summary/98133</guid>
      <pubDate>Fri, 05 Jul 2024 04:08:26 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] TOTP 代码有多随机？</title>
      <link>https://t.me/hn_summary/98132</link>
      <description><![CDATA[TOTP 代码有多随机？
标题：TOTP 代码有多随机？
网站：shkspr.mobi

我怀疑我银行的 TOTP 应用程序对数字 8 有偏见，因为它具有吉利的性质。但这是否只是我的大脑看到了本来不存在的模式？TOTP 算法使用 HMAC 和 SHA-1，这超出了我的理解范围，尽管专家向我保证它们是安全的。为了调查，我抽样了接下来的 10 个 TOTP 代码并绘制了数字频率。天哪！阴谋得到证实！什么鬼？！？！？这是我用来验证的代码：

代码片段

然而，在检查了 100 代之后，偏差似乎不那么明显了。经过 10,000 代，变化消失了。考虑到每年生成大约一百万个 TOTP 代码，不太可能存在明显的偏差。虽然源代码透明度很高，但有时测量输出同样令人放心。]]></description>
      <guid>https://t.me/hn_summary/98132</guid>
      <pubDate>Fri, 05 Jul 2024 04:07:22 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 十多年前，Gary Bernhardt 提出了“功能核心、指令性”的概念 [...]</title>
      <link>https://t.me/hn_summary/98131</link>
      <description><![CDATA[同步核心，异步外壳
十多年前，Gary Bernhardt 提出了“函数式核心，命令式外壳”的概念，主张一种软件架构，其中核心逻辑使用具有不可变数据的函数式编程来处理，而外壳通过命令式编程来管理副作用。这种方法简化了对逻辑的理解、测试和修改，而没有纯函数式程序的复杂性。最近，围绕 Rust 的异步功能出现了一些讨论，特别是同步和异步代码之间的摩擦，通常称为“函数颜色”。根据我使用 Rust 服务的经验，我采用了“同步核心，异步外壳”模式，将同步和异步代码分别与核心和外壳对齐。这种方法保留了原有的优势，避免了同步代码调用异步代码的缺陷。有趣的是，我认为函数着色是有益的，可以作为防止核心中出现意外副作用的保障。对于必要的副作用，可以使用命令模式将其描述为数据，而不是直接异步调用。]]></description>
      <guid>https://t.me/hn_summary/98131</guid>
      <pubDate>Fri, 05 Jul 2024 04:06:17 GMT</pubDate>
    </item>
    </channel>
</rss>