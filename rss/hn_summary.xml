<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>HN 摘要</title>
    <link>https://tg.i-c-a.su</link>
    <description>由大型语言模型编写的热门 Hacker News 故事的自动摘要。</description>
    <lastBuildDate>Thu, 19 Sep 2024 21:05:41 GMT</lastBuildDate>
    <item>
      <title>网站：franklin.dyer.me</title>
      <link>https://t.me/hn_summary/109121</link>
      <description><![CDATA[从为 Intel 8080 实现 Sokoban 中得到的经验教训
标题：从为 Intel 8080 实现 Sokoban 中得到的经验教训
网站：franklin.dyer.me

我通过为 Intel 8080 实现 Sokoban 开始了一段加深对计算机架构理解的旅程。受到 Emulator 101 网站的启发，该网站提供了详细的教程，最终运行原始的 Space Invaders 二进制文件，因此我决定创建自己的模拟器。调试模拟器很有挑战性，尤其是在标志记录不全的情况下，但我最终成功运行了《太空侵略者》、《月球救援》和《枪战》。

出于对推箱子游戏的热爱，我直接使用十六进制编辑器 Hex Fiend 而不是汇编程序编写了游戏二进制文件。这种方法为低级编程提供了独特的见解。关键的经验教训包括细致记笔记的重要性、留出填充空间以适应代码编辑以及平衡效率和便利性。例如，我选择了一种内存密集但更简单的方法来存储游戏图块。

在努力实现模块化的同时，我学会了在添加新级别等领域优先考虑可扩展性，而不是使整个程序模块化。在编写可执行代码的同时编写数据突显了代码和数据相互交织的性质，当程序计数器误入非预期的内存区域时，会导致一些有趣的错误。

总体而言，这个项目是低级编程的一次有趣练习，我强烈推荐对类似工作感兴趣的人阅读 Emulator 101 指南。您可以在我的 GitHub 存储库中找到我的部分 Intel 8080 模拟器和 Sokoban 游戏。]]></description>
      <guid>https://t.me/hn_summary/109121</guid>
      <pubDate>Thu, 19 Sep 2024 21:05:41 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] Finley (YC W21) 正在寻找软件工程师加入其远程美国团队并帮助 [...]</title>
      <link>https://t.me/hn_summary/109120</link>
      <description><![CDATA[Finley (YC W21) 正在招聘工程师开发资本市场软件（美国远程）
Finley (YC W21) 正在寻找软件工程师加入其美国远程团队，帮助开发创新的资本市场软件。Finley 通过自动化复杂且容易出错的债务资本管理和合规报告流程，帮助公司最大限度地利用债务资本。他们的软件与源系统连接，以所需格式生成资产报告，为借款人节省时间和金钱。作为早期团队成员，您将设计、构建和测试新软件，塑造这家 A 轮创业公司的工程文化和未来。Finley 重视效率、智力辩论，并使用最好的技术来提高生产力和生活质量。]]></description>
      <guid>https://t.me/hn_summary/109120</guid>
      <pubDate>Thu, 19 Sep 2024 21:02:35 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 在有关 PC 软盘复制保护方法系列的第 3 部分中，该博客深入探讨了 Ele [...]</title>
      <link>https://t.me/hn_summary/109119</link>
      <description><![CDATA[PC 软盘复制保护：Electronic Arts Interlock
在 PC 软盘复制保护方法系列文章的第 3 部分中，该博客深入探讨了 Electronic Arts (EA) 从 1984 年到 1987 年使用的独特 Interlock 保护。与其他公司不同，EA 的保护并未得到广泛宣传或讨论，只留下了技术细节有待探索。Interlock 以其复杂性而著称，其保护轨道具有惊人的 96 个扇区 ID，远远超过典型的 8 个或 9 个。这使得复制变得极其困难。该博客重点介绍了 EA 使用的复杂方法，包括扇区交错和使用“已删除”数据，这在 DOS 软件中并不常见。作者还讨论了模拟这种保护的挑战以及 NewRisingSun 等专家在创建分析工具方面所做的努力。该博客提供了 Interlock 工作原理的详细技术分析，包括其引导加载程序和解密过程。

令人惊讶/独特/巧妙的方面：在单个轨道上使用 96 个扇区 ID 和复杂的扇区交错方案特别巧妙和复杂，使得当时几乎不可能复制。（基于 60% 的故事文本的总结。）]]></description>
      <guid>https://t.me/hn_summary/109119</guid>
      <pubDate>Thu, 19 Sep 2024 20:37:22 GMT</pubDate>
    </item>
    <item>
      <title>网站：news.ycombinator.com</title>
      <link>https://t.me/hn_summary/109118</link>
      <description><![CDATA[告诉 HN：ProtonMail 一直在破坏用户隐私和安全
标题：告诉 HN：ProtonMail 一直在破坏用户隐私和安全
网站：news.ycombinator.com

ProtonMail 最近发送了一封电子邮件，敦促用户通过添加恢复选项（例如电话号码或备用电子邮件地址）来完成安全设置。该电子邮件强调，这些选项对于在出现意外问题时重新获得对帐户和数据的访问权限至关重要。然而，作者认为，这些恢复选项实际上会损害用户的隐私和安全。他们指出，恢复选项（尤其是电话号码）很容易被盗用，政府机构可以利用备用电子邮件地址访问账户。作者认为 ProtonMail 意识到了这些风险，但仍向用户施压要求添加恢复选项，这破坏了 ProtonMail 声称要保护的隐私和安全。]]></description>
      <guid>https://t.me/hn_summary/109118</guid>
      <pubDate>Thu, 19 Sep 2024 20:23:11 GMT</pubDate>
    </item>
    <item>
      <title>网站：blog.fxn.ai</title>
      <link>https://t.me/hn_summary/109117</link>
      <description><![CDATA[Show HN：使用本地嵌入让您的下一个病毒式 AI 应用更长时间免费
标题：Show HN：使用本地嵌入让您的下一个病毒式 AI 应用更长时间免费
网站：blog.fxn.ai

使用本地嵌入让您的下一个病毒式 AI 应用更长时间免费

使用一行代码使用 Function LLM 修补 OpenAI 客户端。无论您是开发智能搜索应用的个体企业家，还是在企业知识管理领域寻找产品市场契合度的 A 轮创业公司，通过在用户设备上生成嵌入，您都可以节省 60% 或更多的每月 OpenAI 账单。我们将向您展示如何提取巨额利润，并希望通过一行额外的代码在大约 5 分钟内进入下一轮融资。

您当前的堆栈正在浪费金钱

文本嵌入是当今许多 AI 驱动应用程序的基础。它们的工作原理是将任意文本块转换为保留文本语义的数字向量。目前，许多开发人员依赖 OpenAI 来生成这些嵌入，随着使用量的增加，会产生大量成本。

进入：使用函数 LLM 的设备嵌入

现在可以直接在用户设备上运行最先进的文本和视觉嵌入模型。我们创建了一个轻量级库 Function LLM，它可以修补您的 OpenAI 客户端，使其完全在本地生成嵌入，无论是在浏览器还是在 Node.js 上。为了推出该库，我们与 Nomic 合作，Nomic 是设备上 AI 运动的先驱，也是流行的 GPT4All 应用程序的创造者。Function LLM 支持他们最先进的 Nomic Embed Text v1.5 嵌入模型，该模型在类似维度下的性能优于 OpenAI 的 text-embedding-3-small 模型。

试用：Function LLM 的工作原理

Function LLM 是一个纳米库（目前有 123 行代码），它修补了 OpenAI 客户端以在设备上运行 Nomic 的嵌入模型。它使用我们的平台 Function 来实现这一点，该平台使开发人员能够在设备上运行任意 AI 函数。 Function 的工作原理是编译适用于大多数平台的 Python 函数，并将编译后的二进制文件空投到用户的设备中以在本地运行。

但为什么不是 Ollama？

尽管出现了像 Ollama、LMStudio 和 LocalAI 这样的初创公司，但我们认为它们为开发人员提供的服务存在相当大的、服务不足的缺口。]]></description>
      <guid>https://t.me/hn_summary/109117</guid>
      <pubDate>Thu, 19 Sep 2024 20:06:03 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 当今的渲染 API 通常将 GPU 工作负载序列化为命令缓冲区或命令列表 [...]</title>
      <link>https://t.me/hn_summary/109116</link>
      <description><![CDATA[GPU 调试范围
如今，渲染 API 通常将 GPU 工作负载序列化为命令缓冲区或命令列表，稍后再将其分派到工作队列中。RenderDoc 和 Nsight-Graphics 等工具可以剖析这些命令缓冲区，但从一小段 API 命令列表中了解高级操作具有挑战性。如果没有额外的调试信息，这些工具只会显示一小段 API 调用，因此很难跟踪特定操作或比较多个捕获。

为了解决这个问题，渲染 API 允许将诊断数据附加到命令缓冲区和对象。通过添加对象名称和调试范围，RenderDoc 和 Nsight 等工具可以对命令缓冲区 API 调用进行分组和着色，从而更容易识别和调试问题。作者演示了如何使用 C++、C# 和 Rust 中的 RAII（资源获取即初始化）模式在 Vulkan 和 OpenGL 中实现这一点。

独特/巧妙的方面：作者强调了一种巧妙的技术，即根据图形管道的哈希值生成管道同步 API 调用的颜色，从而可以快速直观地识别重复的管道使用情况。

争议：关于 C# 的垃圾收集的讨论以及需要额外的工作来模仿 C++ 的确定性析构函数行为可能会在支持不同内存管理范式的开发人员中被视为有争议的。（基于 61% 的故事文本的总结。）]]></description>
      <guid>https://t.me/hn_summary/109116</guid>
      <pubDate>Thu, 19 Sep 2024 20:04:54 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 自 2020 年 1 月以来，GreyNoise 一直在追踪由 [...] 组成的神秘“噪音风暴”。</title>
      <link>https://t.me/hn_summary/109115</link>
      <description><![CDATA[神秘的“LOVE”数据包风暴自 2020 年以来席卷互联网
自 2020 年 1 月以来，GreyNoise 一直在追踪由欺骗性互联网流量组成的神秘“噪音风暴”，但其来源和目的仍然未知。这些风暴可能是秘密通信、DDoS 攻击信号、恶意软件 C2 通道或错误配置。有趣的是，ICMP 数据包包含一个 ASCII“LOVE”字符串，这让谜团更加扑朔迷离。这些流量来自数百万个欺骗性 IP，目标是特定的 ISP，如 Cogent 和 Lumen，但避开了 AWS。TCP 流量模仿各种操作系统，使其变得隐秘。GreyNoise 已在 GitHub 上发布了数据包捕获，寻求网络安全社区的帮助来解开这个谜团。这种情况凸显了自适应安全策略的必要性。]]></description>
      <guid>https://t.me/hn_summary/109115</guid>
      <pubDate>Thu, 19 Sep 2024 20:00:46 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 网站：neilmadden.blog</title>
      <link>https://t.me/hn_summary/109114</link>
      <description><![CDATA[数字签名及其避免方法
标题：数字签名及其避免方法
网站：neilmadden.blog

维基百科将数字签名定义为用于验证数字消息或文档真实性的数学方案。虽然开发人员将它们视为验证软件更新和验证 SSL 连接的简单工具，但密码学家对它们的看法不同，揭示了关于其适当和不适当用途的令人惊讶的方面。

Schnorr 签名是密码学家最喜欢的，源自交互式识别协议。该协议通过 Fiat-Shamir 启发式算法进行转换，产生了 Schnorr 签名方案。然而，这种转换会丢失关键上下文，使签名不太适合身份验证，并且容易出现诸如随机数重用错误之类的漏洞。

令人惊讶的是，签名通常过于强大，提供不可否认性和第三方可验证性，这可能会产生意想不到的后果。相反，建议大多数应用程序使用 HMAC 或经过身份验证的 KEM 和 X25519 进行公钥加密，将签名保留用于软件/固件更新。]]></description>
      <guid>https://t.me/hn_summary/109114</guid>
      <pubDate>Thu, 19 Sep 2024 19:57:41 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] GitHub 上的“ecurvechat”项目是一个使用 Rust 和 P [...] 构建的安全聊天应用程序。</title>
      <link>https://t.me/hn_summary/109113</link>
      <description><![CDATA[显示 HN：使用 Rust 和 Protobuf 编写的基于椭圆曲线的安全聊天
GitHub 上的“ecurvechat”项目是一个使用 Rust 和 Protobuf 构建的安全聊天应用程序，利用椭圆曲线加密技术增强安全性。该项目的目的是提供一个高度安全的通信平台，以确保隐私和数据完整性。它通过实施强大的加密技术来防止窃听和未经授权的访问，从而解决了安全消息传递的问题。作者强调了 Rust 的性能和安全特性，以及 Protobuf 的高效数据序列化，通过结合这些技术来创建安全高效的聊天应用程序，使这个项目与众不同。]]></description>
      <guid>https://t.me/hn_summary/109113</guid>
      <pubDate>Thu, 19 Sep 2024 19:55:37 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 标题：使用 Postgres 构建 RAG</title>
      <link>https://t.me/hn_summary/109112</link>
      <description><![CDATA[使用 Postgres 构建 RAG
标题：使用 Postgres 构建 RAG

网站：anyblockers.com

Postgres 是用于实现检索增强生成 (RAG) 系统的强大工具，其多功能性和熟悉性可显著提高生产力。通过利用 Postgres，您可以专注于构建有效的系统，而不会迷失在新技术的炒作中。本指南介绍了使用 Postgres 设置 RAG 系统的过程，涵盖了数据提取、RAG 管道和 API 集成等组件。

该架构以 Postgres 为中心，处理数据写入和读取。关键步骤包括设置文档和块表、使用 pgvector 嵌入功能以及优化数据处理。提取管道涉及在将数据插入数据库之前提取、清理、分块和嵌入数据。检索涉及混合搜索和重新排名，以提供与用户查询相关的上下文。

该指南强调了元过滤器和分块策略的重要性，建议重叠块以缓解语义差距。它还强调了持续评估和反馈循环的必要性，以确保系统性能和用户满意度。

令人惊讶/巧妙的元素：
- 使用重叠块（256-304 个标记，其中 32 个标记重叠）来缓解语义差距。
- 强调单独评估组件以避免意外的副作用。

有争议的点：
- 更喜欢手动控制而不是使用 LangChain 或 LlamaIndex 等工具，这可能会在支持自动化解决方案的开发人员中引起争论。（基于 92% 的故事文本的总结。）]]></description>
      <guid>https://t.me/hn_summary/109112</guid>
      <pubDate>Thu, 19 Sep 2024 19:52:33 GMT</pubDate>
    </item>
    </channel>
</rss>