<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>HN 摘要</title>
    <link>https://tg.i-c-a.su</link>
    <description>由大型语言模型编写的热门 Hacker News 故事的自动摘要。</description>
    <lastBuildDate>Sat, 20 Jul 2024 00:51:36 GMT</lastBuildDate>
    <item>
      <title>[媒体] Garage 是一个开源分布式对象存储项目，已获得重大 [...]</title>
      <link>https://t.me/hn_summary/100399</link>
      <description><![CDATA[Garage：开源分布式对象存储
Garage 是一个开源分布式对象存储项目，已获得欧洲各倡议的大力支持和资金。它由 NGI POINTER 资助，为三名全职员工提供一年（2021-2022 年）的支持，并由 NLnet / NGI0 Entrust 资助，为一名全职员工提供一年（2023-2024 年）的支持。该项目还得到了欧盟“地平线 2021”研究和创新计划（NGI-POINTER 项目）和 NGI0 Entrust 基金的支持，这两个基金均由欧盟委员会支持。如果您有兴趣通过捐赠或支持合同为 Garage 的发展做出贡献，请联系团队。]]></description>
      <guid>https://t.me/hn_summary/100399</guid>
      <pubDate>Sat, 20 Jul 2024 00:51:36 GMT</pubDate>
    </item>
    <item>
      <title>《超媒体系统》的最新版本已经使用 Typst（一种新的 L [...]）进行了彻底的重新设计。</title>
      <link>https://t.me/hn_summary/100398</link>
      <description><![CDATA[构建新的超媒体系统
《超媒体系统》的最新版本已使用新的 LaTeX 替代品 Typst 进行了彻底重新设计，以实现更高的设计保真度。最初，这本书是用 AsciiDoc 创建的，但这个过程充满了问题，包括糟糕的 PDF 生成、缓慢的渲染以及 Paged.js 等工具中的大量错误。转向 Typst 的原因是其卓越的排版功能和符合人体工程学的脚本语言。尽管 Typst 最初缺乏 HTML 输出，但作者设法使用 DocBook XML 转换手稿。Typst 重新实现了代码标注等独特功能，展示了其灵活性。新版本拥有改进的设计元素，例如缩进段落和更好的强调处理，这些元素很难通过 HTML 和 CSS 实现。作者强调了 Typst 优于浏览器的排版算法，使文本更具可读性和视觉吸引力。迁移强调了当前网络技术对印刷媒体的局限性以及 Typst 在高质量图书制作方面的潜力。（基于 86% 的故事文本的总结。）]]></description>
      <guid>https://t.me/hn_summary/100398</guid>
      <pubDate>Sat, 20 Jul 2024 00:41:30 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 在“参数矩阵模型”中，Patrick Cook 及其合著者介绍了一类新颖的[...]</title>
      <link>https://t.me/hn_summary/100397</link>
      <description><![CDATA[参数矩阵模型
在《参数矩阵模型》中，Patrick Cook 和合著者介绍了一种新型机器学习算法，该算法通过利用受量子物理启发的矩阵方程，与传统的基于神经元的模型不同。这些模型学习控制方程以实现期望的输出，类似于解决物理问题。它们可以使用经验数据进行有效训练，并采用代数、微分或积分关系。作者最初打算用于科学计算，他们证明参数矩阵模型是适用于各种机器学习任务的通用函数逼近器。它们在各种挑战中的应用展示了高效、可解释框架内的准确结果，能够进行输入特征外推。这种创新方法为机器学习提供了独特且具有变革性的视角。]]></description>
      <guid>https://t.me/hn_summary/100397</guid>
      <pubDate>Sat, 20 Jul 2024 00:35:24 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 截至 2024 年 7 月 18 日，目前轨道上已有超过 10,000 颗活跃卫星，[...]</title>
      <link>https://t.me/hn_summary/100396</link>
      <description><![CDATA[目前轨道上有 10,000 颗活跃卫星
根据 planet4589.org 的数据，截至 2024 年 7 月 18 日，轨道上有超过 10,000 颗活跃卫星。细分包括大量 Starlink 卫星，其中 6,164 颗活跃在低地球轨道，而高地球轨道没有一颗。低地球轨道的其他活跃卫星包括 92 颗机动小型卫星和 1,078 颗非机动小型卫星，以及 907 颗机动大型卫星和 179 颗非机动大型卫星。失效卫星和碎片也占了总数，其中 PRC ASAT 和 Iridium/Kosmos 碰撞产生的碎片尤为明显。这些数据突显了太空日益拥挤的现象，尤其是在低地球轨道，这引发了人们对太空碎片和卫星管理的担忧。]]></description>
      <guid>https://t.me/hn_summary/100396</guid>
      <pubDate>Sat, 20 Jul 2024 00:34:20 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 合成血液在哪里？</title>
      <link>https://t.me/hn_summary/100395</link>
      <description><![CDATA[合成血液在哪里？
标题：合成血液在哪里？
网站：press.asimov.com

血液对于人类生存至关重要，我们 36 万亿个细胞中有 32 万亿是血细胞。这些细胞输送氧气、对抗病原体和愈合伤口，但它们的寿命很短。骨髓不断产生新的血细胞，但快速失血往往需要输血。传统输血面临着捐献者数量减少和保质期有限的挑战，而 COVID-19 加剧了这些挑战。合成血液可以缓解这些问题，主要有两种方法：生物学家从干细胞中培养血细胞，而化学家则制造模拟血液的分子。这两种方法都很有前景，但面临经济和制造障碍。了解血液的复杂性对于开发有效的合成替代品至关重要。

争议：本文涉及开发合成血液的道德和实际挑战，包括经济和制造障碍。

独特/巧妙：将输血与器官移植进行类比，突出了血液作为一个系统的复杂性，而不仅仅是单个成分的集合。（基于 44% 的故事文本的摘要。）]]></description>
      <guid>https://t.me/hn_summary/100395</guid>
      <pubDate>Sat, 20 Jul 2024 00:33:16 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 在题为“通过使用蛋白质语言进行少量学习实现蛋白质的快速进化”的研究中 [...]</title>
      <link>https://t.me/hn_summary/100394</link>
      <description><![CDATA[利用蛋白质语言模型通过少量学习实现快速蛋白质进化
在题为“利用蛋白质语言模型通过少量学习实现快速蛋白质进化”的研究中，研究人员介绍了 EVOLVEpro，这是一种旨在增强蛋白质活性的创新少量主动学习框架。传统的定向进化方法劳动密集且效率低下，但 EVOLVEpro 利用蛋白质语言模型 (PLM) 和活性预测因子，以最少的实验轮次实现显着改进。该框架在各种应用中（包括 RNA 生产、基因组编辑和表位结合）展示了高达 100 倍的蛋白质特性增强。这种方法优于目前最先进的方法，展示了 AI 引导蛋白质工程的潜力。值得注意的是，作者已申请与这项工作相关的专利，并共同创立了多家生物技术公司，这可能会存在利益冲突。]]></description>
      <guid>https://t.me/hn_summary/100394</guid>
      <pubDate>Sat, 20 Jul 2024 00:10:06 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 五月，一场太阳超级风暴引发了历史上最大规模的卫星“大规模迁移”[...]</title>
      <link>https://t.me/hn_summary/100393</link>
      <description><![CDATA[5 月太阳超级风暴造成历史上最大规模的卫星“大规模迁移”
5 月，一场太阳超级风暴造成了历史上最大规模的卫星“大规模迁移”，由于高层大气突然增厚，数千颗卫星必须同时机动以保持其高度。arXiv 上的一篇预印本论文显示，在为期四天的风暴期间，低地球轨道上的卫星和太空垃圾以每天 590 英尺的速度向地球下沉。由于避障系统无法跟上，这种大规模运动带来了碰撞风险。这场风暴是 2003 年以来最强的风暴，凸显了管理如今拥挤的低地球轨道的挑战，该轨道承载着大约 10,000 颗活跃卫星。有趣的是，这场风暴还帮助清理了一些太空垃圾。该论文强调了改进太空天气预报的必要性，特别是随着当前太阳周期在 2024 年末和 2025 年初达到高峰，预计会出现更强大的太阳风暴。]]></description>
      <guid>https://t.me/hn_summary/100393</guid>
      <pubDate>Fri, 19 Jul 2024 23:57:58 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] w 的文章“非正式公共交通网络的高效自组织” [...]</title>
      <link>https://t.me/hn_summary/100392</link>
      <description><![CDATA[非正式公共交通网络的高效自组织
www.nature.com 上的文章“非正式公共交通网络的高效自组织”探讨了非正式公共交通服务的动态，特别关注全球南方国家的小型巴士和面包车等共享交通。这些服务与正式服务不同，没有固定的时间表和站点，但遵守商定的路线，以避免冲突和罚款。尽管这些网络不受监管，但它们可以高效地自组织，覆盖整个城市地区并反映当地人口密度。该研究使用 OpenStreetMap 的 GPS 数据来分析路线结构和绕行概况，结果显示非正式网络通常比正式系统表现出更低的绕行异质性，表明效率更高。这一发现令人惊讶，因为它挑战了人们普遍认为非正式系统由于缺乏监管而本质上效率较低的观点。尽管存在车辆状况和可靠性等问题，但本文强调了这些服务在发展中地区提供流动性和社会平等方面的重要性。（基于 82% 的故事文本的摘要。）]]></description>
      <guid>https://t.me/hn_summary/100392</guid>
      <pubDate>Fri, 19 Jul 2024 23:55:54 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 电子烟（EC）制造商目前正在将第四代 EC 转变为 [...]</title>
      <link>https://t.me/hn_summary/100391</link>
      <description><![CDATA[电子烟上的吃豆人：电子烟将年轻人作为游戏设备
电子烟 (EC) 制造商现在正在将第四代 EC 转变为多功能游戏设备，具有高清 (HD) 显示屏和内置数字游戏，如吃豆人。这些创新的 EC 尤其令人担忧，因为它们对年轻人有吸引力，可能将尼古丁成瘾与游戏障碍联系在一起。其中一款产品在社交媒体上疯传，获得了超过 1200 万次观看。这些 EC 还结合了智能设备的典型功能，例如高清触摸屏、可定制显示屏和无线充电，使它们对年轻用户更具吸引力。尽管这些多功能 EC 具有先进的功能，但其价格与传统 EC 相似，因此年轻人很容易购买。]]></description>
      <guid>https://t.me/hn_summary/100391</guid>
      <pubDate>Fri, 19 Jul 2024 23:55:48 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 鉴于 C++ 和现在的 C23 中增加了 __VA_OPT__，人们对 [...] 产生了兴趣</title>
      <link>https://t.me/hn_summary/100390</link>
      <description><![CDATA[C 中宏的尾递归
鉴于在 C++ 和现在的 C23 中添加了 __VA_OPT__，人们开始对扩展 C 预处理器以包含递归感兴趣。这个想法是，可以在宏中使用 __VA_OPT__ 来测试可变参数是否存在，如下所示：

#define AddUp(X, ...) (X __VA_OPT__( + AddUp(__VA_ARGS__)))


但是，这种方法有两个主要问题。首先，C 中的递归宏不会按预期扩展，导致表达式不完整，如 (a + AddUp(b, c))。要启用真正的递归，需要一种新的语法：

#define AddUp(X, ...) (X __VA_OPT__( + RECURSIVE(__VA_ARGS__)))


eĿlipsis 库模拟了此行为，但由于 C 预处理器递归的二次复杂度，它难以处理长参数列表。为了解决这个问题，eĿlipsis 引入了尾部递归，从而避免了扩展 __VA_ARGS__：

#define AddUp(X, ...) (X __VA_OPT__( + __VA_TAIL__()))


此方法通过直接传递参数列表来确保线性复杂度，使其对于较大的列表更有效率。此外，__VA_TAIL__ 可以指定要尾部调用的宏，从而实现复杂的构造，例如：

#define LEFT(X, ...) X __VA_OPT__( + (__VA_TAIL__(RIGHT)))
#define RIGHT(X, ...) __VA_OPT__((__VA_TAIL__(LEFT)) + ) X


这会根据参数的位置奇偶性对参数进行打乱。eĿlipsis 通过迭代参数列表并将结果拼接在一起来有效地实现这一点。]]></description>
      <guid>https://t.me/hn_summary/100390</guid>
      <pubDate>Fri, 19 Jul 2024 23:54:44 GMT</pubDate>
    </item>
    </channel>
</rss>